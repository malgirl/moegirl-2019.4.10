{"parse":{"title":"\u6a21\u5757:Navbox","pageid":207339,"wikitext":{"*":"--\n-- This module will implement {{Navbox}}\n--\n \nlocal p = {}\n \nlocal navbar = require('Module:Navbar')._navbar\nlocal getArgs -- lazily initialized\n\nlocal args\nlocal tableRowAdded = false\nlocal border\nlocal listnums = {}\n \nlocal function trim(s)\n    return (mw.ustring.gsub(s, \"^%s*(.-)%s*$\", \"%1\"))\nend\n\nlocal function addNewline(s)\n    if s:match('^[*:;#]') or s:match('^{|') then\n        return '\\n' .. s ..'\\n'\n    else\n        return s\n    end\nend\n\nlocal function addTableRow(tbl)\n    -- If any other rows have already been added, then we add a 2px gutter row.\n    if tableRowAdded then\n        tbl\n            :tag('tr')\n                :css('height', '2px')\n                :tag('td')\n                \t:attr('colspan',2)\n    end\n    \n    tableRowAdded = true\n    \n    return tbl:tag('tr')\nend\n\nlocal function renderNavBar(titleCell)\n    -- Depending on the presence of the navbar and/or show/hide link, we may need to add a spacer div on the left\n    -- or right to keep the title centered.\n    local spacerSide = nil\n\n    if args.navbar == 'off' then\n        -- No navbar, and client wants no spacer, i.e. wants the title to be shifted to the left. If there's\n        -- also no show/hide link, then we need a spacer on the right to achieve the left shift.\n        if args.state == 'plain' then spacerSide = 'right' end\n    elseif args.navbar == 'plain' then\n        -- No navbar. Need a spacer on the left to balance out the width of the show/hide link.\n        if args.state ~= 'plain' then spacerSide = 'left' end\n    else\n        -- Will render navbar (or error message). If there's no show/hide link, need a spacer on the right\n        -- to balance out the width of the navbar.\n        if args.state == 'plain' then spacerSide = 'right' end\n\n        titleCell\n            :tag('span')\n                :css('float', 'left')\n                :css('width', '8em')\n                :css('text-align', 'left')\n                :css('margin-right', '0.5em')\n                :wikitext(navbar{ \n                    args.name, \n                    mini = 1, \n                    fontstyle = (args.basestyle or '') .. ';' .. (args.titlestyle or '') ..  ';background:none transparent;border:none;'\n                })\n    end\n    \n    -- Render the spacer div.\n    if spacerSide then\n        titleCell\n            :tag('span')\n                :css('float', spacerSide)\n                :css('width', '8em')\n                :css('font-size', '80%')\n                :css('margin-' .. (spacerSide == 'left' and 'right' or 'left'), '0.5em')\n                :wikitext('&nbsp;')\n    end\nend\n\n--\n--   Title row\n--\nlocal function renderTitleRow(tbl)\n    if not args.title then return end\n \n    local titleRow = addTableRow(tbl)\n     \n    if args.titlegroup then\n        titleRow\n            :tag('th')\n                :attr('scope', 'row')\n                :addClass('navbox-group')\n                :addClass(args.titlegroupclass)\n                :cssText(args.basestyle)\n                :cssText(args.groupstyle)\n                :cssText(args.titlegroupstyle)\n                :wikitext(args.titlegroup)\n    end\n    \n    local titleCell = titleRow:tag('th'):attr('scope', 'col')\n            \n    if args.titlegroup then\n        titleCell\n            :css('border-left', '2px solid #fdfdfd')\n            :css('width', '100%')\n    end\n    \n    local titleColspan = 2\n    if args.imageleft then titleColspan = titleColspan + 1 end\n    if args.image then titleColspan = titleColspan + 1 end\n    if args.titlegroup then titleColspan = titleColspan - 1 end\n    \n    titleCell\n        :cssText(args.basestyle)\n        :cssText(args.titlestyle)\n        :addClass('navbox-title')\n        :attr('colspan', titleColspan)\n \n    renderNavBar(titleCell)\n\n    titleCell\n         :tag('div')\n             :addClass(args.titleclass)\n             :css('font-size', '110%')\n             :wikitext(addNewline(args.title))\nend\n\n--\n--   Above/Below rows\n--\n\nlocal function getAboveBelowColspan()\n    local ret = 2\n    if args.imageleft then ret = ret + 1 end\n    if args.image then ret = ret + 1 end\n    return ret\nend\n\nlocal function renderAboveRow(tbl)\n    if not args.above then return end\n\n    addTableRow(tbl)\n        :tag('td')\n            :addClass('navbox-abovebelow')\n            :addClass(args.aboveclass)\n            :cssText(args.basestyle)\n            :cssText(args.abovestyle)\n            :attr('colspan', getAboveBelowColspan())\n            :tag('div')\n                :wikitext(addNewline(args.above))\nend\n\nlocal function renderBelowRow(tbl)\n    if not args.below then return end\n\n    addTableRow(tbl)\n        :tag('td')\n            :addClass('navbox-abovebelow')\n            :addClass(args.belowclass)\n            :cssText(args.basestyle)\n            :cssText(args.belowstyle)\n            :attr('colspan', getAboveBelowColspan())\n            :tag('div')\n                :wikitext(addNewline(args.below))\nend\n \n--\n--   List rows\n--\nlocal function renderListRow(tbl, listnum)\n    local row = addTableRow(tbl)\n    \n    if listnum == 1 and args.imageleft then\n        row\n            :tag('td')\n                :addClass('navbox-image')\n                :addClass(args.imageclass)\n                :css('width', '0%')\n                :css('padding', '0px 2px 0px 0px')\n                :cssText(args.imageleftstyle)\n                :attr('rowspan', 2 * #listnums - 1)\n                :tag('div')\n                    :wikitext(addNewline(args.imageleft))\n    end\n \n    if args['group' .. listnum] then\n        local groupCell = row:tag('th')\n        \n        groupCell\n               :attr('scope', 'row')\n               :addClass('navbox-group')\n               :addClass(args.groupclass)\n               :cssText(args.basestyle)\n               \n        if args.groupwidth then\n            groupCell:css('width', args.groupwidth)\n        end\n           \n        groupCell\n            :cssText(args.groupstyle)\n            :cssText(args['group' .. listnum .. 'style'])\n            :wikitext(args['group' .. listnum])\n    end\n    \n    local listCell = row:tag('td')\n\n    if args['group' .. listnum] then\n        listCell\n            :css('text-align', 'left')\n            :css('border-left-width', '2px')\n            :css('border-left-style', 'solid')\n    else\n        listCell:attr('colspan', 2)\n    end\n    \n    if not args.groupwidth then \n        listCell:css('width', '100%')\n    end\n    \n    local isOdd = (listnum % 2) == 1\n    local rowstyle = args.evenstyle\n    if isOdd then rowstyle = args.oddstyle end\n \n    local evenOdd\n    if args.evenodd == 'swap' then\n        if isOdd then evenOdd = 'even' else evenOdd = 'odd' end\n    else\n        if isOdd then evenOdd = args.evenodd or 'odd' else evenOdd = args.evenodd or 'even' end\n    end\n\n    listCell\n        :css('padding', '0px')\n        :cssText(args.liststyle)\n        :cssText(rowstyle)\n        :cssText(args['list' .. listnum .. 'style'])\n        :addClass('navbox-list')\n        :addClass('navbox-' .. evenOdd)\n        :addClass(args.listclass)\n        :tag('div')\n            :css('padding', (listnum == 1 and args.list1padding) or args.listpadding or '0em 0.25em')\n            :wikitext(addNewline(args['list' .. listnum]))\n\n    if listnum == 1 and args.image then\n        row\n            :tag('td')\n                :addClass('navbox-image')\n                :addClass(args.imageclass)\n                :css('width', '0%')\n                :css('padding', '0px 0px 0px 2px')\n                :cssText(args.imagestyle)\n                :attr('rowspan', 2 * #listnums - 1)\n                :tag('div')\n                    :wikitext(addNewline(args.image))\n    end\nend\n\n\n--\n--   Tracking categories\n--\n--[=[\nlocal function needsHorizontalLists()\n    if border == 'child' or border == 'subgroup'  or args.tracking == 'no' then return false end\n    \n    local listClasses = {'plainlist', 'hlist', 'hlist hnum', 'hlist hwrap', 'hlist vcard', 'vcard hlist', 'hlist vevent'}\n    for i, cls in ipairs(listClasses) do\n        if args.listclass == cls or args.bodyclass == cls then\n            return false\n        end\n    end\n\n    return true\nend\n\nlocal function hasBackgroundColors()\n    return mw.ustring.match(args.titlestyle or '','background') or mw.ustring.match(args.groupstyle or '','background') or mw.ustring.match(args.basestyle or '','background')\nend\n\nlocal function getTrackingCategories()\n    local cats = {}\n    if needsHorizontalLists() then table.insert(cats, '\u6ca1\u6709\u4f7f\u7528\u6c34\u5e73\u5217\u8868\u7684\u5bfc\u822a\u6846') end\n    if hasBackgroundColors() then table.insert(cats, '\u4f7f\u7528\u80cc\u666f\u989c\u8272\u7684\u5bfc\u822a\u6846') end\n    return cats\nend\n\nlocal function renderTrackingCategories(builder)\n    local title = mw.title.getCurrentTitle()\n    if title.namespace ~= 10 then return end -- not in template space\n    local subpage = title.subpageText\n    if subpage == 'doc' or subpage == 'sandbox' or subpage == 'testcases' then return end\n    \n    for i, cat in ipairs(getTrackingCategories()) do\n        builder:wikitext('[[Category:' .. cat .. ']]') \n    end\nend\n]=]\n--\n--   Main navbox tables\n--\nlocal function renderMainTable()\n    local tbl = mw.html.create('table')\n        :attr('cellspacing', 0)\n        :addClass('nowraplinks')\n        :addClass(args.bodyclass)\n             \n    if args.title and (args.state ~= 'plain' and args.state ~= 'off') then\n        tbl\n            :addClass('mw-collapsible')\n            :addClass(args.state or 'autocollapse')\n    end\n \n    tbl:css('border-spacing', 0)\n    if border == 'subgroup' or border == 'child' or border == 'none' then\n        tbl\n            :addClass('navbox-subgroup')\n            :cssText(args.bodystyle)\n            :cssText(args.style)\n    else -- regular navobx - bodystyle and style will be applied to the wrapper table\n        tbl\n            :addClass('navbox-inner')\n            :css('background', 'transparent')\n            :css('color', 'inherit')\n    end\n    tbl:cssText(args.innerstyle)\n \n    renderTitleRow(tbl)\n    renderAboveRow(tbl)\n    for i, listnum in ipairs(listnums) do\n        renderListRow(tbl, listnum) \n    end\n    renderBelowRow(tbl)\n    \n    return tbl\nend\n\nfunction p._navbox(navboxArgs)\n    args = navboxArgs\n    \n    for k, v in pairs(args) do\n        local listnum = ('' .. k):match('^list(%d+)$')\n        if listnum then table.insert(listnums, tonumber(listnum)) end\n    end\n    table.sort(listnums)\n \n    border = trim(args.border or args[1] or '')\n\n    -- render the main body of the navbox\n    local tbl = renderMainTable()\n\n    -- render the appropriate wrapper around the navbox, depending on the border param\n    local res = mw.html.create()\n    if border == 'none' then\n        res:node(tbl)\n    elseif border == 'subgroup' or border == 'child' then\n        -- We assume that this navbox is being rendered in a list cell of a parent navbox, and is\n        -- therefore inside a div with padding:0em 0.25em. We start with a </div> to avoid the\n        -- padding being applied, and at the end add a <div> to balance out the parent's </div>\n        res\n            :wikitext('</div>') -- XXX: hack due to lack of unclosed support in mw.html.\n            :node(tbl)\n            :wikitext('<div>') -- XXX: hack due to lack of unclosed support in mw.html.\n    else\n        res\n            :tag('table')\n                :attr('cellspacing', 0)\n                :addClass('navbox')\n                :css('border-spacing', 0)\n                :cssText(args.bodystyle)\n                :cssText(args.style)\n                :tag('tr')\n                    :tag('td')\n                        :css('padding', '2px')\n                        :node(tbl)\n    end\n \n    -- [=[ renderTrackingCategories(res) ]=]\n \n    return tostring(res)\nend\n \nfunction p.navbox(frame)\n    if not getArgs then\n    \tgetArgs = require('Module:Arguments').getArgs\n    end\n    args = getArgs(frame, {wrappers = 'Template:Navbox'})\n\n    -- Read the arguments in the order they'll be output in, to make references number in the right order.\n    local _\n    _ = args.title\n    _ = args.above\n    for i = 1, 50 do\n        _ = args[\"group\" .. tostring(i)]\n        _ = args[\"list\" .. tostring(i)]\n    end    \n    _ = args.below\n\n    return p._navbox(args)\nend\n \nreturn p"}}}