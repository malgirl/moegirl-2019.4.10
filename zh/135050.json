{"parse":{"title":"\u6a21\u5757:Var-array/sub","pageid":308452,"wikitext":{"*":"local module = {}\n\nlocal getArgs = require('Module:Arguments').getArgs\nlocal varArray = require('Module:var-array')\n\nlocal var = {\n  get = function(frame, key)\n    return frame:callParserFunction('#var', key)\n  end,\n\n  set = function(frame, key, val)\n    frame:callParserFunction('#vardefine', key, val)\n    return val\n  end\n}\n\nvar.remove = function(frame, key)\n\tlocal deletedVal = var.get(frame, key)\n\tvar.set(frame, key, '')\n\treturn deletedVal\nend\n\nlocal _count = {\n  get = function(frame, array)\n    return tonumber(var.get(frame, array..'.count'))\n  end\n}\n\n_count.plus = function(frame, array)\n\treturn tonumber(var.set(frame, array..'.count', _count.get(frame, array) + 1))\nend\n\n_count.minus = function(frame, array)\n\treturn tonumber(var.set(frame, array..'.count', _count.get(frame, array) - 1))\nend\n\nfunction _getArrayIndex(frame, args)\n\tlocal result = var.get(frame, '@array-innerArrayIdentifier:'..args[2])\n\t\n\tif result == '' then return args[2] end\n\t\n\tfor i, v in ipairs(args) do\n\t\tif i > 2 then\n\t\t\tresult = var.get(frame, result..v)\n\t\tend\n\tend\n\t\n\treturn result\nend\n\nfunction _push(frame, val, array, count)\n  var.set(frame, array..(count + 1), val)\n  return _count.plus(frame, array)\nend\n\nfunction _pop(frame, array, count)\n  if count == 0 then return end\n  _count.minus(frame, array)\n  return var.remove(frame, array..count)\nend\n\nfunction _unshift(frame, val, array, count)\n  for i=count, 1, -1 do\n    local val = var.get(frame, array..i)\n    var.set(frame, array..(i + 1), val)\n  end\n  var.set(frame, array..'1', val)\n  return _count.plus(frame, array)\nend\n\nfunction _shift(frame, array, count)\n  if count == 0 then return end\n  local deletedVal = var.get(frame, array..1)\n  for i=2, count do\n    local val = var.get(frame, array..i)\n    var.set(frame, array..(i - 1), val)\n  end\n  _count.minus(frame, array)\n  return deletedVal\nend\n\nfunction module.getArrayIndex(frame)\n\tlocal args = getArgs(frame)\n\treturn _getArrayIndex(frame, args)\nend\n\nfunction module.action(frame)\n\tlocal args = getArgs(frame)\n\tlocal array = _getArrayIndex(frame, args)\n\tlocal count = _count.get(frame, array)\n\n\tlocal switch = {\n\t\tpush = function()\n\t\t\tlocal result = _push(frame, args['val'], array, count)\n\t\t\tif args['r'] == 'true' then return result end\t\t\t\n\t\tend,\n\t\t\n\t\tpop = function()\n\t\t\tlocal result = _pop(frame, array, count)\n\t\t\tif args['r'] == 'true' then return result end\n\t\tend,\n\t\t\n\t\tunshift = function()\n\t\t\tlocal result = _unshift(frame, args['val'], array, count)\n\t\t\tif args['r'] == 'true' then return result end\n\t\tend,\n\t\t\n\t\tshift = function()\n\t\t\tlocal result = _shift(frame, array, count)\n\t\t\tif args['r'] == 'true' then return result end\n\t\tend,\n\t\t\n\t\tprint = function()\n\t\t\tlocal content = mw.dumpObject(varArray.get(array:gsub('^@array%-innerArrayIdentifier:', '')))\n\t\t\treturn frame:extensionTag('pre', content)\n\t\tend\n\t}\n\t\n\treturn switch[args['method']]()\nend\n\nreturn module"}}}