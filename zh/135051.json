{"parse":{"title":"\u6a21\u5757:VersionHistory","pageid":305602,"wikitext":{"*":"local module = {}\n\nlocal getArgs = require('Module:Arguments').getArgs\nfunction module.funcSelector(frame)\n\tlocal args = getArgs(frame)\n\tlocal funcName = args[\"_funcName\"]\n\tif funcName == \"main\" then\n\t\treturn module.main(args)\n\telseif funcName == \"entry\" then\n\t\treturn module.entry(args)\n\tend\nend\n\nfunction module.main(args)\n\tlocal doc = {}\n\tif args[\"docname\"] == nil then\n\t\tfor i, line in ipairs(args) do\n\t\t\tfor _i, entry in ipairs(module.parseEntries(line)) do\n\t\t\t\ttable.insert(doc, entry)\n\t\t\tend\n\t\tend\n\telse\n\t\tlocal docname = args[\"docname\"]\n\t\tlocal v1, v2 = mw.ustring.find(docname, \":\")\n\t\tlocal title = mw.title.makeTitle(mw.ustring.sub(docname, 1, v1 - 1), mw.ustring.sub(docname, v2 + 1, mw.ustring.len(docname)))\n\t\tlocal doccontent = title:getContent() --\u8bfb\u53d6JSON\u683c\u5f0f\u7684\u7248\u672c\u5386\u53f2\u5143\u6570\u636e\u9875\u7684\u6240\u6709\u5185\u5bb9\u3002\n\t\tdoc = mw.text.jsonDecode(doccontent)\n\tend\n\t\n\tfor i, entry in ipairs(doc) do module.normalizeEntry(entry) end --\u6807\u51c6\u5316\u7248\u672c\u5386\u53f2\u9879\u3002\n\treturn module.output(doc, args)\nend\n\nfunction module.entry(args)\n\tlocal entry = {}\n\tif args[\"version\"] ~= nil then entry.version = args[\"version\"] end\n\tif args[\"time\"] ~= nil then entry.time = args[\"time\"] end\n\tif args[\"summary\"] ~= nil then\n\t\tentry.summary = mw.ustring.gsub(args[\"summary\"], \";\", \"//;//\")\n\t\t\n\t\tif args[\"details\"] ~= nil then\n\t\t\tentry.details = mw.ustring.gsub(args[\"details\"], \";\", \"//;//\")\n\t\tend\n\tend\n\t\n\tmodule.normalizeEntry(entry)\n\tlocal output = args[\"output\"]\n\tif output == \"json\" then\n\t\treturn mw.text.jsonEncode(entry)\n\telse\n\t\treturn mw.ustring.format(\"version:%s;time:%s;summary:%s;details:%s\", entry.version, entry.time, entry.summary, entry.details)\n\tend\nend\n\nfunction module.output(doc, args)\n\ttable.sort(doc,\n\t\tfunction(e1, e2)\n\t\t\tif e1.version ~= nil and e2.version ~= nil then return e1.version < e2.version\n\t\t\telseif e1.time ~= nil and e2.time ~= nil then return e1.time < e2.time\n\t\t\telse return true\n\t\t\tend\n\t\tend\n\t)\n\t\n\tlocal output = args[\"output\"]\n\tif output == \"json\" then\n\t\treturn mw.text.jsonEncode(doc)\n\telse\n\t\tlocal rLines = {}\n\t\tfor i, entry in ipairs(doc) do\n\t\t\tlocal frame = mw.getCurrentFrame()\n\t\t\t\n\t\t\tlocal iif = function(value, valueWhenNil)\n\t\t\t\tif value == nil then return valueWhenNil\n\t\t\t\telse return value\n\t\t\t\tend\n\t\t\tend\n\t\t\tlocal savefunc = function(condition, func)\n\t\t\t\tif condition == nil then return nil\n\t\t\t\telse return func(condition)\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tlocal fullurl = savefunc(entry.version, function()\n\t\t\t\treturn frame:callParserFunction(\"fullurl\", { args[\"pagename\"], \"oldid=\"..entry.version })\n\t\t\tend)\n\t\t\tlocal timeStr = iif(savefunc(entry.time, function()\n\t\t\t\treturn frame:callParserFunction(\"#time\", { \"Y\u5e74m\u6708d\u65e5 (D) H:i\", entry.time })\n\t\t\tend), \"<\u65f6\u95f4\u6570\u636e\u4e22\u5931>\")\n\t\t\tlocal linkStr\n\t\t\tif fullurl == nil then\n\t\t\t\tlinkStr = timeStr\n\t\t\telse\n\t\t\t\tlinkStr = mw.ustring.format(\"[%s %s]\", fullurl, timeStr)\n\t\t\tend\n\t\t\t\n\t\t\tlocal descriptionStr\n\t\t\tif entry.summary == nil then\n\t\t\t\tdescriptionStr = \"\"\n\t\t\telse\n\t\t\t\tlocal span_summary = mw.html.create(\"span\")\n\t\t\t\tspan_summary:wikitext(frame:preprocess(entry.summary))\n\t\t\t\tif entry.details == nil then\n\t\t\t\t\tdescriptionStr = tostring(span_summary)\n\t\t\t\telse\n\t\t\t\t\tspan_summary:attr(\"class\", toggleid)\n\t\t\t\t\t\t\t\t:attr(\"style\", \"cursor:pointer\")\n\t\t\t\t\t\t\t\t:attr(\"title\", args[\"pagename\"])\n\t\t\t\t\tlocal div_details = mw.html.create(\"div\")\n\t\t\t\t\tdiv_details:attr(\"class\", \"mw-collapsible mw-collapsed\")\n\t\t\t\t\t\t\t   :attr(\"id\", toggleid)\n\t\t\t\t\t\t\t   :wikitext(frame:preprocess(entry.details))\n\t\t\t\t\tlocal widgetInvoke = frame:callParserFunction(\"#Widget\", { \"Toggle\" })\n\t\t\t\t\t\n\t\t\t\t\tdescriptionStr = mw.ustring.format(\"%s%s%s\", tostring(span_summary), tostring(div_details), widgetInvoke)\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\ttable.insert(rLines, mw.ustring.format(\"*%s %s\", linkStr, descriptionStr))\n\t\tend\n\t\treturn table.concat(rLines, \"\\r\\n\")\n\tend\nend\n\nfunction module.parseEntries(str)\n\tstr = mw.text.unstripNoWiki(str)\n\tstr = mw.text.decode(str)\n\t\n\tlocal entryStrs = module.splitWithEscape(str, \"///;\\\\\\\\\\\\\", \"//////;\\\\\\\\\\\\\\\\\\\\\\\\\")\n\t\n\tlocal entries = {}\n\tfor i, entryStr in ipairs(entryStrs) do\n\t\tif mw.text.trim(entryStr) ~= \"\" then\n\t\t\tlocal version, time, summary, details\n\t\t\tlocal splitResult = module.splitWithEscape(entryStr, \";\", \"//;//\")\n\t\t\t\n\t\t\tfor _i, v in ipairs(splitResult) do\n\t\t\t\tlocal v1, v2 = mw.ustring.find(v, \":\", nil, true)\n\t\t\t\tif v1 ~= nil then\n\t\t\t\t\tlocal key = mw.ustring.sub(v, 1, v1 - 1)\n\t\t\t\t\tlocal value = mw.ustring.sub(v, v2 + 1, mw.ustring.len(v))\n\t\t\t\t\tif key == \"version\" then\n\t\t\t\t\t\tversion = value\n\t\t\t\t\telseif key == \"time\" then\n\t\t\t\t\t\ttime = value\n\t\t\t\t\telseif key == \"summary\" then\n\t\t\t\t\t\tsummary = value\n\t\t\t\t\telseif key == \"details\" then\n\t\t\t\t\t\tdetails = value\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif version ~= nil or time ~= nil or summary ~= nil or details ~= nil then\n\t\t\t\ttable.insert(entries, { version = version, time = time, summary = summary, details = details })\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn entries\nend\n\nfunction module.splitWithEscape(str, separator, escape)\n\tif str == nil then error(\"str\u7684\u503c\u4e3anil\u3002\") end\n\tif separator == nil then error(\"separator\u7684\u503c\u4e3anil\u3002\") end\n\tif escape == nil then error(\"escape\u7684\u503c\u4e3anil\u3002\") end\n\t\n\tlocal v1, v2 = mw.ustring.find(escape, separator, 1, true)\n\tif v1 == nil then error(\"separator\u5e94\u4e3aescape\u7684\u4e00\u90e8\u5206\") end\n\t\n\tlocal preLen = v1 - 1\n\tlocal sufLen = mw.ustring.len(escape) - v2\n\t\n\tlocal result = {}\n\tlocal p_start = 1\n\tlocal p_buffer = p_start\n\tlocal length = mw.ustring.len(str)\n\twhile p_start < length do\n\t\tv1, v2 = mw.ustring.find(str, separator, p_buffer, true)\n\t\tif v1 == nil then break --\u4e0d\u518d\u6709\u5206\u9694\u7b26\n\t\telseif (v1 < p_buffer + preLen or v2 > length - sufLen) or mw.ustring.sub(str, v1 - preLen, v2 + sufLen) ~= escape then --\u4e0d\u662f\u8f6c\u4e49\u5e8f\u5217\n\t\t\t--\u5206\u5272\u5b57\u7b26\u4e32\n\t\t\ttemp_escapedStr = mw.ustring.gsub(mw.ustring.sub(str, p_start, v1 - 1), escape, separator)\n\t\t\ttable.insert(result, temp_escapedStr)\n\t\t\t\n\t\t\t--\u66f4\u65b0\u8d77\u59cb\u6307\u9488\u548c\u7f13\u5b58\u6307\u9488\n\t\t\tp_start = v2 + 1\n\t\t\tp_buffer = p_start\n\t\telse --\u662f\u8f6c\u4e49\u5e8f\u5217\n\t\t\t--\u66f4\u65b0\u7f13\u5b58\u6307\u9488\n\t\t\tp_buffer = v2 + sufLen + 1\n\t\tend\n\tend\n\ttemp_escapedStr = mw.ustring.gsub(mw.ustring.sub(str, p_start, length), escape, separator)\n\ttable.insert(result, temp_escapedStr)\n\t\n\treturn result\nend\n\nfunction module.normalizeEntry(entry)\n\tif entry == nil then error(\"entry\u7684\u503c\u4e3anil\u3002\") end\n\t\n\tif entry.version ~= nil then\n\t\tentry.version = mw.ustring.match(tostring(entry.version), \"%d+\")\n\tend\n\tif entry.time ~= nil then\n\t\tentry.time = module.time2timeStr(module.timeStr2time(entry.time))\n\tend\n\tif entry.summary == nil and entry.details ~= nil then\n\t\tentry.details = nil\n\tend\nend\n\nfunction module.timeStr2time(timeStr)\n\tif timeStr == nil then error(\"timeStr\u4e3a\u7a7a\") end\n\tif type(timeStr) ~= \"string\" then error(\"timeStr\u7684\u7c7b\u578b\u4e0d\u662f\u51fd\u6570\u63a5\u53d7\u7684\u53c2\u6570\u7c7b\u578b\") end\n\t\n\tlocal year, month, day, hour, min\n\tif year == nil then year, month, day, hour, min = mw.ustring.match(timeStr, \"(%d+)\u5e74(%d+)\u6708(%d+)\u65e5 %([\u65e5\u4e00\u4e8c\u4e09\u56db\u4e94\u516d]%) (%d+):(%d+)\") end\n\tif year == nil then year, month, day, hour, min = mw.ustring.match(timeStr, \"(%d+)-(%d+)-(%d+)T(%d+):(%d+):%d+Z\") end\n\tif year == nil then year, month, day, hour, min = mw.ustring.match(timeStr, \"(%d+)-(%d+)-(%d+) (%d+):(%d+)\") end\n\t\n\tif year == nil then error(\"time\u683c\u5f0f\u4e0d\u6b63\u786e\u3002\") end\n\t\n\tif year == nil then return nil\n\telse return { year = tonumber(year), month = tonumber(month), day = tonumber(day), hour = tonumber(hour), min = tonumber(min) }\n\tend\nend\n\nfunction module.time2timeStr(time)\n\tif time == nil then error(\"time\u4e3a\u7a7a\") end\n\tif type(time) ~= \"table\" then error(\"time\u7684\u7c7b\u578b\u4e0d\u662f\u51fd\u6570\u63a5\u53d7\u7684\u53c2\u6570\u7c7b\u578b\") end\n\t\n\treturn os.date(\"%Y-%m-%d %H:%M\", os.time(time))\nend\n\nreturn module"}}}