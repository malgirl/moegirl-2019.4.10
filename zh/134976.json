{"parse":{"title":"\u6a21\u5757:Luaq","pageid":308278,"wikitext":{"*":"local luaq = {}\n\nfunction luaq.asQuery(t)\n\tif type(t) ~= \"table\" then error(string.format(\"bad argument #1 to 'asQuery' (table expected, got %s)\", type(t))) end\n\t\n\tif t.__getenumerator ~= nil then return t end\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function()\n\t\t\tlocal enumerator_getitem = function(e, t, i)\n\t\t\t\tif i < 1 then error()\n\t\t\t\telseif i == 1 then return next(t, nil)\n\t\t\t\telse\n\t\t\t\t\tlocal k, v = next(t, e.__keys[i - 1])\n\t\t\t\t\tif k == nil then error()\n\t\t\t\t\telse return k, v\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\tlocal enumerator = {\n\t\t\t\t__state = 0,\n\t\t\t\t__keys = {},\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\tlocal success, k, v = pcall(enumerator_getitem, self, q.__table, self.__state)\n\t\t\t\t\tif success then return { key = k, value = v }\n\t\t\t\t\telse return nil\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tif self.__state < 1 then return false\n\t\t\t\t\telse\n\t\t\t\t\t\tlocal success, k, v = pcall(enumerator_getitem, self, q.__table, self.__state - 1)\n\t\t\t\t\t\tif success then self.__state = self.__state - 1 end\n\t\t\t\t\t\treturn success\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tlocal success, k, v = pcall(enumerator_getitem, self, q.__table, self.__state + 1)\n\t\t\t\t\tif success then\n\t\t\t\t\t\tif self.__state == #self.__keys then\n\t\t\t\t\t\t\ttable.insert(self.__keys, k)\n\t\t\t\t\t\tend\n\t\t\t\t\t\tself.__state = self.__state + 1\n\t\t\t\t\tend\n\t\t\t\t\treturn success\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn { self.__state }\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tself.__state = state[1]\n\t\t\t\tend\n\t\t\t}\n\t\t\treturn enumerator\n\t\tend,\n\t\t__table = t\n\t}\n\tattachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.select(query, func)\n\tquery = luaq.asQuery(query)\n\tif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'select' (function expected, got %s)\", type(func))) end\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(this)\n\t\t\tlocal cEnumerator = this.__query:__getenumerator()\n\t\t\treturn {\n\t\t\t\t__index = 0,\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\treturn func(cEnumerator:current(q.__query), self.__index)\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tif cEnumerator:moveLast(q.__query) then\n\t\t\t\t\t\tself.__index = self.__index - 1\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse return false\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tif cEnumerator:moveNext(q.__query) then\n\t\t\t\t\t\tself.__index = self.__index + 1\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse return false\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn { cEnumerator:saveState(q.__query), self.__index }\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tcEnumerator:resetState(q.__query, state[1])\n\t\t\t\t\tself.__index = state[2]\n\t\t\t\tend\n\t\t\t}\n\t\tend,\n\t\t__query = query\n\t}\n\tattachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.where(query, func)\n\tquery = luaq.asQuery(query)\n\tif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'where' (function expected, got %s)\", type(func))) end\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(q)\n\t\t\tlocal cEnumerator = q.__query:__getenumerator()\n\t\t\treturn {\n\t\t\t\t__index = 0,\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\treturn cEnumerator:current(q.__query)\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tlocal state = self:saveState(q)\n\t\t\t\t\twhile cEnumerator:moveLast(q.__query) do\n\t\t\t\t\t\tif func(self:current(q), self.__index) then\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tself:resetState(q, state)\n\t\t\t\t\treturn false\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tlocal state = self:saveState(q)\n\t\t\t\t\twhile cEnumerator:moveNext(q.__query) do\n\t\t\t\t\t\tif func(self:current(q), self.__index) then\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tself:resetState(q, state)\n\t\t\t\t\treturn false\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn { cEnumerator:saveState(q.__query), self.__index }\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tcEnumerator:resetState(q.__query, state[1])\n\t\t\t\t\tself.__index = state[2]\n\t\t\t\tend\n\t\t\t}\n\t\tend,\n\t\t__query = query\n\t}\n\tattachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.count(query)\n\tquery = luaq.asQuery(query)\n\tlocal cEnumerator = query:__getenumerator()\n\tlocal c = 0\n\twhile cEnumerator:moveNext(query) do\n\t\tc = c + 1\n\tend\n\treturn c\nend\n\nfunction luaq.any(query, func)\n\tlocal q = luaq.asQuery(query):where(func)\n\tlocal cEnumerator = q:__getenumerator()\n\twhile cEnumerator:moveNext(q) do\n\t\treturn true\n\tend\n\treturn false\nend\n\nfunction luaq.all(query, func)\n\tlocal q = luaq.asQuery(query)\n\tlocal cEnumerator = q:__getenumerator()\n\twhile cEnumerator:moveNext(q) do\n\t\tif not func(cEnumerator:current(q)) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\n\nfunction luaq.groupBy(query, keySelectFunc, keyEqualityFunc)\n\tquery = query:asQuery()\n\tif type(keySelectFunc) ~= \"function\" then error(string.format(\"bad argument #2 to 'groupBy' (function expected, got %s)\", type(keySelectFunc))) end\n\tif keyEqualityFunc == nil then\n\t\tkeyEqualityFunc = function(x, y) return x == y end\n\telseif type(keyEqualityFunc) ~= \"function\" then error(string.format(\"bad argument #3 to 'groupBy' (function expected, got %s)\", keyEqualityFunc(func)))\n\tend\n\t\n\treturn query\n\t\t:select(keySelectFunc)\n\t\t:distinct(keyEqualityFunc)\n\t\t:select(\n\t\t\tfunction(k)\n\t\t\t\tlocal g = query:where(\n\t\t\t\t\tfunction(e) return keyEqualityFunc(keySelectFunc(e), k) end\n\t\t\t\t)\n\t\t\t\tg.key = k\n\t\t\t\treturn g\n\t\t\tend\n\t\t)\nend\n\nfunction luaq.distinct(query, func)\n\tquery = luaq.asQuery(query)\n\tif func == nil then\n\t\tfunc = function(x, y) return x == y end\n\telseif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'distinct' (function expected, got %s)\", type(func)))\n\tend\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(this)\n\t\t\tlocal cEnumerator = this.__query:__getenumerator()\n\t\t\treturn {\n\t\t\t\t__index = 0,\n\t\t\t\t__buff = {},\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\treturn self.__buff[self.__index]\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tif self.__index < 2 then return false\n\t\t\t\t\telse\n\t\t\t\t\t\tself.__index = self.__index - 1\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tif self.__index < #self.__buff then\n\t\t\t\t\t\tself.__index = self.__index + 1\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse\n\t\t\t\t\t\twhile cEnumerator:moveNext(q.__query) do\n\t\t\t\t\t\t\tlocal current = cEnumerator:current(q.__query)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlocal f = true\n\t\t\t\t\t\t\tfor i, v in ipairs(self.__buff) do\n\t\t\t\t\t\t\t\tif func(v, current) then\n\t\t\t\t\t\t\t\t\tf = false\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif f then\n\t\t\t\t\t\t\t\ttable.insert(self.__buff, current)\n\t\t\t\t\t\t\t\tself.__index = self.__index + 1\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn { cEnumerator:saveState(q.__query), self.__index }\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tcEnumerator:resetState(q.__query, state[1])\n\t\t\t\t\tself.__index = state[2]\n\t\t\t\tend\n\t\t\t}\n\t\tend,\n\t\t__query = query\n\t}\n\tattachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.reverse(query)\n\tquery = luaq.asQuery(query)\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(this)\n\t\t\tlocal cEnumerator = this.__query:__getenumerator()\n\t\t\tlocal hasItem = false\n\t\t\twhile cEnumerator:moveNext(this.__query) do\n\t\t\t\thasItem = true\n\t\t\tend\n\t\t\treturn {\n\t\t\t\t__f = false,\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\tif self.__f then return cEnumerator:current(q.__query)\n\t\t\t\t\telse return nil\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tif self.__f then return cEnumerator:moveNext(q.__query)\n\t\t\t\t\telse return false\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tif self.__f then return cEnumerator:moveLast(q.__query)\n\t\t\t\t\telseif hasItem then\n\t\t\t\t\t\tself.__f = true\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse return false\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn { cEnumerator:saveState(q.__query), self.__f }\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tcEnumerator:resetState(q.__query, state[1])\n\t\t\t\t\tself.__f = state[2]\n\t\t\t\tend\n\t\t\t}\n\t\tend,\n\t\t__query = query\n\t}\n\tattachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.aggregate(query, func, seed)\n\tlocal q = luaq.asQuery(query)\n\tif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'aggregate' (function expected, got %s)\", type(func))) end\n\t\n\tlocal index = 1\n\tlocal result = seed\n\tlocal cEnumerator = q:__getenumerator()\n\twhile cEnumerator:moveNext(q) do\n\t\tresult = func(result, cEnumerator:current(q), index)\n\t\tindex = index + 1\n\tend\n\treturn result\nend\n\nfunction luaq.query(query)\n\tlocal q = luaq.asQuery(query)\n\tlocal t = {}\n\tlocal cEnumerator = q:__getenumerator()\n\twhile cEnumerator:moveNext(q) do\n\t\ttable.insert(t, cEnumerator:current(q))\n\tend\n\treturn t\nend\n\nfunction attachluaq(q)\n\tq.asQuery = luaq.asQuery\n\tq.select = luaq.select\n\tq.where = luaq.where\n\tq.count = luaq.count\n\tq.any = luaq.any\n\tq.all = luaq.all\n\tq.groupBy = luaq.groupBy\n\tq.distinct = luaq.distinct\n\tq.reverse = luaq.reverse\n\tq.query = luaq.query\n\tq.aggregate = luaq.aggregate\nend\n\nreturn luaq"}}}