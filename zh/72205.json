{"parse":{"title":"User:Imbushuo/Cosmos\u5206\u6790\u6307\u5357","pageid":221315,"wikitext":{"*":"== \u6982\u8ff0 ==\n\u4e00\u4e9b\u9875\u9762\uff0c\u6bd4\u5982 [[User:imbushuo/\u9700\u8981\u7684\u9875\u9762]] \u4f7f\u7528\u673a\u5668\u81ea\u52a8\u751f\u6210\u6280\u672f\u751f\u6210\u3002\u5982\u679c\u60a8\u60f3\u8fdb\u884c\u4e00\u4e9b\u7ef4\u62a4\u76f8\u5173\u7684\u6570\u636e\u5206\u6790\u7684\u8bdd\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u5907\u5fd8\u5f55\u91cc\u7684\u5185\u5bb9\u3002\n\n== \u5148\u51b3\u6761\u4ef6 ==\n* \u6709\u4e00\u4e2a Microsoft Azure \u56fd\u9645\u7248\u8ba2\u9605\uff0c\u6dfb\u52a0\u4e86 Data Lake \u529f\u80fd\n* \u6216\u8005\u4f60\u662f\u5fae\u8f6f\u5458\u5de5\uff08Data Lake \u4e5f\u5c31\u662f Cosmos\uff09\n\n== \u94fe\u63a5\u5206\u6790 ==\n\n=== \u6570\u636e\u51c6\u5907 ===\n\u4f7f\u7528\u4e00\u4e2a\u60a8\u81ea\u5df1\u7684\u65b9\u6848\u6293\u53d6\u6240\u6709\u5185\u90e8\u94fe\u63a5\uff08\u6bd4\u5982\u53c2\u8003 API/Query \u7684 Generator \u5e76\u7ed3\u5408 Parse\uff09\u3002\u7136\u540e\u628a\u6570\u636e\u6574\u5408\u6210 TSV\uff08\u5236\u8868\u7b26\u5206\u9694\u7b26\u6587\u4ef6\uff09\uff0c\u4f7f\u7528 '''`''' \u4f5c\u4e3a Escape Character \uff08\u4f46\u662f\u53ef\u4ee5\u4fee\u6539\uff09\u3002\n\n\u6309\u7167\u4ee5\u4e0b\u7684\u683c\u5f0f\uff0c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u94fe\u63a5\uff1a\n<pre>\u6e90\u9875\u9762ID<tab>\u6e90\u9875\u9762\u547d\u540d\u7a7a\u95f4\u7f16\u53f7<tab>\u6e90\u9875\u9762\u6807\u9898<tab>\u94fe\u63a5\u9875\u9762\u547d\u540d\u7a7a\u95f4\u7f16\u53f7<tab>\u94fe\u63a5\u9875\u9762\u6807\u9898<tab>\u94fe\u63a5\u5b58\u5728\u60c5\u51b5</pre>\n\n\u628a '''<tab>''' \u6362\u6210\u5236\u8868\u7b26\u3002\u4fdd\u5b58\u5e76\u4e0a\u4f20\u3002\n\n=== U-SQL/Scope \u811a\u672c ===\n\n\u53c2\u8003\u5982\u4e0b\u7684\u811a\u672c\u4ee5\u83b7\u53d6\u94fe\u63a5\u6700\u591a\u7684\u9875\u9762\u548c\u9700\u8981\u7684\u9875\u9762\u3002\n<pre>\nDECLARE @linkInputSrc string = \"/Moegirlpedia/MgLinks-170407-1714.tsv\";\nDECLARE @linkOutput string = \"/Moegirlpedia/MostWanted-Output-\" + DateTime.Now.ToString(\"yyMMdd-HHmmss\") + \".csv\";\nDECLARE @mostLinkedOutput string = \"/Moegirlpedia/MostLinked-Output-\" + DateTime.Now.ToString(\"yyMMdd-HHmmss\") + \".csv\";\nDECLARE @linkWikiOutput string = \"/Moegirlpedia/MostWanted-Output-Wiki-\" + DateTime.Now.ToString(\"yyMMdd-HHmmss\") + \".txt\";\nDECLARE @mostLinkedWikiOutput string = \"/Moegirlpedia/MostLinked-Output-Wiki-\" + DateTime.Now.ToString(\"yyMMdd-HHmmss\") + \".txt\";\n\n@link = \n    EXTRACT SourcePageId            int,\n            SourcePageNamespace     int,\n            SourcePageTitle         string,\n            LinkNamespaceId         int?,\n            LinkTitle               string,\n            IsLinkExist             bool?\n    FROM @linkInputSrc\n    USING Extractors.Tsv(escapeCharacter: '`', encoding: Encoding.UTF8, silent: true);\n\n// \u5982\u679c\u4f60\u8fd0\u884c\u4e86\u68c0\u67e5\u6700\u8fd1\u66f4\u6539\u7684\u5185\u5bb9\u670d\u52a1\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 LEFT JOIN \u5e76\u5224\u65ad\u7a7a\u503c\u60c5\u51b5\u6765\u6ee4\u6389\u5df2\u7ecf\u521b\u5efa\u7684\u6761\u76ee\u3002\n// \u4f46\u662f\u8fd9\u6837\u4e0d\u4f1a\u4f7f\u5f97\u65b0\u7f3a\u5931\u7684\u6761\u76ee\u663e\u793a\u3002\u4e0d\u8fc7\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u8fd1\u4e4e\u9759\u6001\u7684\uff0c\u6216\u91cd\u65b0\u5efa\u7acb\u7d22\u5f15\u3002\n// \u91cd\u65b0\u5efa\u7acb\u7d22\u5f15\u53ef\u80fd\u9700\u8981\u6570\u4e2a\u5c0f\u65f6\u7684\u65f6\u95f4\uff0c\u5e76\u4f1a\u5bf9\u670d\u52a1\u5668\u9020\u6210\u663e\u8457\u7684\u6027\u80fd\u5f71\u54cd\u3002\n\n@wantedLink = \n    SELECT \n        IsLinkExist, \n        LinkTitle,\n        LinkNamespaceId\n    FROM @link\n    // We are only interested in main namespace currently\n    WHERE \n        // Ensure link exists!\n        LinkTitle != null && \n        IsLinkExist == false && \n        (LinkNamespaceId == 0 || LinkNamespaceId == null);\n\n@existLink = \n    SELECT \n        IsLinkExist, \n        LinkTitle,\n        LinkNamespaceId\n    FROM @link\n    // We are only interested in main namespace currently\n    WHERE \n        // Ensure link exists!\n        LinkTitle != null && \n        IsLinkExist == true && \n        (LinkNamespaceId == 0 || LinkNamespaceId == null);\n\n@sortedWantedLink = \n    SELECT\n        LinkTitle,\n        COUNT(LinkTitle) AS ReferenceCountSum\n    FROM @wantedLink\n    GROUP BY LinkTitle\n    // Ignore individual page yet\n    HAVING COUNT(LinkTitle) > 25;\n\n@sortedExistLink = \n    SELECT\n        LinkTitle,\n        COUNT(LinkTitle) AS ReferenceCountSum\n    FROM @existLink\n    GROUP BY LinkTitle\n    // Ignore individual page yet\n    HAVING COUNT(LinkTitle) > 100;\n\n// For most demanded table\nOUTPUT @sortedWantedLink\n    TO @linkOutput\n    ORDER BY ReferenceCountSum DESC\nUSING Outputters.Csv();\n\nOUTPUT @sortedWantedLink\n    TO @linkWikiOutput\n    ORDER BY ReferenceCountSum DESC\nUSING Moegirlpedia.Analysis.WikiTableOutputterFactory.WikiTableOutputter(true, Encoding.Unicode);\n\n// For most linked table\nOUTPUT @sortedExistLink\n    TO @mostLinkedOutput\n    ORDER BY ReferenceCountSum DESC\nUSING Outputters.Csv();\n\nOUTPUT @sortedExistLink\n    TO @mostLinkedWikiOutput\n    ORDER BY ReferenceCountSum DESC\nUSING Moegirlpedia.Analysis.WikiTableOutputterFactory.WikiTableOutputter(true, Encoding.Unicode);\n</pre>\n\n=== \u81ea\u5b9a\u4e49\u8f93\u51fa\u5668 ===\n\n\u5982\u679c\u9700\u8981\u8f93\u51fa\u4e3a Wiki \u8868\u683c\u7684\u8bdd\uff0c\u8fd8\u9700\u8981\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u8f93\u51fa\u5668\uff1a\n<pre>\nusing Microsoft.Analytics.Interfaces;\nusing System;\nusing System.IO;\nusing System.Text;\n\nnamespace Moegirlpedia.Analysis\n{\n    /// <summary>\n    /// Outputter that emits Wikitext-based table from analytics output.\n    /// </summary>\n    [SqlUserDefinedOutputter(AtomicFileProcessing = false)]\n    public class WikiTableOutputter : IOutputter\n    {\n        private Encoding m_encoding;\n        private bool m_isHeaderRowIncluded;\n        private bool m_isTableHeaderEmitted;\n        private Stream m_writerStream;\n        private StringBuilder m_stringBuilder;\n\n        /// <summary>\n        /// Initializes new instance of <see cref=\"WikiTableOutputter\"/>.\n        /// </summary>\n        /// <param name=\"includeDataHeader\">Whether header is included.</param>\n        /// <param name=\"encoding\">Output file encoding.</param>\n        public WikiTableOutputter(bool includeDataHeader = false, Encoding encoding = null)\n        {\n            m_isHeaderRowIncluded = includeDataHeader;\n            m_stringBuilder = new StringBuilder();\n            m_encoding = encoding ?? Encoding.UTF8;\n            m_isTableHeaderEmitted = false;\n        }\n\n        /// <inheritdoc />\n        public override void Close()\n        {\n            var streamWriter = new StreamWriter(m_writerStream, m_encoding);\n            streamWriter.Write(m_stringBuilder.ToString());\n            streamWriter.WriteLine(\"|}\");\n            streamWriter.Flush();\n            streamWriter.Close();\n        }\n\n        public override void Output(IRow input, IUnstructuredWriter output)\n        {\n            // Null check\n            if (input == null) return;\n\n            var streamWriter = new StreamWriter(output.BaseStream, m_encoding);\n\n            // Metadata schema initialization to enumerate column names.\n            var schema = input.Schema;\n\n            // Check table header.\n            if (!m_isTableHeaderEmitted)\n            {\n                // Some warning text\n                m_stringBuilder.AppendLine(\"<!-- COSMOS OUTPUT: THIS TABLE IS MACHINE-GENERATED. ALL CHANGES WILL BE OVERWRITTEN WHEN THE TABLE IS UPDATED -->\");\n                m_stringBuilder.AppendLine(\"<!-- LAST UPDATED ON \" + DateTime.UtcNow.ToString() + \" UTC -->\");\n                m_stringBuilder.AppendLine();\n                m_stringBuilder.AppendLine(\"<!-- COSMOS \u8f93\u51fa\uff1a\u672c\u8868\u683c\u7531\u673a\u5668\u751f\u6210\u3002\u4fee\u6539\u5c06\u5728\u4e0b\u4e00\u6b21\u673a\u5668\u8fd0\u884c\u65f6\u88ab\u8986\u76d6\u3002 -->\");\n                m_stringBuilder.AppendLine(\"<!-- \u4e0a\u6b21\u66f4\u65b0\u4e8e \" + DateTime.UtcNow.ToString() + \" UTC -->\");\n\n                m_stringBuilder.AppendLine(\"{| class=\\\"wikitable sortable\\\" style=\\\"margin: 0px auto; text - align:center; \\\" \");\n                m_stringBuilder.AppendLine(\"|-\");\n                m_isTableHeaderEmitted = true;\n            }\n\n            // Emit table data header if required.\n            if (m_isHeaderRowIncluded)\n            {\n                foreach (var column in schema)\n                {\n                    // Write each column\n                    m_stringBuilder.Append(\"! \");\n                    m_stringBuilder.AppendLine(column.Name);\n                }\n\n                // End of row\n                m_stringBuilder.AppendLine(\"|-\");\n\n                // Mark and included\n                m_isHeaderRowIncluded = false;\n            }\n\n            // Data row\n            foreach (var column in schema)\n            {\n                string serializedContent = string.Empty;\n\n                try\n                {\n                    serializedContent = input.Get<object>(column.Name).ToString() ?? string.Empty;\n                }\n                catch (NullReferenceException)\n                {\n                    // Ignore\n                }\n\n                m_stringBuilder.Append(\"| \");\n                m_stringBuilder.AppendLine(serializedContent);\n            }\n\n            // End of row\n            m_stringBuilder.AppendLine(\"|-\");\n\n            // For footer generation\n            m_writerStream = output.BaseStream;\n        }\n    }\n\n    public static class WikiTableOutputterFactory\n    {\n        public static WikiTableOutputter WikiTableOutputter(bool includeHeader = false, Encoding encoding = null)\n        {\n            return new WikiTableOutputter(includeHeader, encoding);\n        }\n    }\n}\n</pre>\n\n=== \u6570\u636e ===\n\u8fd0\u884c\u811a\u672c\uff0c\u4f1a\u5f97\u5230\u9017\u53f7\u5206\u9694\u7b26\uff08CSV\uff09\u8868\u683c\u6587\u4ef6\u548c\u7ef4\u57fa\u8868\u683c\u6587\u4ef6\u3002\u7ef4\u57fa\u8868\u683c\u6587\u4ef6\u53ef\u7528\u4e8e\u81ea\u52a8\u751f\u6210\u76f8\u5173\u9875\u9762\u3002\u60a8\u4e5f\u53ef\u4ee5\u6839\u636e\u60a8\u7684\u9700\u6c42\u81ea\u884c\u6269\u5c55\u5206\u6790\u4efb\u52a1\u3002\n\n== \u53c2\u8003\u8d44\u6599 ==\n* [https://docs.microsoft.com/en-us/azure/data-lake-analytics/data-lake-analytics-get-started-portal Tutorial: get started with Azure Data Lake Analytics using Azure portal]\n* [https://docs.microsoft.com/en-us/azure/data-lake-analytics/data-lake-analytics-data-lake-tools-get-started Tutorial: develop U-SQL scripts using Data Lake Tools for Visual Studio]\n* [https://msdn.microsoft.com/en-us/library/azure/mt621334.aspx Output Statement (U-SQL)]\n* [https://docs.microsoft.com/en-us/azure/data-lake-analytics/data-lake-analytics-debug-u-sql-jobs Debug user defined C# code for failed U-SQL jobs]"}}}