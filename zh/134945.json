{"parse":{"title":"\u6a21\u5757:Colour","pageid":315832,"wikitext":{"*":"local module = {}\n\nlocal getArgs = require('Module:Arguments').getArgs\n\nfunction random(min, max)\n  return mw.getCurrentFrame():expandTemplate{ title = 'random', args = { min, max } }\nend\n\nfunction toDecimal(rgb)\n  rgb = rgb:gsub('^#', '')\n\n  rgb = {\n    tonumber(rgb:sub(1, 2), 16),\n    tonumber(rgb:sub(3, 4), 16),\n    tonumber(rgb:sub(5, 6), 16)\n  }\n  \n  return rgb\nend\n\nfunction toCss(rgb, opacity, htmlFormat)\n  local method = 'rgb'\n  if opacity then\n  \tmethod = 'rgba'\n  \ttable.insert(rgb, opacity)\n  end\n  \n  function toHtml(num)\n  \tlocal int, float = math.modf(num)\n  \tif float > 0.4 then int = int + 1 end\n    local zero = ''\n  \tif int < 16 then zero = '0' end\n  \treturn zero..string.format('%X', int)\n  end\n  \n  if htmlFormat == 'html' then\n  \treturn '#'..toHtml(rgb[1])..toHtml(rgb[2])..toHtml(rgb[3])\n  else\n\treturn method..'('..table.concat(rgb, ',')..')'\n  end\nend\n\nfunction clone( object )\n  local lookup_table = {}\n  function copyObj( object )\n    if type( object ) ~= \"table\" then\n        return object\n    elseif lookup_table[object] then\n        return lookup_table[object]\n    end\n    \n    local new_table = {}\n    lookup_table[object] = new_table\n    for key, value in pairs( object ) do\n        new_table[copyObj( key )] = copyObj( value )\n    end\n    return setmetatable( new_table, getmetatable( object ) )\n  end\n  return copyObj( object )\nend\n\nfunction _main(args)\n  local action = args[1]\n  local arg1 = args[2]\n  local arg2 = args[3]\n  if action == 'reverse' then\n    local rgb = toDecimal(arg1) \n    for i, v in ipairs(rgb) do\n      rgb[i] = math.abs(v - 255)\n    end\n    return toCss(rgb, false, arg2)\n  end\n\n  if action == 'random' then\n    local min = 0\n    local max = 255\n    if arg2 then\n      min = arg1\n      max = arg2\n    elseif args1 then\n      min = args1\n    end\n\n    local rgb = {\n      random(min, max),\n      random(min, max),\n      random(min, max)\n    }\n\n    return toCss(rgb, false, arg2)\n  end\n  \n  if action == 'rgba' then\n    local rgb = toDecimal(arg1)\n  \treturn toCss(rgb, arg2) \n  end\n\n  if action:find('^[%+%-]') or action == 'test' then\n    local rgb = toDecimal(arg1)\n    local tenth = {}\n    for i, v in ipairs(rgb) do\n      tenth[i] = {\n        ['-'] = (255 - v) / 10,\n        ['+'] = - v / 10\n      }\n    end\n\n    function block(text, color)\n      return '<ruby style=\"color:'..color..'\">\u25a0<rt style=\"color:black\">'..text..'<rt></ruby>&nbsp;'\n    end\n\n    function compute(operator, degree)\n      local rgb = clone(rgb)\n      for i, v in ipairs(rgb) do\n        rgb[i] = v + tenth[i][operator] * degree\n        if rgb[i] < 0 then rgb[i] = 0 end\n        if rgb[i] > 255 then rgb[i] = 255 end\n      end\n      return rgb\n    end\n\n    if action == 'test' then\n      local left = ''\n      local right = ''\n      for i=1, 9 do\n        left = block('-'..i, toCss(compute('-', i), false, arg2))..left\n        right = right..block('+'..i, toCss(compute('+', i), false, arg2))\n      end\n      return '<div style=\"font-size:30px\">'..left..block('\u25bc', toCss(rgb, false, arg2))..right..'</div>'\n    end\n    \n    local degree = 1\n    if action:find('%d$') then\n      local plus = tonumber(action:match('(%d)$'))\n      if plus > 9 then plus = 9 end\n      degree = plus\n    end\n\n    local operator = action:sub(1, 1)\n    return toCss(compute(operator, degree), false, arg2)\n  end\nend\n\nfunction module.main(frame)\n\tlocal args = getArgs(frame)\n\treturn _main(args)\nend\n\nreturn module"}}}