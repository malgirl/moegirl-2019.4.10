{"parse":{"title":"\u6a21\u5757:Sandbox/\u30b5\u30f3\u30e0\u30eb/Luaq","pageid":310238,"wikitext":{"*":"local luaq = {}\nluaq.utilities = {}\n\nfunction luaq.asQuery(t)\n\tif type(t) ~= \"table\" then error(string.format(\"bad argument #1 to 'asQuery' (table expected, got %s)\", type(t))) end\n\t\n\tif t.__getenumerator ~= nil then return t end\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(this, last)\n\t\t\tlocal state\n\t\t\tlocal keys = {}\n\t\t\tif last then\n\t\t\t\tfor k, v in pairs(t) do\n\t\t\t\t\ttable.insert(keys, k)\n\t\t\t\tend\n\t\t\t\tstate = #keys + 1\n\t\t\telse state = 0\n\t\t\tend\n\n\t\t\tlocal enumerator_getitem = function(e, t, i)\n\t\t\t\tif i < 1 or i > e.__length then error(mw.string.format(\"enumerator state %d out of range.\", i))\n\t\t\t\telseif i == 1 then return next(t, nil)\n\t\t\t\telse\n\t\t\t\t\tlocal k, v = next(t, e.__keys[i - 1])\n\t\t\t\t\tif k == nil then error()\n\t\t\t\t\telse return k, v\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\tlocal enumerator = {\n\t\t\t\t__length = #keys,\n\t\t\t\t__state = state,\n\t\t\t\t__keys = keys,\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\tlocal success, k, v = pcall(enumerator_getitem, self, q.__table, self.__state)\n\t\t\t\t\tif success then return { key = k, value = v }\n\t\t\t\t\telse return nil\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tif self.__state <= 1 then return false\n\t\t\t\t\telse\n\t\t\t\t\t\tlocal success, k, v = pcall(enumerator_getitem, self, q.__table, self.__state - 1)\n\t\t\t\t\t\tif success then self.__state = self.__state - 1 end\n\t\t\t\t\t\treturn success\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tif self.__length ~= 0 and self.__state >= self.__length then return false\n\t\t\t\t\telse\n\t\t\t\t\t\tlocal success, k, v = pcall(enumerator_getitem, self, q.__table, self.__state + 1)\n\t\t\t\t\t\tif success then\n\t\t\t\t\t\t\tif self.__state == #self.__keys then\n\t\t\t\t\t\t\t\ttable.insert(self.__keys, k)\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tself.__state = self.__state + 1\n\t\t\t\t\t\telse return success\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn { self.__state }\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tself.__state = state[1]\n\t\t\t\tend\n\t\t\t}\n\t\t\treturn enumerator\n\t\tend,\n\t\t__table = t\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.iasQuery(t)\n\tif type(t) ~= \"table\" then error(string.format(\"bad argument #1 to 'asQuery' (table expected, got %s)\", type(t))) end\n\t\n\tif t.__getenumerator ~= nil then return t end\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(this, last)\n\t\t\tlocal index\n\t\t\tif last then index = #t else index = 0 end\n\t\t\treturn luaq.utilities.igetEnumerator(t, nil, index)\n\t\tend,\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.asQueryFrom(...)\n\tlocal params = { ... }\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(this, last)\n\t\t\tlocal index\n\t\t\tif last then index = #t else index = 0 end\n\t\t\treturn luaq.utilities.igetEnumerator(params, select(\"#\", params), index)\n\t\tend,\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.utilities.igetEnumerator(t, length, index)\n\treturn {\n\t\t__length = length,\n\t\t__index = index,\n\t\tcurrent = function(self, q) return t[self.__index] end,\n\t\tmoveLast = function(self, q) return self.__index > 1 end,\n\t\tmoveNext = function(self, q) return self.__index < (self.__length or #t) end,\n\t\tsaveState = function(self, q) return { self.__index } end,\n\t\tresetState = function(self, q, state) self.__index = state[1] end\n\t}\nend\n\nfunction luaq.utilities.getLastEnumerator(e, q)\n\tlocal f = false\n\twhile e:moveNext(q) do\n\t\tf = true or f\n\tend\n\tif not f then return luaq.utilities.getEmptyEnumerator() end\n\t\n\treturn {\n\t\t__f = true,\n\t\tcurrent = function(self, q)\n\t\t\tif self.__f then return nil\n\t\t\telse return self.__enumerator:current(q)\n\t\t\tend\n\t\tend,\n\t\tmoveLast = function(self, q)\n\t\t\tif self.__f then\n\t\t\t\tself.__f = false\n\t\t\t\treturn true\n\t\t\telse return self.__enumerator:moveNext(q)\n\t\t\tend\n\t\tend,\n\t\tmoveNext = function(self, q)\n\t\t\tif self.__f then return false\n\t\t\telse return self.__enumerator:moveNext(q)\n\t\t\tend\n\t\tend,\n\t\tsaveState = function(self, q)\n\t\t\treturn { self.__enumerator:saveState(q), self.__f }\n\t\tend,\n\t\tresetState = function(self, q, state)\n\t\t\tself.__enumerator:resetState(q, state[1])\n\t\t\tself.__f = state[2]\n\t\tend,\n\t\t__enumerator = e\n\t}\nend\n\nfunction luaq.select(query, func)\n\tquery = luaq.asQuery(query)\n\tif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'select' (function expected, got %s)\", type(func))) end\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(this, last)\n\t\t\tlocal cEnumerator = this.__query:__getenumerator()\n\t\t\tlocal enumerator = {\n\t\t\t\t__index = index,\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\treturn func(cEnumerator:current(q.__query), self.__index)\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tif cEnumerator:moveLast(q.__query) then\n\t\t\t\t\t\tself.__index = self.__index - 1\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse return false\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tif cEnumerator:moveNext(q.__query) then\n\t\t\t\t\t\tself.__index = self.__index + 1\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse return false\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn { cEnumerator:saveState(q.__query), self.__index }\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tcEnumerator:resetState(q.__query, state[1])\n\t\t\t\t\tself.__index = state[2]\n\t\t\t\tend\n\t\t\t}\n\t\t\tif last then\n\t\t\t\treturn luaq.utilities.getLastEnumerator(enumerator, this)\n\t\t\telse return enumerator\n\t\t\tend\n\t\tend,\n\t\t__query = query\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.selectMany(query, querySelector, resultSelector)\n\tquery = luaq.asQuery(query)\n\tif type(querySelector) ~= \"function\" then error(string.format(\"bad argument #2 to 'selectMany' (function expected, got %s)\", type(querySelector))) end\n\tif resultSelector == nil then\n\t\tresultSelector = function(sourceItem, queryItem) return queryItem end\n\telseif type(resultSelector) ~= \"function\" then error(string.format(\"bad argument #3 to 'selectMany' (function expected, got %s)\", type(resultSelector)))\n\tend\n\n\tlocal qResult = {\n\t\t__getenumerator = function(q, last)\n\t\t\tlocal cQQ = luaq.iasQuery(\n\t\t\t\tq.__query:select(function(item, index)\n\t\t\t\t\tlocal qQ = luaq.asQuery(\n\t\t\t\t\t\tquerySelector(item):select(function(item, index)\n\t\t\t\t\t\t\treturn { item = item, index = index }\n\t\t\t\t\t\tend)\n\t\t\t\t\t)\n\t\t\t\t\treturn { item = item, index = index, query = qQ, enumerator = qQ:__getenumerator(last) }\n\t\t\t\tend)\n\t\t\t\t:query()\n\t\t\t)\n\t\t\tlocal cQE = cQQ:__getenumerator(last)\n\t\t\treturn {\n\t\t\t\t__f = true,\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\tif self.__f then return nil\n\t\t\t\t\telse\n\t\t\t\t\t\tlocal info = cQE:current(cQQ)\n\t\t\t\t\t\tlocal queryItemInfo = info.enumerator:current(info.query)\n\t\t\t\t\t\treturn resultSelector(info.item, queryItemInfo, info.index, queryItemInfo.index)\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tif self.__f and not last then return false\n\t\t\t\t\telse\n\t\t\t\t\t\trepeat\n\t\t\t\t\t\t\tlocal info = cQE:current(cQQ)\n\t\t\t\t\t\t\tif info.enumerator:moveLast(info.query) then\n\t\t\t\t\t\t\t\tif self.__f and last then self.__f = false end\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tuntil not cQE:moveLast(cQQ)\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tif self.__f and last then return false\n\t\t\t\t\telse\n\t\t\t\t\t\trepeat\n\t\t\t\t\t\t\tlocal info = cQE:current(cQQ)\n\t\t\t\t\t\t\tif info.enumerator:moveNext(info.query) then\n\t\t\t\t\t\t\t\tif self.__f and not last then self.__f = false end\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tuntil not cQE:moveNext(cQQ)\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn cQQ.select(function(info)\n\t\t\t\t\t\treturn info.enumerator:saveState(info.query).query()\n\t\t\t\t\tend)\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tcQQ.foreach(function(info, index)\n\t\t\t\t\t\tinfo.enumerator:resetState(info.query, state[index])\n\t\t\t\t\tend)\n\t\t\t\tend\n\t\t\t}\n\t\tend\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.where(query, func)\n\tquery = luaq.asQuery(query)\n\tif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'where' (function expected, got %s)\", type(func))) end\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(q)\n\t\t\tlocal cEnumerator = q.__query:__getenumerator()\n\t\t\tlocal enumerator = {\n\t\t\t\t__index = 0,\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\treturn cEnumerator:current(q.__query)\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tlocal state = self:saveState(q)\n\t\t\t\t\twhile cEnumerator:moveLast(q.__query) do\n\t\t\t\t\t\tif func(self:current(q), self.__index) then\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tself:resetState(q, state)\n\t\t\t\t\treturn false\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tlocal state = self:saveState(q)\n\t\t\t\t\twhile cEnumerator:moveNext(q.__query) do\n\t\t\t\t\t\tif func(self:current(q), self.__index) then\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tself:resetState(q, state)\n\t\t\t\t\treturn false\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn { cEnumerator:saveState(q.__query), self.__index }\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tcEnumerator:resetState(q.__query, state[1])\n\t\t\t\t\tself.__index = state[2]\n\t\t\t\tend\n\t\t\t}\n\t\t\tif last then\n\t\t\t\treturn luaq.utilities.getLastEnumerator(enumerator, this)\n\t\t\telse return enumerator\n\t\t\tend\n\t\tend,\n\t\t__query = query\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.empty()\n\tlocal qResult = {\n\t\t__getenumerator = luaq.utilities.getEmptyEnumerator\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.count(query)\n\tquery = luaq.asQuery(query)\n\tlocal cEnumerator = query:__getenumerator()\n\tlocal c = 0\n\twhile cEnumerator:moveNext(query) do\n\t\tc = c + 1\n\tend\n\treturn c\nend\n\nfunction luaq.any(query, func)\n\tif func == nil then\n\t\tfunc = function() return true end\n\telseif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'any' (function expected, got %s)\", type(func)))\n\tend\n\t\n\tlocal q = luaq.asQuery(query):where(func)\n\tlocal cEnumerator = q:__getenumerator()\n\twhile cEnumerator:moveNext(q) do\n\t\treturn true\n\tend\n\treturn false\nend\n\nfunction luaq.all(query, func)\n\tlocal q = luaq.asQuery(query)\n\tlocal cEnumerator = q:__getenumerator()\n\twhile cEnumerator:moveNext(q) do\n\t\tif not func(cEnumerator:current(q)) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\n\nfunction luaq.groupBy(query, keySelectFunc, elementSelectFunc, keyEqualityFunc)\n\tquery = query:asQuery()\n\tif type(keySelectFunc) ~= \"function\" then error(string.format(\"bad argument #2 to 'groupBy' (function expected, got %s)\", type(keySelectFunc))) end\n\tif elementSelectFunc == nil then\n\t\telementSelectFunc = function(x) return x end\n\telseif type(elementSelectFunc) ~= \"function\" then error(string.format(\"bad argument #3 to 'groupBy' (function expected, got %s)\", elementSelectFunc(func)))\n\tend\n\tif keyEqualityFunc == nil then\n\t\tkeyEqualityFunc = function(x, y) return x == y end\n\telseif type(keyEqualityFunc) ~= \"function\" then error(string.format(\"bad argument #4 to 'groupBy' (function expected, got %s)\", keyEqualityFunc(func)))\n\tend\n\t\n\treturn query\n\t\t:select(keySelectFunc)\n\t\t:distinct(keyEqualityFunc)\n\t\t:select(\n\t\t\tfunction(k)\n\t\t\t\tlocal g = query:where(\n\t\t\t\t\tfunction(e, i) return keyEqualityFunc(keySelectFunc(e, i), k) end\n\t\t\t\t)\n\t\t\t\tg.key = k\n\t\t\t\treturn g\n\t\t\tend\n\t\t)\nend\n\nfunction luaq.orderBy(query, func, comp, desc)\n\tquery = luaq.asQuery(query)\n\tif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'orderBy' (function expected, got %s)\", type(func))) end\n\tif comp == nil then\n\t\tcomp = function(x, y) return x < y end\n\telseif type(comp) ~= \"function\" then error(string.format(\"bad argument #3 to 'orderBy' (function expected, got %s)\", type(comp)))\n\tend\n\tif desc == nil then desc = false\n\telseif type(desc) ~= \"boolean\" then error(string.format(\"bad argument #4 to 'orderBy' (boolean expected, got %s)\", type(func)))\n\tend\n\t\n\tlocal qResult = {\n\t\t__getenumerator = getOrderEnumerator,\n\t\t__getorderedqueryenumerator = function(this, last)\n\t\t\treturn getOrderedQueryEnumerator(this.__query:select(func), last, comp, desc)\n\t\tend,\n\t\t__query = query\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.thenBy(orderedQuery, func, comp, desc)\n\tquery = luaq.asQuery(query)\n\tif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'orderBy' (function expected, got %s)\", type(func))) end\n\tif comp == nil then\n\t\tcomp = function(x, y)\n\t\t\tif x < y then return -1\n\t\t\telseif x > y then return 1\n\t\t\telse return 0\n\t\t\tend\n\t\tend\n\telseif type(comp) ~= \"function\" then error(string.format(\"bad argument #3 to 'orderBy' (function expected, got %s)\", type(comp)))\n\tend\n\tif desc == nil then desc = false\n\telseif type(desc) ~= \"boolean\" then error(string.format(\"bad argument #4 to 'orderBy' (boolean expected, got %s)\", type(func)))\n\tend\n\t\n\tlocal qResult = {\n\t\t__getenumerator = getOrderEnumerator,\n\t\t__getorderedqueryenumerator = function(this, last)\n\t\t\treturn getOrderedQueryEnumeratorInternal(this.__query:__getorderedqueryenumerator(last), last, comp, desc)\n\t\tend,\n\t\t__query = query\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.utilities.getOrderEnumerator(q, last)\n\t\nend\n\nfunction luaq.utilities.getOrderedQueryEnumerator(q, last, comp, desc)\n\tlocal cOQQ = luaq.asQueryFrom({ query = q, enumerator = q.__getenumerator(last) })\n\tlocal cOQE = cOQQ.__getenumerator(last)\n\treturn getOrderedQueryEnumeratorInternal(cOQQ, cOQE, last, comp, desc)\nend\n\nfunction luaq.utilities.getOrderedQueryEnumeratorInternal(oqq, oqe, last, comp, desc)\n\treturn {\n\t\tcurrent = function(self, q)\n\t\t\tlocal pair = oqe:current(oqq)\n\t\t\tif pair == nil then return nil\n\t\t\telse\n\t\t\t\tlocal cK = pair.enumerator:current(pair.query)\n\t\t\t\tlocal subQuery = pair.query.where(function(item) return comp(cK, item) == 0 end)\n\t\t\t\treturn { query = subQuery, enumerator = subQuery.__getenumerator(last)}\n\t\t\tend\n\t\tend,\n\t\tmoveLast = function(self, q)\n\t\t\tlocal pair = oqe:current(oqq)\n\t\t\tif pair == nil then\n\t\t\t\twhile oqe:moveLast(oqq) do\n\t\t\t\t\tpair = oqe:current(oqq)\n\t\t\t\t\tlocal current \n\t\t\t\tend\n\t\t\tend\n\t\t\treturn false\n\t\tend,\n\t\tmoveNext = function(self, q)\n\t\t\tlocal pair = oqe:current(oqq)\n\t\t\tif pair == nil and oqe:moveNext(oqq) then\n\t\t\t\tpair = oqe:current(oqq)\n\n\t\t\telse return false\n\t\t\tend\n\t\tend,\n\t\tsaveState = function(self, q)\n\t\t\treturn oqq.select(function(info)\n\t\t\t\treturn info.enumerator:saveState(info.query).query()\n\t\t\tend)\n\t\tend,\n\t\tresetState = function(self, q, state)\n\t\t\toqq.foreach(function(info, index)\n\t\t\t\tinfo.enumerator:resetState(info.query, state[index])\n\t\t\tend)\n\t\tend\n\t}\nend\n\nfunction luaq.distinct(query, func)\n\tquery = luaq.asQuery(query)\n\tif func == nil then\n\t\tfunc = function(x, y) return x == y end\n\telseif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'distinct' (function expected, got %s)\", type(func)))\n\tend\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(this, last)\n\t\t\tlocal cEnumerator = this.__query:__getenumerator()\n\t\t\tlocal enumerator = {\n\t\t\t\t__index = 0,\n\t\t\t\t__buff = {},\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\treturn self.__buff[self.__index]\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tif self.__index < 2 then return false\n\t\t\t\t\telse\n\t\t\t\t\t\tself.__index = self.__index - 1\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tif self.__index < #self.__buff then\n\t\t\t\t\t\tself.__index = self.__index + 1\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse\n\t\t\t\t\t\twhile cEnumerator:moveNext(q.__query) do\n\t\t\t\t\t\t\tlocal current = cEnumerator:current(q.__query)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlocal f = true\n\t\t\t\t\t\t\tfor i, v in ipairs(self.__buff) do\n\t\t\t\t\t\t\t\tif func(v, current) then\n\t\t\t\t\t\t\t\t\tf = false\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif f then\n\t\t\t\t\t\t\t\ttable.insert(self.__buff, current)\n\t\t\t\t\t\t\t\tself.__index = self.__index + 1\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn { cEnumerator:saveState(q.__query), self.__index }\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tcEnumerator:resetState(q.__query, state[1])\n\t\t\t\t\tself.__index = state[2]\n\t\t\t\tend\n\t\t\t}\n\t\t\tif last then\n\t\t\t\treturn luaq.utilities.getLastEnumerator(enumerator, this)\n\t\t\telse return enumerator\n\t\t\tend\n\t\tend,\n\t\t__query = query\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.concat(query1, query2)\n\tif type(query1) ~= \"table\" then error(string.format(\"bad argument #1 to 'concat' (table expected, got %s)\", type(query1))) end\n\tif type(query2) ~= \"table\" then error(string.format(\"bad argument #2 to 'concat' (table expected, got %s)\", type(query2))) end\n\tquery1 = luaq.asQuery(query1)\n\tquery2 = luaq.asQuery(query2)\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(this, last)\n\t\t\tlocal cEnumerators = {\n\t\t\t\tthis.__queries[1]:__getenumerator(last),\n\t\t\t\tthis.__queries[2]:__getenumerator(last)\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t__ceIndex = (last and {2} or {1})[1],\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\treturn cEnumerators[self.__ceIndex]:current(q.__queries[self.__ceIndex])\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tif self.__ceIndex == 1 then\n\t\t\t\t\t\treturn cEnumerators[1]:moveLast(q.__queries[1])\n\t\t\t\t\telse\n\t\t\t\t\t\tif cEnumerators[2]:moveLast(q.__queries[2]) then\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\telseif cEnumerators[1]:moveLast(q.__queries[1]) then\n\t\t\t\t\t\t\tself.__ceIndex = 1\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\telse return false\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tif self.__ceIndex == 2 then\n\t\t\t\t\t\treturn cEnumerators[2]:moveNext(q.__queries[2])\n\t\t\t\t\telse\n\t\t\t\t\t\tif cEnumerators[1]:moveNext(q.__queries[1]) then\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\telseif cEnumerators[2]:moveNext(q.__queries[2]) then\n\t\t\t\t\t\t\tself.__ceIndex = 2\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\telse return false\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn { { cEnumerators[1]:saveState(q.__queries[1]), cEnumerators[2]:saveState(q.__queries[2]) }, self.__ceIndex }\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tcEnumerators[1]:resetState(q.__queries[1], state[1][1])\n\t\t\t\t\tcEnumerators[2]:resetState(q.__queries[2], state[1][2])\n\t\t\t\t\tself.__ceIndex = state[2]\n\t\t\t\tend\n\t\t\t}\n\t\tend,\n\t\t__queries = { query1, query2 }\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.reverse(query)\n\tquery = luaq.asQuery(query)\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(this, last)\n\t\t\tlocal cEnumerator = this.__query:__getenumerator(not last)\n\t\t\treturn {\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\treturn cEnumerator:current(q.__query)\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\treturn cEnumerator:moveNext(q.__query)\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\treturn cEnumerator:moveLast(q.__query)\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn cEnumerator:saveState(q.__query)\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tcEnumerator:resetState(q.__query, state)\n\t\t\t\tend\n\t\t\t}\n\t\tend,\n\t\t__query = query\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.aggregate(query, func, seed)\n\tlocal q = luaq.asQuery(query)\n\tif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'aggregate' (function expected, got %s)\", type(func))) end\n\t\n\tlocal index = 0\n\tlocal result = seed\n\tlocal cEnumerator = q:__getenumerator()\n\twhile cEnumerator:moveNext(q) do\n\t\tindex = index + 1\n\t\tresult = func(result, cEnumerator:current(q), index)\n\tend\n\tif index == 0 then return seed, true\n\telse return result\n\tend\nend\n\nfunction luaq.defaultIfEmpty(query, default)\n\tlocal q = luaq.asQuery(query)\n\n\tif q.any() then return q\n\telse return luaq.asQueryFrom(default)\n\tend\nend\n\nfunction luaq.first(query, default)\n\tlocal q = luaq.asQuery(query)\n\n\tlocal cEnumerator = q:__getenumerator()\n\twhile cEnumerator:moveNext(q) do\n\t\treturn cEnumerator:current(q)\n\tend\n\treturn default, true\nend\n\nfunction luaq.last(query, default)\n\tlocal q = luaq.asQuery(query)\n\n\tlocal cEnumerator = q:__getenumerator(last)\n\twhile cEnumerator:moveLast(q) do\n\t\treturn cEnumerator:current(q)\n\tend\n\treturn default, true\nend\n\nfunction luaq.max(query, func, base, useBase)\n\tlocal q = luaq.asQuery(query)\n\tif func == nil then\n\t\tfunc = function(x, y) return x == y end\n\telseif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'max' (function expected, got %s)\", type(func)))\n\tend\n\tif type(useBase) ~= \"boolean\" then error(string.format(\"bad argument #3 to 'max' (boolean expected, got %s)\", type(useBase))) end\n\n\tlocal f = false\n\tlocal item\n\tlocal cEnumerator = q:__getenumerator()\n\twhile cEnumerator:moveNext(q) do\n\t\tlocal current = cEnumerator:current(q)\n\t\tif not f then\n\t\t\tf = true\n\t\t\tif useBase == true then\n\t\t\t\tif func(base, current) <= 0 then item = base\n\t\t\t\telse item = current\n\t\t\t\tend\n\t\t\telseif useBase == false then\n\t\t\t\titem = current\n\t\t\tend\n\t\tend\n\t\tif func(item, current) > 0 then item = current end\n\tend\n\tif not f then\n\t\tif useBase == false then return nil, true\n\t\telseif useBase == nil then item = base\n\t\tend\n\tend\n\treturn item\nend\n\nfunction luaq.min(query, func, base, useBase)\n\tlocal q = luaq.asQuery(query)\n\tif func == nil then\n\t\tfunc = function(x, y) return x == y end\n\telseif type(func) ~= \"function\" then error(string.format(\"bad argument #2 to 'min' (function expected, got %s)\", type(func)))\n\tend\n\tif type(useBase) ~= \"boolean\" then error(string.format(\"bad argument #3 to 'min' (boolean expected, got %s)\", type(useBase))) end\n\n\tlocal f = false\n\tlocal item\n\tlocal cEnumerator = q:__getenumerator()\n\twhile cEnumerator:moveNext(q) do\n\t\tlocal current = cEnumerator:current(q)\n\t\tif not f then\n\t\t\tf = true\n\t\t\tif useBase == true then\n\t\t\t\tif func(base, current) >= 0 then item = base\n\t\t\t\telse item = current\n\t\t\t\tend\n\t\t\telseif useBase == false then\n\t\t\t\titem = current\n\t\t\tend\n\t\tend\n\t\tif func(item, current) < 0 then item = current end\n\tend\n\tif not f then\n\t\tif useBase == false then return nil, true\n\t\telseif useBase == nil then item = base\n\t\tend\n\tend\n\treturn item\nend\n\nfunction luaq.skip(query, count, func)\n\tquery = luaq.asQuery(query)\n\tif func ~= nil and type(func) ~= \"function\" then error(string.format(\"bad argument #3 to 'skip' (function expected, got %s)\", type(func))) end\n\tif count == nil and func == nil then error(\"bad argument #2 to 'skip' (number expected, got nil)\")\n\telseif count ~= nil then\n\t\tif type(count) ~= \"number\" then error(string.format(\"bad argument #2 to 'skip' (number expected, got %s)\", type(count)))\n\t\telseif math.fmod(count, 1) ~= 0 then error(\"bad argument #2 to 'skip' (number has no integer representation)\")\n\t\telseif count == 0 then return luaq.empty\n\t\telseif count < 0 then return query:skipLast(-count, func)\n\t\tend\n\tend\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(this)\n\t\t\tlocal cEnumerator = this.__query:__getenumerator(this.__query)\n\t\t\tlocal i = 0\n\t\t\tlocal f = false\n\t\t\twhile (count == nil or i < count) and cEnumerator:moveNext(this.__query) do\n\t\t\t\tf = true\n\t\t\t\tif func == nil or func(cEnumerator.current(this.__query), i + 1) then\n\t\t\t\t\ti = i + 1\n\t\t\t\telse break\n\t\t\t\tend\n\t\t\tend\n\t\t\tif not f then return luaq.utilities.getEmptyEnumerator() end\n\t\t\t\n\t\t\treturn {\n\t\t\t\t__index = (f and {1} or {0})[1],\n\t\t\t\t__f = f,\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\tif self.__f or self.__index <= 0 then return nil\n\t\t\t\t\telse return cEnumerator:current(q.__query)\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tif self.__f or self.__index <= 1 then return false\n\t\t\t\t\telseif cEnumerator:moveLast(q.__query) then\n\t\t\t\t\t\tself.__index = self.__index - 1\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse return false\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tif self.__f then\n\t\t\t\t\t\tself.__f = false\n\t\t\t\t\t\treturn true\n\t\t\t\t\telseif cEnumerator:moveNext(q.__query) then\n\t\t\t\t\t\tself.__index = self.__index + 1\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse return false\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn { cEnumerator:saveState(q.__query), self.__index, self.__f }\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tcEnumerator:resetState(q.__query, state[1])\n\t\t\t\t\tself.__index = state[2]\n\t\t\t\t\tself.__f = state[3]\n\t\t\t\tend\n\t\t\t}\n\t\tend,\n\t\t__query = query\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.skipLast(query, count, func)\n\tquery = luaq.asQuery(query)\n\tif func ~= nil and type(func) ~= \"function\" then error(string.format(\"bad argument #3 to 'skipLast' (function expected, got %s)\", type(func))) end\n\tif count == nil and func == nil then error(\"bad argument #2 to 'skipLast' (number expected, got nil)\")\n\telseif count ~= nil then\n\t\tif type(count) ~= \"number\" then error(string.format(\"bad argument #2 to 'skipLast' (number expected, got %s)\", type(count)))\n\t\telseif math.fmod(count, 1) ~= 0 then error(\"bad argument #2 to 'skipLast' (number has no integer representation)\")\n\t\telseif count == 0 then return luaq.empty\n\t\telseif count < 0 then return query:skip(-count, func)\n\t\tend\n\tend\n\t\n\treturn query:reverse():skip(count, func):reverse()\nend\n\nfunction luaq.take(query, count, func)\n\tquery = luaq.asQuery(query)\n\tif func ~= nil and type(func) ~= \"function\" then error(string.format(\"bad argument #3 to 'take' (function expected, got %s)\", type(func))) end\n\tif count == nil and func == nil then error(\"bad argument #2 to 'take' (number expected, got nil)\")\n\telseif count ~= nil then\n\t\tif type(count) ~= \"number\" then error(string.format(\"bad argument #2 to 'take' (number expected, got %s)\", type(count)))\n\t\telseif math.fmod(count, 1) ~= 0 then error(\"bad argument #2 to 'take' (number has no integer representation)\")\n\t\telseif count == 0 then return luaq.empty\n\t\telseif count < 0 then return query:takeLast(-count, func)\n\t\tend\n\tend\n\t\n\tlocal qResult = {\n\t\t__getenumerator = function(this)\n\t\t\tlocal cEnumerator = this.__query:__getenumerator(this.__query)\n\t\t\treturn {\n\t\t\t\t__index = 0,\n\t\t\t\tcurrent = function(self, q)\n\t\t\t\t\tif self.__index == 0 then return nil\n\t\t\t\t\telse return cEnumerator:current(q.__query)\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveLast = function(self, q)\n\t\t\t\t\tif cEnumerator:moveLast(q.__query) then\n\t\t\t\t\t\tself.__index = self.__index - 1\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse return false\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tmoveNext = function(self, q)\n\t\t\t\t\tif self.__index == count then return false\n\t\t\t\t\telseif cEnumerator:moveNext(q.__query) then\n\t\t\t\t\t\tself.__index = self.__index + 1\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse return false\n\t\t\t\t\tend\n\t\t\t\tend,\n\t\t\t\tsaveState = function(self, q)\n\t\t\t\t\treturn { cEnumerator:saveState(q.__query), self.__index }\n\t\t\t\tend,\n\t\t\t\tresetState = function(self, q, state)\n\t\t\t\t\tcEnumerator:resetState(q.__query, state[1])\n\t\t\t\t\tself.__index = state[2]\n\t\t\t\tend\n\t\t\t}\n\t\tend,\n\t\t__query = query\n\t}\n\tluaq.utilities.attachluaq(qResult)\n\treturn qResult\nend\n\nfunction luaq.takeLast(query, count, func)\n\tquery = luaq.asQuery(query)\n\tif func ~= nil and type(func) ~= \"function\" then error(string.format(\"bad argument #3 to 'takeLast' (function expected, got %s)\", type(func))) end\n\tif count == nil and func == nil then error(\"bad argument #2 to 'takeLast' (number expected, got nil)\")\n\telseif count ~= nil then\n\t\tif type(count) ~= \"number\" then error(string.format(\"bad argument #2 to 'takeLast' (number expected, got %s)\", type(count)))\n\t\telseif math.fmod(count, 1) ~= 0 then error(\"bad argument #2 to 'takeLast' (number has no integer representation)\")\n\t\telseif count == 0 then return luaq.empty\n\t\telseif count < 0 then return query:take(-count, func)\n\t\tend\n\tend\n\t\n\treturn query:reverse():take(count, func):reverse()\nend\n\nfunction luaq.query(query)\n\tlocal q = luaq.asQuery(query)\n\tlocal t = {}\n\tlocal cEnumerator = q:__getenumerator()\n\twhile cEnumerator:moveNext(q) do\n\t\ttable.insert(t, cEnumerator:current(q))\n\tend\n\treturn t\nend\n\nfunction luaq.foreach(query, func)\n\tlocal q = luaq.asQuery(query)\n\tif func ~= nil and type(func) ~= \"function\" then error(string.format(\"bad argument #3 to 'foreach' (function expected, got %s)\", type(func))) end\n\n\tlocal cEnumerator = q:__getenumerator()\n\tlocal index = 1\n\twhile cEnumerator:moveNext(q) do\n\t\tfunc(cEnumerator:current(q), index)\n\t\tindex = index + 1\n\tend\nend\n\nfunction luaq.toDictionary(query, keySelectFunc, valueSelectFunc, keyComparer)\n\tlocal q = luaq.asQuery(query)\n\tif type(keySelectFunc) ~= \"function\" then error(string.format(\"bad argument #2 to 'toDictionary' (function expected, got %s)\", type(keySelectFunc))) end\n\tif type(valueSelectFunc) ~= \"function\" then error(string.format(\"bad argument #3 to 'toDictionary' (function expected, got %s)\", type(valueSelectFunc))) end\n\tif keyComparer ~= nil and type(keyComparer) ~= \"function\" then error(string.format(\"bad argument #4 to 'toDictionary' (function expected, got %s)\", type(keyComparer))) end\n\n\tlocal dic = require(\"Module:Dictionary\").create(keyComparer)\n\tlocal cEnumerator = q:__getenumerator()\n\tlocal index = 1\n\twhile cEnumerator:moveNext(q) do\n\t\tlocal item = cEnumerator:current(q)\n\t\tdic:add(keySelectFunc(item, index), valueSelectFunc(item, index))\n\t\tindex = index + 1\n\tend\n\treturn dic\nend\n\nfunction luaq.utilities.attachluaq(q)\n\tq.asQuery = luaq.asQuery\n\tq.select = luaq.select\n\tq.selectMany = luaq.selectMany\n\tq.where = luaq.where\n\tq.count = luaq.count\n\tq.any = luaq.any\n\tq.all = luaq.all\n\tq.groupBy = luaq.groupBy\n\tq.distinct = luaq.distinct\n\tq.reverse = luaq.reverse\n\tq.concat = luaq.concat\n\tq.aggregate = luaq.aggregate\n\tq.defaultIfEmpty = luaq.defaultIfEmpty\n\tq.first = luaq.first\n\tq.last = luaq.last\n\tq.max = luaq.max\n\tq.min = luaq.min\n\tq.skip = luaq.skip\n\tq.skipLast = luaq.skipLast\n\tq.take = luaq.take\n\tq.takeLast = luaq.takeLast\n\tq.__add = luaq.concat\n\tq.query = luaq.query\n\tq.foreach = luaq.foreach\n\tq.toDictionary = luaq.toDictionary\nend\n\nfunction luaq.utilities.getEmptyEnumerator()\n\treturn {\n\t\tcurrent = function() return nil end,\n\t\tmoveLast = function() return false end,\n\t\tmoveNext = function() return false end,\n\t\tsaveState = function() return nil end,\n\t\tresetState = function() end\n\t}\nend\n\nreturn luaq"}}}