{"parse":{"title":"\u6a21\u5757:FormatString","pageid":309062,"wikitext":{"*":"local queue = require(\"Module:queue\")\n\nlocal FormatString = {}\n\nfunction FormatString.buildTrie(format)\n    root = {}\n    root.next = {}\n    for i, item in ipairs(format) do\n        local cur = root\n        for i = 1, mw.ustring.len(item.format), 1 do \n            local c = mw.ustring.sub(item.format, i, i)\n            if cur.next[c] == nil then\n                cur.next[c] = {} -- new node\n                cur.next[c].next = {} \n                cur.next[c].father = cur\n                cur.next[c].char = c\n            end\n            cur = cur.next[c]\n        end\n        cur.callback = item.callback\n        cur.len = mw.ustring.len(item.format)\n    end\n    root.fail = {}\n    local q = queue\n    q:push(root)\n    while not(q:empty()) do\n        local cur = q:front()\n        q:pop()\n        for i, t in pairs(cur.next or {}) do\n            q:push(t)\n        end\n        if (cur ~= root) and (cur.father ~= root) then\n            cur2 = cur.father\n            while cur2.fail.next[cur.char] ~= nil and cur2 ~= root do\n                cur2 = cur2.fail\n            end\n            cur.fail = cur2.fail.next[cur.char] or root\n        else\n            cur.fail = root\n        end\n\n    end\n    return root\nend\n\nfunction FormatString.replaceStr(str, trie, extras)\n    local cur_state = trie\n    local i = 1\n    local matched_times = 0\n    while i <= mw.ustring.len(str) do\n        local c = mw.ustring.sub(str, i, i)\n        while cur_state.next[c] == nil and cur_state ~= trie do\n            cur_state = cur_state.fail or trie\n        end\n        cur_state = cur_state.next[c] or trie\n        if cur_state.callback ~= nil then\n            matched_times = matched_times + 1\n            local newStr = cur_state.callback(matched_times, extras)\n            -- mw.log(mw.ustring.sub(str, i - cur_state.len + 1, i)..' -> '..newStr)\n            str = mw.ustring.sub(str, 1, i - cur_state.len)..newStr..mw.ustring.sub(str, i + 1, mw.ustring.len(str))\n            i = i + mw.ustring.len(newStr) - cur_state.len\n            cur_state = trie\n        end\n        i = i + 1\n    end\n    return str\nend\n\nreturn FormatString"}}}