{"parse":{"title":"\u6a21\u5757:Hatnote","pageid":264898,"wikitext":{"*":"--------------------------------------------------------------------------------\n--                              Module:Hatnote                                --\n--                                                                            --\n-- This module produces hatnote links and links to related articles. It       --\n-- implements the {{hatnote}} and {{format link}} meta-templates and includes --\n-- helper functions for other Lua hatnote modules.                            --\n--------------------------------------------------------------------------------\n\nlocal libraryUtil = require('libraryUtil')\nlocal checkType = libraryUtil.checkType\nlocal mArguments -- lazily initialise [[Module:Arguments]]\nlocal yesno -- lazily initialise [[Module:Yesno]]\n\nlocal p = {}\n\n--------------------------------------------------------------------------------\n-- Helper functions\n--------------------------------------------------------------------------------\n\nlocal function getArgs(frame)\n\t-- Fetches the arguments from the parent frame. Whitespace is trimmed and\n\t-- blanks are removed.\n\tmArguments = require('Module:Arguments')\n\treturn mArguments.getArgs(frame, {parentOnly = true})\nend\n\nlocal function removeInitialColon(s)\n\t-- Removes the initial colon from a string, if present.\n\treturn s:match('^:?(.*)')\nend\n\nfunction p.findNamespaceId(link, removeColon)\n\t-- Finds the namespace id (namespace number) of a link or a pagename. This\n\t-- function will not work if the link is enclosed in double brackets. Colons\n\t-- are trimmed from the start of the link by default. To skip colon\n\t-- trimming, set the removeColon parameter to false.\n\tcheckType('findNamespaceId', 1, link, 'string')\n\tcheckType('findNamespaceId', 2, removeColon, 'boolean', true)\n\tif removeColon ~= false then\n\t\tlink = removeInitialColon(link)\n\tend\n\tlocal namespace = link:match('^(.-):')\n\tif namespace then\n\t\tlocal nsTable = mw.site.namespaces[namespace]\n\t\tif nsTable then\n\t\t\treturn nsTable.id\n\t\tend\n\tend\n\treturn 0\nend\n\nfunction p.formatPages(...)\n\t-- Formats a list of pages using formatLink and returns it as an array. Nil\n\t-- values are not allowed.\n\tlocal pages = {...}\n\tlocal ret = {}\n\tfor i, page in ipairs(pages) do\n\t\tret[i] = p._formatLink(page)\n\tend\n\treturn ret\nend\n\nfunction p.formatPageTables(...)\n\t-- Takes a list of page/display tables and returns it as a list of\n\t-- formatted links. Nil values are not allowed.\n\tlocal pages = {...}\n\tlocal links = {}\n\tfor i, t in ipairs(pages) do\n\t\tcheckType('formatPageTables', i, t, 'table')\n\t\tlocal link = t[1]\n\t\tlocal display = t[2]\n\t\tlinks[i] = p._formatLink(link, display)\n\tend\n\treturn links\nend\n\nfunction p.makeWikitextError(msg, helpLink, addTrackingCategory, title)\n\t-- Formats an error message to be returned to wikitext. If\n\t-- addTrackingCategory is not false after being returned from\n\t-- [[Module:Yesno]], and if we are not on a talk page, a tracking category\n\t-- is added.\n\tcheckType('makeWikitextError', 1, msg, 'string')\n\tcheckType('makeWikitextError', 2, helpLink, 'string', true)\n\tyesno = require('Module:Yesno')\n\ttitle = title or mw.title.getCurrentTitle()\n\t-- Make the help link text.\n\tlocal helpText\n\tif helpLink then\n\t\thelpText = ' ([[' .. helpLink .. '|help]])'\n\telse\n\t\thelpText = ''\n\tend\n\t-- Make the category text.\n\tlocal category\n\tif not title.isTalkPage and yesno(addTrackingCategory) ~= false then\n\t\tcategory = 'Hatnote templates with errors'\n\t\tcategory = string.format(\n\t\t\t'[[%s:%s]]',\n\t\t\tmw.site.namespaces[14].name,\n\t\t\tcategory\n\t\t)\n\telse\n\t\tcategory = ''\n\tend\n\treturn string.format(\n\t\t'<strong class=\"error\">\u9519\u8bef\uff1a%s%s.</strong>%s',\n\t\tmsg,\n\t\thelpText,\n\t\tcategory\n\t)\nend\n\nfunction p.disambiguate(page, disambiguator)\n\t-- Formats a page title with a disambiguation parenthetical,\n\t-- i.e. \"Example\" \u2192 \"Example (disambiguation)\".\n\tcheckType('disambiguate', 1, page, 'string')\n\tcheckType('disambiguate', 2, disambiguator, 'string', true)\n\tdisambiguator = disambiguator or '\u6d88\u6b67\u4e49'\n\treturn string.format('%s (%s)', page, disambiguator)\nend\n\n--------------------------------------------------------------------------------\n-- Format link\n--\n-- Makes a wikilink from the given link and display values. Links are escaped\n-- with colons if necessary, and links to sections are detected and displayed\n-- with \" \u00a7 \" as a separator rather than the standard MediaWiki \"#\". Used in\n-- the {{format hatnote link}} template.\n--------------------------------------------------------------------------------\n\nfunction p.formatLink(frame)\n\tlocal args = getArgs(frame)\n\tlocal link = args[1]\n\tlocal display = args[2]\n\tif not link then\n\t\treturn p.makeWikitextError(\n\t\t\t'no link specified',\n\t\t\t'Template:Format hatnote link#Errors',\n\t\t\targs.category\n\t\t)\n\tend\n\treturn p._formatLink(link, display)\nend\n\nfunction p._formatLink(link, display)\n\tcheckType('_formatLink', 1, link, 'string')\n\tcheckType('_formatLink', 2, display, 'string', true)\n\n\t-- Don't change anything for interlanguage links.\n\tif link:match('<span class=\"ilh-') then\n\t\treturn link\n\tend\n\n\t-- Remove the initial colon for links where it was specified manually.\n\tlink = removeInitialColon(link)\n\n\t-- Find whether a faux display value has been added with the {{!}} magic\n\t-- word.\n\tif not display then\n\t\tlocal prePipe, postPipe = link:match('^(.-)|(.*)$')\n\t\tlink = prePipe or link\n\t\tdisplay = postPipe\n\tend\n\n\t-- Find the display value.\n\tif not display then\n\t\tlocal page, section = link:match('^(.-)#(.*)$')\n\t\tif page then\n\t\t\tdisplay = page .. ' \u00a7&nbsp;' .. section\n\t\tend\n\tend\n\n\t-- Assemble the link.\n\tif display then\n\t\treturn string.format(\n\t\t\t'[[:%s|%s]]',\n\t\t\tstring.gsub(link, '|(.*)$', ''), --display overwrites manual piping\n\t\t\tdisplay\n\t\t)\n\telse\n\t\treturn string.format('[[:%s]]', link)\n\tend\nend\n\n--------------------------------------------------------------------------------\n-- Hatnote\n--\n-- Produces standard hatnote text. Implements the {{hatnote}} template.\n--------------------------------------------------------------------------------\n\nfunction p.hatnote(frame)\n\tlocal args = getArgs(frame)\n\tlocal s = args[1]\n\tlocal options = {}\n\tif not s then\n\t\treturn p.makeWikitextError(\n\t\t\t'no text specified',\n\t\t\t'Template:Hatnote#Errors',\n\t\t\targs.category\n\t\t)\n\tend\n\toptions.extraclasses = args.extraclasses\n\toptions.selfref = args.selfref\n\treturn p._hatnote(s, options)\nend\n\nfunction p._hatnote(s, options)\n\tcheckType('_hatnote', 1, s, 'string')\n\tcheckType('_hatnote', 2, options, 'table', true)\n\toptions = options or {}\n\tlocal classes = {'hatnote'}\n\tlocal extraclasses = options.extraclasses\n\tlocal selfref = options.selfref\n\tif type(extraclasses) == 'string' then\n\t\tclasses[#classes + 1] = extraclasses\n\tend\n\tif selfref then\n\t\tclasses[#classes + 1] = 'selfref'\n\tend\n\treturn string.format(\n\t\t'<div role=\"note\" class=\"%s\">%s</div>',\n\t\ttable.concat(classes, ' '),\n\t\ts\n\t)\nend\n\nreturn p"}}}