{"parse":{"title":"Widget:SubpageStringCounter","pageid":256935,"wikitext":{"*":"<noinclude>Only for {{tl|SubpageStringCounter}}</noinclude><includeonly><!--{if !isset($wgSubpageStringCounter) || !$wgSubpageStringCounter}--><!--{assign var=\"wgSubpageStringCounter\" value=true scope=\"global\"}--><script>\nwindow.RLQ = window.RLQ || [];\nwindow.RLQ.push(function() {\n    mw.loader.using('mediawiki.api', function() {\n        var api = new mw.Api({\n            timeout: 60000\n        });\n\n        function parseDate(t) {\n            var _date = new Date();\n            _date.setTime(t);\n            ['getDate', 'getFullYear', 'getHours', 'getMinutes', 'getMonth'].forEach(function(key) {\n                _date[key] = function() {\n                    var result = Date.prototype[key].apply(_date, arguments);\n                    if (key.includes('Month')) result++;\n                    if (typeof result === 'number' && (result + '').length === 1) return '0' + result;\n                    else return result + '';\n                };\n            });\n            return _date.getFullYear() + '-' + _date.getMonth() + '-' + _date.getDate() + ' ' + _date.getHours() + ':' + _date.getMinutes();\n        };\n        var root = $('.subpageStringCounter');\n        var basename = mw.config.get('wgPageName'),\n            count = root.length,\n            running = false,\n            registry = {};\n        root.each(function() {\n            var self = $(this),\n                _d = self.find('.subpageStringCounterOption');\n            api.post({\n                action: 'parse',\n                text: '-{|<nowiki>{</nowiki>\"data\":{{' + _d[0].dataset.templateTitle + '}},\"regexptext\":\"' + _d[0].dataset.regexp.replace(/(\\\\)/g, '$1$1') + '\"<nowiki>}</nowiki>}-',\n                title: mw.config.get('wgPageName')\n            }).then(function(result) {\n                var _c = $('<div/>');\n                _c.html(result.parse.text['*'].replace(/&lt;/g, '<').replace(/&gt;/g, '>'));\n                var text = _c.find('p').text(),\n                    dataset = _d[0].dataset;\n                var option = {\n                    selector: dataset.selector,\n                    index: dataset.index.replace(/[^a-zA-Z0-9_]/g, '') || 'default',\n                    unit: dataset.unit,\n                    showdate: dataset.showdate === 'true' ? true : false,\n                    test: dataset.test === 'true' ? true : false\n                };\n                try {\n                    document.body.querySelector(option.selector);\n                } catch (_) {\n                    return self.find('.subpageStringCounterText').text('(widgetSubpageStringCounter selectgor error)');\n                }\n                try {\n                    option.data = JSON.parse(text).data;\n                    option.regexptext = JSON.parse(text).regexptext;\n                } catch (_) {\n                    option.data = null;\n                    option.regexptext = null;\n                }\n                try {\n                    option.regexp = RegExp(JSON.parse(text).regexptext);\n                } catch (_) {\n                    return self.find('.subpageStringCounterText').text('(widgetSubpageStringCounter regexp error)');\n                }\n                var r = null,\n                    c = null,\n                    u = false;\n                switch (true) {\n                    case option.data.regexp !== option.regexptext:\n                        c = 'regexp_updated';\n                        r = c + ' (regexp: \"' + option.data.regexp + '\" => \"' + option.regexptext + '\")';\n                        break;\n                    case new Date().getTime() - option.data.date > 24 * 60 * 60 * 1000:\n                        c = 'data_expired';\n                        r = c + ' (date: \"' + option.data.date + '\" => \"' + new Date().getTime() + '\")';\n                        break;\n                    case !option.data:\n                        c = 'no_data_or_data_invalid';\n                        r = c;\n                }\n                try {\n                    var old_data = JSON.parse(_d.text()).counter;\n                    var new_data = option.data.counter;\n                    if (old_data !== new_data) {\n                        if (c) c += \" with counter changed from \" + old_data + \" to \" + new_data;\n                        else c = \"counter changed from \" + old_data + \" to \" + new_data;\n                        if (r) r += \" (counter: \" + old_data + \" => \" + new_data + \")\";\n                        else r = \"counter_update (counter: \" + old_data + \" => \" + new_data + \")\";\n                        u = true;\n                    }\n                } catch (_) {\n                    return self.find('.subpageStringCounterText').text('(widgetSubpageStringCounter data error)');\n                }\n                if (c) {\n                    console.debug('widgetSubpageStringCounter', c);\n                    if (!registry[option.index]) registry[option.index] = { node: [], option: option, counter: 0, c: c, r: r };\n                    registry[option.index].node.push(self);\n                }\n                self.find('.subpageStringCounterText').text(option.data.counter + (option.unit || '') + (option.showdate ? '\uff08' + parseDate(option.data.date) + '\uff09' : '') + (u ? \"\uff08\u6570\u636e\u5df2\u66f4\u65b0\uff09\" : \"\"));\n                count--;\n            });\n        });\n        var code = setInterval(function() {\n            if (count === 0 && Object.keys(registry)[0] && !running) {\n                running = true;\n                clearInterval(code);\n                setTimeout(function() {\n                    $.get('api.php?action=query&list=prefixsearch&pssearch=' + basename + '/&format=json&pslimit=500', function(d) {\n                        var titles = [];\n                        for (var i in registry) d.query.prefixsearch.forEach(function(n) {\n                            var title = n.title;\n                            if (title !== basename && registry[i].option.regexp.test(title.replace(basename + '/', ''))) titles.push(title);\n                        });\n                        Promise.all(titles.map(function(title) {\n                            return new Promise(function(res, rej) {\n                                $.ajax({\n                                    url: title + '?action=render',\n                                    type: 'GET',\n                                    success: function(r) {\n                                        var _container = $('<div/>');\n                                        _container.html(r);\n                                        for (var i in registry)(function(reg) {\n                                            reg.counter += _container.find(reg.option.selector).length;\n                                        })(registry[i]);\n                                        res();\n                                    },\n                                    error: rej,\n                                    timeout: 60000\n                                });\n                            });\n                        })).then(function() {\n                            for (var i in registry)(function(reg) {\n                                if (mw.config.get('wgUserGroups').indexOf('autoconfirmed') !== -1 && !reg.option.test) api.postWithToken('csrf', {\n                                    action: 'edit',\n                                    format: 'json',\n                                    text: JSON.stringify({ counter: reg.counter, date: new Date().getTime(), regexp: reg.option.regexptext, update_reason: reg.r, page: '[[' + basename + ']]' }),\n                                    summary: 'Auto update reason: \"' + reg.c + '\" for page [[' + basename + ']]',\n                                    minor: true,\n                                    watchlist: 'nochange',\n                                    title: 'Template:SubpageStringCounter/' + basename + '/' + reg.option.index,\n                                    tags: 'widgetSubpageStringCounter'\n                                });\n                                reg.node.forEach(function(that) { that.find('.subpageStringCounterText').text(reg.counter + (reg.option.unit || '') + (reg.option.showdate ? '\uff08' + parseDate(new Date().getTime()) + '\uff09' : '')); });\n                            })(registry[i]);\n                            if (registry.length) api.post({\n                                action: 'purge',\n                                format: 'json',\n                                forcelinkupdate: true,\n                                titles: basename,\n                                redirects: true\n                            });\n                        });\n                    });\n                }, 73);\n            }\n        }, 1000);\n    });\n});</script><!--{/if}--></includeonly>"}}}