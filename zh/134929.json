{"parse":{"title":"\u6a21\u5757:Citation","pageid":264524,"wikitext":{"*":"---------------------------------------------------------------------\n-- Module:Citation - Lua module for Citation auxiliary templates\n---------------------------------------------------------------------\n-- For the {{citation}} formatting functions, see: Module:Citation/CS1\n--                               (see NOTES at bottom)\n--require \"mw.text\"\n\nlocal z = {\n    wikitext = require(\"Module:Wikitext\"),\n    extensiontags = {\n        nowiki = true,\n        ref = true,\n        gallery = true,\n        pre = true,\n        source = true,\n        categorytree = true,\n        charinsert = true,\n        hiero = true,\n        imagemap = true,\n        inputbox = true,\n        math = true,\n        poem = true,\n        ref = true,\n        references = true,\n        syntaxhighlight = true,\n        timeline = true,\n    }\n}\n\nfunction trim( str )\n    if str == nil then\n        return nil;\n    end\n    return str:match( \"^%s*(.-)%s*$\" );\nend\n\nfunction hideinprint(content)\n    return content\nend\n\nfunction onlyinprint(content)\n    return \"\"\nend\n\n-- This returns a string with HTML character entities for wikitext markup characters.\nfunction wikiescape(text)\n    text = text:gsub( '[&\\'%[%]{|}]', {    \n            ['&'] = '&#38;',    \n            [\"'\"] = '&#39;',    \n            ['['] = '&#91;',    \n            [']'] = '&#93;',\t\n            ['{'] = '&#123;',\t\n            ['|'] = '&#124;',\t\n            ['}'] = '&#125;' } );\n    return text;\nend\n\nfunction createTag(t, frame)\n    local name = t.name or \"!-- --\"\n    local content = t.contents or \"\"\n    local attrs = {}\n    if ( z.extensiontags[name] ) then\n        -- We have to preprocess these, so that they are properly turned into so-called \"strip markers\" in the generated wikitext.\n        if ( not frame ) then error (\"Please supply an extra frame argument to the createTag() function.\") end\n        local params = {}\n        for n,v in pairs(t.params) do\n            table.insert(params, \"|\" .. n .. \"=\" .. v)\n        end\n        return frame:preprocess(\"{{#tag:\" .. name .. \"|\" .. content .. table.concat(params) .. \"}}\")\n    else   \n        for n,v in pairs(t.params) do\n            if (v) then\n                table.insert(attrs, n .. \"=\\\"\" .. wikiescape(v) .. \"\\\"\")\n            else\n                table.insert(attrs, n)\n            end\n        end\n        if (\"\" == content) then\n            return \"<\" .. name .. \" \" .. table.concat(attrs, \" \") .. \"/>\"\n        else\n            return \"<\" .. name .. \" \" .. table.concat(attrs, \" \") .. \">\" .. content .. \"</\" .. name .. \">\"\n        end\n    end\nend\n\n--[[\nThis is a clone of mw.text.nowiki.  When the mw.text library is installed,\nthis can be replaced by a call to that library. ]]\nfunction nowiki( s )\n    -- string.gsub is safe here, because we're only caring about ASCII chars\n    s = string.gsub( s, '[\"&\\'<=>%[%]{|}]', {\n        ['\"'] = '&#34;',\n        ['&'] = '&#38;',\n        [\"'\"] = '&#39;',\n        ['<'] = '&#60;',\n        ['='] = '&#61;',\n        ['>'] = '&#62;',\n        ['['] = '&#91;',\n        [']'] = '&#93;',\n        ['{'] = '&#123;',\n        ['|'] = '&#124;',\n        ['}'] = '&#125;',\n    } )\n    s = string.sub( string.gsub( '\\n' .. s, '\\n[#*:;]', {\n        [\"\\n#\"] = \"\\n&#35;\",\n        [\"\\n*\"] = \"\\n&#42;\",\n        [\"\\n:\"] = \"\\n&#58;\",\n        [\"\\n;\"] = \"\\n&#59;\",\n    } ), 2 )\n    s = string.gsub( s, '://', '&#58;//' )\n    s = string.gsub( s, 'ISBN ', 'ISBN&#32;' )\n    s = string.gsub( s, 'RFC ', 'RFC&#32;' )\n\n    return s\nend\n\nfunction externallinkid(args)\n    local sep = args.separator or \"&nbsp;\"\n    args.suffix = args.suffix or \"\"\n    local url_string = args.id\n    if args.encode == true or args.encode == nil then\n        url_string = mw.uri.encode( url_string );\n    end\n    \n    local t0 = onlyinprint(args.label .. sep .. args.id)\n    local t1 = hideinprint(\"[[\" .. args.link .. \"|\" .. args.label .. \"]]\" .. sep .. \"[\" .. args.prefix .. url_string .. args.suffix .. \" \" .. nowiki(args.id) .. \"]\")\n    \n    return t0 .. t1\nend\n\nfunction doi(id, inactive, nocat)\n    local cat = \"\"\n    local text;\n    if ( inactive ~= nil ) then \n        text = \"[[Digital object identifier|doi]]:\" .. id;\n        cat = cat .. \"[[Category:Pages with DOIs inactive since \" .. selectyear(inactive) .. \"]]\"\n        inactive = \" (inactive \" .. inactive .. \")\" \n    else \n        text = externallinkid({link=\"Digital object identifier\",label=\"doi\",prefix=\"http://dx.doi.org/\",id=id,separator=\":\"})\n        inactive = \"\" \n    end\n    if ( string.sub(id,1,3) ~= \"10.\" ) then\n        cat = cat .. \"[[Category:Pages with DOI errors]]\" .. '<span class=\"error\"> Bad DOI (expected \"10.\" prefix) in code number</span>'\n    end\n    if ( nocat and nocat ~= \"\" ) then cat = \"\" end\n    return text .. inactive .. cat    \nend\n\nfunction selectyear( str )\n    local lang = mw.getContentLanguage();\n    local good, result;\n    good, result = pcall( lang.formatDate, lang, 'Y', str )\n    if good then \n        return result;\n    else\n        return '';\n    end\nend\n\nfunction anchorid(label, args)\n    local P1 = trim(args[1]) or \"\"\n    local P2 = trim(args[2]) or \"\"\n    local P3 = trim(args[3]) or \"\"\n    local P4 = trim(args[4]) or \"\"\n    local P5 = trim(args[5]) or \"\"\n    local anchor = P1 .. P2 .. P3 .. P4 .. P5;\n    if anchor ~= '' then  -- See bug description in Citation/CS1\n        anchor = mw.uri.anchorEncode( anchor );\n    end\n    \n    return label .. anchor\nend\n\nfunction refid(label, args)\n    local p = args.p or \"\"\n    local pp = args.pp or \"\"\n    local loc = args.loc or \"\"\n    return anchorid(label, args) .. p .. pp .. loc    \nend\n\nfunction name(args)\n    local P1 = trim(args[1]) or \"\"\n    if ( args[5] ~= nil) then\n        return P1 .. \" et al.\"\n    else\n        local P2 = trim(args[2]) or \"\"\n        local P3 = trim(args[3]) or \"\" \n        local P4 = trim(args[4]) or \"\"\n        if ( args[4] ~= nil ) then\n            P4 = \" \" .. P4\n            P3 = \" &amp; \" .. P3\n            P2 = \", \" .. P2\n        elseif ( args[3] ~= nil ) then\n            P3 = \" \" .. P3\n            P2 = \" &amp; \" .. P2\n        elseif ( args[2] ~= nil ) then\n            P2 = \" \" .. P2            \n        end\n        return P1 .. P2 .. P3 .. P4\n    end \nend\n\nfunction crossref(frame, label, args)\n    local config = frame.args -- the arguments passed BY the template, in the wikitext of the template itself\n    local LB = config.BracketLeft or \"\"\n    local RB = config.BracketRight or \"\"\n    local anchor = args.ref or args.Ref or anchorid( label, args)\n    local text = name(args)\n    local loc = args.loc\n    local page\n    local pages = args.pp or args.pages\n    if pages == nil or pages == '' then\n        page = args.p or args.page;\n    end \n    if nil == loc then loc = \"\" else loc = \" \" .. loc end\n    if ( page ~= nil ) then\n        local pagesep = config.PageSep or \", p.&nbsp;\"\n        loc = loc .. pagesep .. page\n    end\n    if ( pages ~= nil ) then\n        local pagessep = config.PagesSep or \", pp.&nbsp;\"\n        loc = loc .. pagessep .. pages\n    end        \n    local pagename = args.pagename or \"\"\n    local ps = args.Postscript or \"\"\n    return LB .. \"[[\" .. pagename .. \"#\" .. anchor .. \"|\" .. text .. \"]]\" .. loc .. RB .. ps\nend\n\nfunction r0(frame, name, group, page)\n    if ( name == nil ) then return \"\" end\n    if ( group == nil ) then group = \"\" end\n    local p = \"\"\n    if ( page ~= nil ) then \n        local contents = \":\" .. page\n        p = createTag({name=\"sup\",contents=contents,params={class=\"reference\",style=\"white-space:nowrap;\"}}) \n    end\n    return createTag({name=\"ref\",contents=\"\",params={name=name,group=group}}, frame) .. p\nend\n\nfunction reflist0(frame, config, args)\n    local contents = args.refs or \"\"\n    local liststyle = args.liststyle\n    local count = args[1]\n    local width = args.colwidth\n    local group = args.group or config.default_group\n    if ( nil == tonumber(count) and nil == width ) then \n        width = count\n        count = nil\n    end\n    if ( nil == liststyle ) then\n        if ( \"upper-alpha\" == group or \"lower-alpha\" == group or \"upper-roman\" == group or \"lower-roman\" == group or \"upper-greek\" == group or \"lower-greek\" == group ) then\n            liststyle = group\n        else\n            liststyle = config.default_liststyle\n        end\n    end\n    local params = {}\n    params.class = \"reflist\"    \n    params.style = z.wikitext.liststyle(liststyle)\n    if ( nil ~= count ) then        \n        params.class = params.class .. \" references-column-count references-column-count-\" .. count\n        params.style = params.style .. \" \" .. z.wikitext.columncountstyle(count)\n    end    \n    if ( nil ~= width ) then\n        params.class = params.class .. \" references-column-width\"\n        params.style = params.style .. \" \" .. z.wikitext.columnwidthstyle(width)\n    end\n    local references = createTag({name=\"references\",contents=contents,params={group=group}}, frame)\n    return createTag({name=\"div\",contents=references,params=params})\nend\n\nfunction refbegin0(frame, config, args)\n    local liststyle = args.liststyle\n    local indent = args.indent\n    local indentsize = args.indentsize\n    local count = args[1]\n    local width = args.colwidth\n    if ( nil == tonumber(count) and nil == width ) then \n        width = count\n        count = nil\n    end\n    if ( nil == liststyle ) then\n        if ( \"upper-alpha\" == group or \"lower-alpha\" == group or \"upper-roman\" == group or \"lower-roman\" == group or \"upper-greek\" == group or \"lower-greek\" == group ) then\n            liststyle = group\n        else\n            liststyle = config.default_liststyle\n        end\n    end\n    local params = {}\n    params.class = \"refbegin\"\n    params.style = z.wikitext.liststyle(liststyle)\n    if ( nil ~= count ) then        \n        params.class = params.class .. \" references-column-count references-column-count-\" .. count\n        params.style = params.style .. \" \" .. z.wikitext.columncountstyle(count)\n    end    \n    if ( nil ~= width ) then\n        params.class = params.class .. \" references-column-width\"\n        params.style = params.style .. \" \" .. z.wikitext.columnwidthstyle(width)\n    end\n    local dlopen\n    if ( nil ~= indent ) then\n        dlopen = z.wikitext.OpenHTMLTag({name=\"dl\",params={style=\"text-indent: -\" .. (indentsize or \"3.2\") .. \"em;\"}})\n    else\n        dlopen = \"\"\n    end\n    return z.wikitext.OpenHTMLTag({name=\"div\",params=params}) .. dlopen\nend\n\nfunction refend0(frame, config, args)\n    local indent = args.indent\n    local dlclose\n    if ( nil ~= indent ) then\n        dlclose = \"</dl>\"\n    else\n        dlclose = \"\"\n    end\n    return dlclose .. \"</div>\"\nend\n\n-- This is used by {{doi}} to create DOI links in the style used in citations.\nfunction z.doi(frame)\n    local pframe = frame:getParent()\n    local id = pframe.args.id or pframe.args[1] or \"\"\n    return doi(id)\nend\n\n-- This is used by {{ISSN}} to create ISSN links in the style used in citations.\nfunction z.ISSN(frame)\n    local pframe = frame:getParent()\n    local Name = pframe.args[1] or \"\"\n    return hideinprint(\"[[International Standard Serial Number|ISSN]]&nbsp;[http://www.worldcat.org/search?fq=x0:jrnl&q=n2:\" .. Name .. \" \" .. Name .. \"]\")\nend\n\n-- This is used by templates such as {{SfnRef}} to create the (encoded) anchor name for a Harvard cross-reference hyperlink.\nfunction z.SFNID(frame)\n    local pframe = frame:getParent()\n    return anchorid('FOOTNOTE', pframe.args)\nend\n\n-- This is used by templates such as {{Harvard citation}} to create the Harvard cross-reference text.\nfunction z.Harvard(frame)\n    local pframe = frame:getParent()\n    return crossref(frame, pframe.args)\nend\n\n-- This is used by templates such as {{sfn}} to create the entire cross-reference.\nfunction z.sfn(frame)\n    local pframe = frame:getParent()\n    pframe.args.Postscript = pframe.args.postscript or pframe.args.ps or \".\";\n    \n    local content = crossref(frame, 'CITEREF', pframe.args)\n    local args = { name = refid( 'FOOTNOTE', pframe.args) }\n    return createTag({name = \"ref\", contents = content, params = args}, frame)\nend\n\n-- This is used by template {{r}}.\nfunction z.r(frame)\n    local pframe = frame:getParent()\n    local config = frame.args -- the arguments passed BY the template, in the wikitext of the template itself\n    local args = pframe.args -- the arguments passed TO the template, in the wikitext that instantiates the template\n    args.page1 = args.page1 or args.page\n    local text = \"\"\n    -- This would be shorter using ipairs(), but that doesn't work on an arguments table supplied to a template.\n    local index = 1\n    while args[index] ~= nil do\n        local arg = args[index]\n        local t = r0(frame, arg, args.group, args[\"page\" .. index])\n        text = text .. t\n        index = index + 1\n    end\n    return text\nend\n\n-- This is used by template {{ref label}}.\nfunction z.reflabel(frame)\n    local pframe = frame:getParent()\n    local config = frame.args -- the arguments passed BY the template, in the wikitext of the template itself\n    local args = pframe.args -- the arguments passed TO the template, in the wikitext that instantiates the template\n    local P1 = args[1] or \"\"\n    local P2 = args[2] or \"\"\n    local P3 = args[3] or \"\"\n    local id = nil\n    local contents = \"[[#endnote_\" .. P1 .. P3 .. \"|&#91;\" .. P2 .. \"&#93;]]\"\n    local params = {}\n    params.class=\"reference\"\n    if ( args.noid == nil or args.noid == \"\" ) then params.id = \"ref_\" .. P1 .. P3 end\n    return createTag({name=\"sup\",contents=contents,params=params})\nend\n\n-- This is used by template {{note label}}.\nfunction z.notelabel(frame)\n    local pframe = frame:getParent()\n    local config = frame.args -- the arguments passed BY the template, in the wikitext of the template itself\n    local args = pframe.args -- the arguments passed TO the template, in the wikitext that instantiates the template\n    local id = args[1] or \"\"\n    local arrow = args[3] or \"\"\n    local postscript = args[4] or \"\"\n    local contents \n    if arrow ~= \"\" then\n        local sup_arrow = createTag({name=\"sup\",contents=arrow,params={}})\n        contents = \"[[#ref_\" .. id .. arrow .. \"|<b>\" .. sup_arrow .. \"</b>]]\" .. postscript\n        if \"none\" == arrow then arrow = \"^\" end -- Change this AFTER using it in the ID parameter and the contents.\n    else\n        contents = (args[2] or \"\") .. postscript\n    end\n    local params = { class=\"citation wikicite\" }\n    if id ~= \"\" and ( args.noid == nil or args.noid == \"\" ) then \n        params.id = mw.uri.anchorEncode(\"endnote_\" .. id .. arrow)\n    end\n    return createTag({name=\"span\",contents=contents,params=params})\nend\n\n-- This is used by templates {{reflist}} and {{notelist}}.\nfunction z.reflist(frame)\n    local pframe = frame:getParent()\n    local config = frame.args -- the arguments passed BY the template, in the wikitext of the template itself\n    local args = pframe.args -- the arguments passed TO the template, in the wikitext that instantiates the template\n    return reflist0(frame, config, args)\nend\n\n-- This is used by template {{refbegin}}.\nfunction z.refbegin(frame)\n    local pframe = frame:getParent()\n    local config = frame.args -- the arguments passed BY the template, in the wikitext of the template itself\n    local args = pframe.args -- the arguments passed TO the template, in the wikitext that instantiates the template\n    return refbegin0(frame, config, args)\nend\n\n-- This is used by template {{refend}}.\nfunction z.refend(frame)\n    local pframe = frame:getParent()\n    local config = frame.args -- the arguments passed BY the template, in the wikitext of the template itself\n    local args = pframe.args -- the arguments passed TO the template, in the wikitext that instantiates the template\n    return refend0(frame, config, args)\nend\n\n-- This is used by template {{efn}}.\nfunction z.efn(frame)\n    local pframe = frame:getParent()\n    local config = frame.args -- the arguments passed BY the template, in the wikitext of the template itself\n    local args = pframe.args -- the arguments passed TO the template, in the wikitext that instantiates the template\n    return createTag({name=\"ref\",contents=(args[1] or \"\"),params={name=args.name,group=config.default_group}}, frame)\nend\n\nreturn z\n---------------------------------------------------------------------\n--NOTES\n--\n-- NOTE A1: This Lua module was originally designed to handle a mix\n--      of citation styles, crossing Vancouver style with Wikipedia's\n--      local Citation Style 1 (CS1) from {Template:Citation/core}.\n--      However, the conflicting positions of parameters, scattered\n--      in twisted locations across this module, led to a separate\n--      variation just to untangle the CS1 format of citations.\n--\n-- NOTE D2: The placement of dots and other separators between the\n--      displayed parameters has been a continual headache, to keep\n--      coordinated with the data in parentheses \"(data)\". There\n--      has been a need to pre-check for the existence of related\n--      options, to keep from putting double-dots \"..\" in some cases.\n--      In particular, the omission of the \"title=\" parameter has led\n--      to several cases of a spurious dot \". .\" because the original\n--      design had treated the title as a mandatory parameter.\n--\n------------------------------------------------------------------------\n--HISTORY:\n--18Oct2012 Fixed lead-space in Chapter by omitting \" \".\n--18Oct2012 Fixed lead-space in Chapter/Title as end \" \" of Authors/Date/...\n--19Oct2012 Put HISTORY comments to log major changes (not typos).\n--19Oct2012 Fixed extra dot \"..\" in Title by omitting at end of \"tcommon=...\".\n--19Oct2012 For pages, put &nbsp in \"p.&nbsp;\" etc.\n--19Oct2012 Enhanced \"pages=\" to detect lone page as \"p.\" else \"pp.\" prefix.\n--19Oct2012 Fixed to show \".\" after Periodical name (work, newspaper...).\n--19Oct2012 Fixed web-link to have spaces \"[...  Archived] from the original\".\n--19Oct2012 Fixed to show \";\" between authors & coauthors.\n--19Oct2012 Fixed to omit extra \".\" after coauthors.\n--20Oct2012 Fixed COinS data to not urlencode all, as \"ctx_ver=Z39.88-2004\"\n--20Oct2012 Fixed COinS to not end as \"&\" but use lead \"&rft...=\" form.\n--20Oct2012 Fixed COinS to not url.encode page's \"rfr_id=...\" pagename.\n--20Oct2012 Fixed COinS data when \"web\" to default to rft.genre \"book\".\n--05Nov2012 Add a span wrapper even when there is no Ref parameter\n--15Feb2013 Added Agency for \"agency=xx\".\n--19Feb2013 Put NOTES comments to explain module operation.\n--19Feb2013 Copied as Module:Citation/CS1 to alter to match wp:CS1 form.\n--19Feb2013 Changed OrigYear to use [__] for CS1 style.\n--19Feb2013 Fixed to not show duplicate Publisher/Agency.\n--19Feb2013 Moved page-number parameters to after final date.\n--19Feb2013 Fixed to not put double-dots after title again.\n--20Feb2013 Changed to omit dot \".\" if already ends with dot.\n--20Feb2013 If class \"journal\" shows Publisher after Periodical/Series.\n--20Feb2013 Shifted Format to after Language, and Others after Volume.\n--20Feb2013 Set AccessDate + <span class=\"reference-accessdate\">\n--20Feb2013 Fixed url when deadurl=no.\n--20Feb2013 Added sepc for separator character between parameters.\n--20Feb2013 Put \"OCLC\" for \"Online Computer Library Center\".\n--20Feb2013 Fix empty \"authorlink=\" as person.link ~= \"\".\n--20Feb2013 Added space after AuthorSep & AuthorNameSep.\n--21Feb2013 Added args.contributor (was missing parameter).\n--21Feb2013 Fixed EditorSep (was misspelled \"EdithorSep\").\n--21Feb2013 Set OCinSdata.rft_val_fmt = \"info:ofi/fmt:kev:mtx:book\"\n--21Feb2013 Checked to omit blank codes (asin= | doi= etc.).\n--21Feb2013 Set enddot to end line if not config.CitationClass \"citation\".\n--21Feb2013 Fixed to show \"issn=x\" as the ISSN code.\n--21Feb2013 Fixed to show \"id=x\" after Zbl code.\n--21Feb2013 Changed to omit double-dot before date when already dot.\n--21Feb2013 Order config.CitationClass \"citation\": Volume, Issue, Publisher.\n--21Feb2013 Put warning \"Bad DOI (expected \"10.\"..)\" in DOI result.\n--21Feb2013 Automatically unbolded volume+comma when > 4 long.\n--21Feb2013 Changed to allow lowercase \"asin-tld\".\n--22Feb2013 Fixed ref=harv to extract Year from Date.\n--22Feb2013 Set Harvard refer. span id if config.CitationClass \"citation\".\n--22Feb2013 Fixed config.CitationClass \"citation\" as span class=\"citation\".\n--22Feb2013 Capitalized \"Archived/Retrieved\" only when sepc is dot \".\".\n--23Feb2013 Fixed author editor for \"in\" or \"In\" and put space after sepc.\n--23Feb2013 Changed to omit dot in \"et al.\" when sepc is \".\" separator.\n--23Feb2013 Fixed \"author1-first\" to also get args.given or args.given1.\n--23Feb2013 Fixed args.article to set Title, after Periodical is Title.\n--23Feb2013 Fixed to allow blank Title (such as \"contribution=mytitle\").\n--23Feb2013 Fixed double-dot \"..\" at end of Editors list\n--26Feb2013 Moved \"issue=\" data to show before \"page=\".\n--26Feb2013 Moved \"type=\" data to show after \"format=\".\n--26Feb2013 For \"pmc=\" link, omitted suffix \"/?tool=pmcentrez\".\n--27Feb2013 For coauthors, omitted extra separator after authors.\n--27Feb2013 For date, allowed empty date to use month/day/year.\n--27Feb2013 Fixed double-dot \"..\" at end of authors/coauthors list.\n--27Feb2013 Reset editor suffix as \", ed.\" when date exists.\n--27Feb2013 Removed duplicate display of \"others=\" data.\n--27Feb2013 Removed parentheses \"( )\" around \"department\" TitleNote.\n--05Mar2013 Moved Language to follow Periodical or Series.\n--05Mar2013 Fixed Edition to follow Series or Volume.\n--05Mar2013 Fixed class encyclopaedia to show article as quoted Chapter.\n--05Mar2013 Fixed class encyclopaedia to show page as \"pp.\" or \"p.\".\n--07Mar2013 Changed class encyclopaedia to omit \"( )\" around publisher.\n--07Mar2013 Fixed end double-dot by string.sub(idcommon,-1,-1) was \"-1,1\".\n--13Mar2013 Removed enddot \".\" after \"quote=\" parameter.\n--13Mar2013 Changed config.CitationClass \"news\" to use \"p.\" page format.\n--13Mar2013 Fixed missing \"location=\" when \"web\" or \"encyclopaedia\".\n--14Mar2013 Fixed end double-dot after book/work title.\n--14Mar2013 Fixed double-dot before \"p.\" or \"pp.\" page number.\n--14Mar2013 Fixed config.CitationClass \"book\" to use p./pp. page.\n--\n--End"}}}