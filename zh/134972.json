{"parse":{"title":"\u6a21\u5757:Loop","pageid":305544,"wikitext":{"*":"local module = {}\n\nlocal getArgs = require('Module:Arguments').getArgs\n\nfunction pack_inner_loop(loop)\n    -- \u7ed9\u5185\u5c42\u5faa\u73af\u7684do\u53c2\u6570\u5305\u88f9<nowiki>\u6807\u7b7e\n    loop = mw.ustring.gsub(loop, '{{%s-[lL][oO][oO][pP]%s-|', '{{#invoke:loop|main|')\n    return mw.ustring.gsub(loop, '({{#invoke:loop.*)', function(a)\n        local i = 1\n        local stack = {}\n        local do_begin = -1\n        local do_end = -1\n        while (i < mw.ustring.len(a)) do\n            if do_begin == -1 and mw.ustring.find(a, '^|%s-do%s-=', i) then\n                _, do_begin = mw.ustring.find(a, '^|%s-do%s-=', i)\n                do_begin = do_begin + 1\n                i = do_begin\n            end\n            if do_begin ~= -1 then\n                if mw.ustring.sub(a, i, i + 2) == '{{{' then\n                    i = i + 3\n                    table.insert(stack, 3)\n                elseif mw.ustring.sub(a, i, i + 1) == '{{' then\n                    i = i + 2\n                    table.insert(stack, 2)\n                elseif mw.ustring.sub(a, i, i + 2) == '}}}' then\n                    if #stack ~= 0 and stack[#stack] == 3 then\n                        i = i + 3\n                        table.remove(stack)\n                    elseif #stack ~= 0 and stack[#stack] == 2 then\n                        i = i + 2\n                        table.remove(stack)\n                    else\n                        do_end = i - 1\n                        break\n                    end\n                elseif mw.ustring.sub(a, i, i + 1) == '}}' then\n                    if #stack ~= 0 then\n                        i = i + 2\n                        table.remove(stack)\n                    else\n                        do_end = i - 1\n                        break\n                    end\n                elseif mw.ustring.sub(a, i, i) == '|' and #stack == 0 then\n                    do_end = i - 1\n                    break\n                else\n                    i = i + 1\n                end\n            else\n                i = i + 1\n            end\n        end\n        if do_begin ~= -1 and do_end == -1 then do_end = i - 1 end\n        if do_begin ~= -1 and do_end ~= -1 then\n        -- mw.log('\u53d1\u73b0\u5185\u5c42\u5faa\u73af <nowiki>'..mw.ustring.sub(a, do_begin, do_end)..'</nowiki>')\n        return mw.ustring.sub(a, 1, do_begin - 1)..'<nowiki>'..\n               mw.text.trim(mw.ustring.sub(a, do_begin, do_end))..'</nowiki>'..\n               pack_inner_loop(mw.ustring.sub(a, do_end + 1, -1))\n        else\n            return a\n        end\n    end )\nend\n\nfunction _main(args, frame)\n    local name = ''\n    local _min = 1\n    local _max = tonumber(args['max'] or args[1] or 10)\n    local addend = tonumber(args[2] or 1)\n    local loop = args['do'] or ''\n    loop = mw.text.unstripNoWiki(loop)\n    loop = string.gsub(loop, '<!%-%-.-%-%->', '')\n\n    loop = pack_inner_loop(loop)\n    local trim = mw.text.split(loop, '\\n')\n    loop = ''\n    for i, v in ipairs(trim) do\n        loop = loop..mw.text.trim(v)\n    end\n\n    for k, v in pairs(args) do\n        if(k ~= 'do' and k ~= 'max' and k ~= 1 and k ~= 2) then\n            name = string.gsub(k, '([%%%(%)%.%+%-%*%?%[%]%^%$])', '%%%1')\n            _min = tonumber(v)\n            break\n        end\n    end\n    if name == '' then error('\u5fc5\u987b\u8bbe\u7f6e\u81ea\u589e/\u81ea\u51cf\u7684\u53d8\u91cf\u540d\uff01') end\n\n    loop = mw.text.decode(loop)\n    -- mw.log('\u5faa\u73af\u4f53= '..loop)\n\n    local result = ''\n    if type(args[2]) == 'nil' and _min > _max and addend > 0 then addend = -1 end\n    for i=_min, _max, addend do\n        frame:callParserFunction('#vardefine', name, i)\n        -- mw.log('\u6267\u884c\u5faa\u73af\u4f53('..name..'='..tostring(i)..') '..loop)\n        result = result..frame:preprocess(loop)\n    end\n    -- mw.log('\u5faa\u73af\u7ed3\u679c '..result)\n    return result\nend\n\nfunction module.main(frame)\n    if (frame:getParent() or frame):getTitle() == 'Template:Loop' and\n        frame.args['do'] == nil then\n        args = getArgs(frame)\n    else\n        args = frame.args\n    end\n    return _main(args, frame:getParent() or frame)\nend\n\nreturn module"}}}