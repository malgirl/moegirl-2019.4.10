{"parse":{"title":"\u6a21\u5757:Listen","pageid":265308,"wikitext":{"*":"--\u672c\u6a21\u5757\u5d4c\u5165{{listen}}\n\nlocal mFileLink = require('Module:File link')\nlocal mTableTools = require('Module:TableTools')\nlocal mSideBox = require('Module:Side box')\n\nlocal p = {}\n\nfunction p.main(frame)\n\tlocal origArgs = frame:getParent().args\n\tlocal args = {}\n\tfor k, v in pairs(origArgs) do\n\t\tv = v:match('^%s*(.-)%s*$')\n\t\tif v ~= '' then\n\t\t\targs[k] = v\n\t\tend\n\tend\n\treturn p._main(args)\nend\n\nfunction p._main(args)\n\t-- Organise the arguments by number.\n\tlocal numArgs = {}\n\tdo\n\t\tlocal origNumArgs = mTableTools.numData(args)\n\t\torigNumArgs[1] = origNumArgs.other -- Overwrite args.filename1 etc. with args.filename etc.\n\t\torigNumArgs = mTableTools.compressSparseArray(origNumArgs)\n\t\tfor i, t in ipairs(origNumArgs) do\n\t\t\tif t.filename then\n\t\t\t\tnumArgs[#numArgs + 1] = t\n\t\t\tend\n\t\tend\n\tend\n\n\t-- Find whether we are outputting a plain or an embedded box.\n\tlocal isPlain = args.plain == 'yes'\n\tlocal isEmbedded = args.embed and true or false\n\n\t-- Build the arguments for {{side box}}\n\tlocal sbargs = {}\n\tsbargs.metadata = 'no'\n\tsbargs.position = args.pos\n\n\t-- Style arguments\n\tdo\n\t\tlocal style = {}\n\t\tif isPlain then\n\t\t\tstyle[#style + 1] = 'border:none'\n\t\t\tstyle[#style + 1] = 'background:transparent'\n\t\t\tstyle[#style + 1] = 'float:none'\n\t\t\tstyle[#style + 1] = 'clear:none'\n\t\tend\n\t\tif isEmbedded then\n\t\t\tstyle[#style + 1] = 'border-collapse:collapse'\n\t\t\tstyle[#style + 1] = 'border-width:1px 0 0 0'\n\t\t\tstyle[#style + 1] = 'background:transparent'\n\t\t\tstyle[#style + 1] = 'float:none'\n\t\t\tstyle[#style + 1] = 'clear:none'\n\t\t\tstyle[#style + 1] = 'margin:0 -5px'\n\t\tend\n\t\tif args.pos == 'left' or args.pos == '\u5de6'  then\n\t\t\tstyle[#style + 1] = 'float:left'\n\t\t\tstyle[#style + 1] = 'clear:left'\n\t\telseif args.pos == 'center' or args.pos == '\u5c45\u4e2d' then\n\t\t\tstyle[#style + 1] = 'float:center'\n\t\t\tstyle[#style + 1] = 'clear:both'\n\t\t\tstyle[#style + 1] = 'margin-left:auto'\n\t\t\tstyle[#style + 1] = 'margin-right:auto'\n\t\tend\n\t\tstyle[#style + 1] = args.style\n\t\tsbargs.style = table.concat(style, '; ')\n\tend\n\tsbargs.textstyle = 'line-height:1.1em'\n\t-- Image\n\tif not isPlain and not isEmbedded then\n\t\tif args.image then\n\t\t\tsbargs.image = args.image\n\t\telse\n\t\t\tlocal images = {\n\t\t\t\tspeech = 'Classic Microphone.svg',\n\t\t\t\tmusic = 'Classic Music Player icon.svg'\n\t\t\t}\n\t\t\tlocal image = args.type\n\t\t\t\tand images[args.type]\n\t\t\t\tor 'Green Headphone icon.svg'\n\t\t\tsbargs.image = mFileLink._main{\n\t\t\t\tfile = image,\n\t\t\t\tsize = '65x50px',\n\t\t\t\tlocation = 'center',\n\t\t\t\tlink = '',\n\t\t\t\talt = ''\n\t\t\t}\n\t\tend\n\tend\n\n\t-- Text\n\tdo\n\t\tlocal header\n\t\tif args.header then\n\t\t\theader = mw.html.create('div')\n\t\t\theader\n\t\t\t\t:css{\n\t\t\t\t\tbackground = 'transparent',\n\t\t\t\t\t['text-align'] = 'left',\n\t\t\t\t\tpadding = args.embed and '2px 0' or '2px'\n\t\t\t\t}\n\t\t\t\t:wikitext(args.header)\n\t\t\theader = tostring(header)\n\t\t\theader = header .. '\\n'\n\t\telse\n\t\t\theader = ''\n\t\tend\n\t\tlocal text = {}\n\t\tfor i, t in ipairs(numArgs) do\n\t\t\ttext[#text + 1] = p.renderRow(t.filename, t.title, t.play, t.alt, t.description)\n\t\t\tif numArgs[i + 1] then\n\t\t\t\ttext[#text + 1] = '<hr />'\n\t\t\tend\n\t\tend\n\t\tsbargs.text = header .. table.concat(text)\n\tend\n\n\t-- Below\n\tif not isPlain and not isEmbedded and args.help ~= 'no' then\n\t\tsbargs.below = string.format(\n\t\t\t'<hr/><span style=\"font-size:smaller;\">'\n\t\t\t\t.. \"\u64ad\u653e%s\u65f6\u6709\u95ee\u9898\uff1f\u8bf7\u53c2\u9605[[Help:\u5a92\u4f53\u5e2e\u52a9|\u5a92\u4f53\u5e2e\u52a9]]\u3002\"\n\t\t\t\t.. '</span>',\n\t\t\t#numArgs > 1 and '\u8fd9\u4e9b-{zh-cn:\u6587\u4ef6; zh-tw:\u6863\u6849;}-' or '\u6b64-{zh-cn:\u6587\u4ef6; zh-tw:\u6863\u6849;}-'\n\t\t)\n\tend\n\n\t-- Render the side box.\n\tlocal sideBox = mSideBox._main(sbargs)\n\n\t--Render the tracking categories.\n\tlocal trackingCategories = p.renderTrackingCategories(args, numArgs)\n\treturn sideBox .. trackingCategories\nend\n\nfunction p.renderRow(filename, title, play, alt, description)\n\t-- Renders the HTML for one file description row.\n\tif not filename then\n\t\treturn nil\n\tend\n\tlocal root = mw.html.create('')\n\troot\n\t\t:tag('div')\n\t\t\t:addClass('haudio')\n\t\t\t:newline()\n\t\t\t:tag('div')\n\t\t\t\t:css{\n\t\t\t\t\t['width'] = '220px',\n\t\t\t\t\tpadding = '4px 0'\n\t\t\t\t}\n\t\t\t\t:wikitext(string.format('[[:File:%s|%s]]', filename, title or ''))\n\t\t\t\t:done()\n\t\t\t:newline()\n\t\t\t:tag('div')\n\t\t\t\t:wikitext(\n\t\t\t\t\tplay ~= 'no'\n\t\t\t\t\t\tand mFileLink._main{\n\t\t\t\t\t\t\tfile = filename,\n\t\t\t\t\t\t\tsize = '220px',\n\t\t\t\t\t\t\talt = alt\n\t\t\t\t\t\t}\n\t\t\t\t\t\tor nil\n\t\t\t\t)\n\t\t\t\t:done()\n\t\t\t:newline()\n\t\t\t:tag('div')\n\t\t\t\t:css{\n\t\t\t\t\t['width'] = '220px',\n\t\t\t\t\tpadding = '2px 0 0 0'\n\t\t\t\t}\n\t\t\t\t:addClass('description')\n\t\t\t\t:wikitext(description)\n\t\t\t\t:done()\n\t\t\t:done()\n\treturn tostring(root)\nend\n\nfunction p.renderTrackingCategories(args, numArgs, titleObj)\n\t-- Renders all tracking categories produced by the template.\n\t-- args and numArgs are passed through from p._main,\n\t-- and the titleObj is only used for testing purposes.\n\tlocal cats = {}\n\n\tlocal currentTitle = titleObj or mw.title.getCurrentTitle()\n\tif currentTitle.namespace == 0 then\n\t\t-- We are in mainspace.\n\t\tcats[#cats + 1] = '\u5d4c\u5165hAudio\u5fae\u683c\u5f0f\u7684\u6761\u76ee'\n\n\t\tfor i, t in ipairs(numArgs) do\n\t\t\tlocal success, title = pcall(mw.title.new, 'Media:' .. t.filename)\n\t\t\tif success and title and not title.exists then\n\t\t\t\tcats[#cats + 1] = '\u5d4c\u5165\u7a7a\u7684\u8bd5\u542c\u6a21\u677f\u6761\u76ee'\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\n\tif args.plain == 'yes' then\n\t\tcats[#cats + 1] = '\u4f7f\u7528plain\u53c2\u6570\u7684\u8bd5\u542c\u6a21\u677f'\n\tend\n\n\tfor i, cat in ipairs(cats) do\n\t\tcats[i] = string.format('[[Category:%s]]', cat)\n\tend\n\treturn table.concat(cats)\nend\n\nreturn p"}}}