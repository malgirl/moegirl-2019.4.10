{"parse":{"title":"\u6a21\u5757:Sandbox/\u30b5\u30f3\u30e0\u30eb/WikiTable","pageid":307950,"wikitext":{"*":"local module = {}\n\nlocal var_array = require(\"Module:Var-array\")\nlocal luaq = require(\"Module:Luaq\")\nlocal dictionary = require(\"Module:Dictionary\")\n\nfunction module.create(frame, overrides)\n\tlocal args = overrides or frame.args or { }\n\n\tlocal argDic = luaq.asQuery(args)\n\t\t:select(function(pair) return pair.key end)\n\t\t:groupBy(function(argName)\n\t\t\tif type(argName) == \"number\" then\n\t\t\t\treturn \"raw cell content\"\n\t\t\telseif mw.ustring.match(argName, \"^t_\") then\n\t\t\t\treturn \"table property\"\n\t\t\telseif mw.ustring.match(argName, \"^n_\") then\n\t\t\t\treturn \"named pattern\"\n\t\t\telse\n\t\t\t\tlocal sub, suffix = mw.ustring.match(argName, \"^[rc][1-9]%d*(([t_]?).*)$\")\n\t\t\t\tif #sub == 0 then return \"line content\"\n\t\t\t\telseif sub == \"t\" then return \"line istitle\"\n\t\t\t\telseif suffix == \"_\" then return \"line property\"\n\t\t\t\tend\n\n\t\t\t\tsub, suffix = mw.ustring.match(argName, \"^r[1-9]%d*c[1-9]%d*(([t_]?).*)$\")\n\t\t\t\tif #sub == 0 then return \"cell content\"\n\t\t\t\telseif sub == \"t\" then return \"cell istitle\"\n\t\t\t\telseif suffix == \"_\" then return \"cell property\"\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn \"others\"\n\t\tend)\n\t\t:where(function(group) return group.key ~= \"others\" end)\n\t\t:toDictionary(\n\t\t\tfunction(group) return group.key end,\n\t\t\tfunction(group) return group.query() end\n\t\t)\n\tlocal keyComparer = function(k1, k2)\n\t\t\tif k1 == k2 then return true --\u5f15\u7528\u76f8\u540c\n\t\t\telse return (math.max(0, k1.row or 0) == math.max(0, k2.row or 0)) and (math.max(0, k1.col or 0) == math.max(0, k2.col or 0))\n\t\t\tend\n\t\tend\n\tlocal arrayName = args[\"arrayName\"]\n\tlocal array = var_array.get(arrayName) --\u4f5c\u4e3a\u6570\u636e\u6e90\u7684\u4e8c\u7ef4\u6570\u7ec4\n\tlocal offsetR = args[\"offsetR\"] or 0\n\tlocal offsetC = args[\"offsetC\"] or 0\n\tlocal arrayCellContentDic = luaq.iasQuery(array or luaq.empty())\n\t\t:selectMany(\n\t\t\tfunction(cells) return luaq.iasQuery(cells) end,\n\t\t\tfunction(cells, cell, rIndex, cIndex) return { position = { row = rIndex, col = cIndex }, content = cell } end\n\t\t)\n\t\t:toDictionary(\n\t\t\tfunction(info) return info.position end,\n\t\t\tfunction(info) return info.content end,\n\t\t\tkeyComparer\n\t\t)\n\tlocal rawCellContentDic = (function()\n\t\tlocal defaultR, defaultC, arrayExists\n\t\tif array then defaultR, defaultC, arrayExists = 1, 1, true\n\t\telse\n\t\t\tdefaultR, defaultC, arrayExists = offsetR, offsetC, false\n\t\t\tarray = { }\n\t\tend\n\t\tif argDic:hasKey(\"raw cell content\") then\n\t\t\tlocal dic = dictionary.create(keyComparer)\n\t\t\tlocal row, col = defaultR, defaultC\n\t\t\tlocal cells = { }\n\t\t\tlocal group = luaq.iasQuery(argDic.getValue(\"raw cell content\"))\n\t\t\t\t:foreach(function(item)\n\t\t\t\t\tif (item == \"|-\") then\n\t\t\t\t\t\trow = row + 1\n\t\t\t\t\t\tcol = defaultC\n\t\t\t\t\t\tif not arrayExists then table.insert(array, cells) end\n\t\t\t\t\t\tcells = { }\n\t\t\t\t\telse\n\t\t\t\t\t\tdic:add({ row = row, col = col }, item)\n\t\t\t\t\t\tcol = col + 1\n\t\t\t\t\t\tif not arrayExists then table.insert(cells, item) end\n\t\t\t\t\tend\n\t\t\t\tend)\n\t\t\tif not arrayExists then table.insert(array, cells) end\n\t\t\treturn dic\n\t\telse return dictionary.create(keyComparer)\n\t\tend\n\tend)()\n\tlocal calBoolean = function(text)\n\t\treturn text ~= nil and mw.ustring.len(text) ~= 0 and text ~= \"no\"\n\tend\n\tlocal calProperties = function(prefix, func)\n\t\tfunc = func or function(s) return s end\n\t\tlocal globalPropertiesText = func(args[mw.string.format(\"%s_\", prefix)] or \"\")\n\t\tlocal properties = dictionary.create()\n\t\tlocal iterator = mw.ustring.gmatch(globalPropertiesText, \"%s*(%S+)=\\\"([^\\\"]*)\\\"\")\n\t\twhile true do\n\t\t\tlocal propertyName, propertyValue = iterator()\n\t\t\tif propertyName == nil then break\n\t\t\telse propertyValue = func(propertyValue)\n\t\t\tend\n\t\t\tproperties:add(propertyName, mw.ustring.sub(propertyValue, 2, mw.ustring.len(propertyValue) - 1))\n\t\tend\n\t\tluaq.asQuery(args)\n\t\t\t:select(function(pair)\n\t\t\t\tlocal subStr = mw.ustring.format(\"%s_\", prefix)\n\t\t\t\tlocal length = mw.ustring.len(subStr)\n\t\t\t\tif mw.ustring.sub(pair.key, 1, length) == subStr and mw.ustring.len(pair.key) > length then\n\t\t\t\t\treturn { propertyName = mw.ustring.sub(pair.key, length + 1), propertyValue = func(pair.value) }\n\t\t\t\telse return nil\n\t\t\t\tend\n\t\t\tend)\n\t\t\t:where(function(pair) return pair ~= nil end)\n\t\t\t:foreach(function(pair)\n\t\t\t\tif properties:hasKey(pair.propertyName) then\n\t\t\t\t\tproperties:setValue(pair.propertyName, pair.propertyValue)\n\t\t\t\telse\n\t\t\t\t\tproperties:add(pair.propertyName, pair.propertyValue)\n\t\t\t\tend\n\t\t\tend)\n\t\treturn properties\n\tend\n\tlocal specificCellContentDic = (argDic:hasKey(\"cell content\") and {luaq.iasQuery(argDic.getValue(\"cell content\"))} or {luaq.empty})[1]\n\t\t:select(function(paramName)\n\t\t\tlocal row, col = mw.ustring.match(paramName, \"^r([1-9]%d*)c([1-9]%d*)$\")\n\t\t\treturn { position = { row = tonumber(row), col = tonumber(col) }, content = args[paramName] }\n\t\tend)\n\t\t:toDictionary(\n\t\t\tfunction(info) return info.position end,\n\t\t\tfunction(info) return info.content end\n\t\t)\n\tlocal specificCellIsTitleDic = (argDic:hasKey(\"cell istitle\") and {luaq.iasQuery(argDic.getValue(\"cell istitle\"))} or {luaq.empty})[1]\n\t\t:select(function(paramName)\n\t\t\tlocal row, col = mw.ustring.match(paramName, \"^r([1-9]%d*)c([1-9]%d*)t$\")\n\t\t\treturn { position = { row = tonumber(row), col = tonumber(col) }, istitle = calBoolean(args[paramName]) }\n\t\tend)\n\t\t:toDictionary(\n\t\t\tfunction(info) return info.position end,\n\t\t\tfunction(info) return info.istitle end\n\t\t)\n\tlocal specificCellPropertiesDic = (argDic:hasKey(\"cell property\") and {luaq.iasQuery(argDic.getValue(\"cell property\"))} or {luaq.empty})[1]\n\t\t:select(function(paramName)\n\t\t\tlocal row, col = mw.ustring.match(paramName, \"^r([1-9]%d*)c([1-9]%d*)_\")\n\t\t\treturn { position = { row = tonumber(row), col = tonumber(col) }, properties = calProperties(mw.ustring.format(\"r%sc%s\", row, col)) }\n\t\tend)\n\t\t:toDictionary(\n\t\t\tfunction(info) return info.position end,\n\t\t\tfunction(info) return info.properties end\n\t\t)\n\tlocal specificLineContentTable = (argDic:hasKey(\"line content\") and {luaq.iasQuery(argDic.getValue(\"line content\"))} or {luaq.empty})[1]\n\t\t:select(function(paramName)\n\t\t\tlocal lineType, lineIndex = mw.ustring.match(paramName, \"^([rc])([1-9]%d*)$\")\n\t\t\treturn { type = lineType, index = tonumber(lineIndex), content = args[paramName] }\n\t\tend)\n\t\t:query()\n\tlocal specificLineIsTitleTable = (argDic:hasKey(\"line istitle\") and {luaq.iasQuery(argDic.getValue(\"line istitle\"))} or {luaq.empty})[1]\n\t\t:select(function(paramName)\n\t\t\tlocal lineType, lineIndex = mw.ustring.match(paramName, \"^([rc])([1-9]%d*)t$\")\n\t\t\treturn { type = lineType, index = tonumber(lineIndex), istitle = calBoolean(args[paramName]) }\n\t\tend)\n\t\t:query()\n\tlocal specificLinePropertiesTable = (argDic:hasKey(\"line property\") and {luaq.iasQuery(argDic.getValue(\"line property\"))} or {luaq.empty})[1]\n\t\t:select(function(paramName)\n\t\t\tlocal lineType, lineIndex = mw.ustring.match(paramName, \"^([rc])([1-9]%d*)_\")\n\t\t\treturn { type = lineType, index = tonumber(lineIndex), properties = calProperties(mw.ustring.format(\"%s%s\", lineType, lineIndex)) }\n\t\tend)\n\tlocal tablePropertiesDic = (argDic:hasKey(\"table property\") and {calProperties(\"t\")} or {dictionary.create()})[1]\n\tlocal patternDicsTable = (argDic:hasKey(\"named pattern\") and {luaq.iasQuery(argDic.getValue(\"named pattern\"))} or {luaq.empty})[1]\n\t\t:select(function(paramName)\n\t\t\tlocal patternName = mw.ustring.match(paramName, \"^n_(.*)$\")\n\t\t\tlocal pattern = args[paramName] or \"\"\n\t\t\tlocal mapping = args[mw.ustring.format(\"m_%s\", patternName)] or \"%r,%c\"\n\t\t\tlocal gsubFunc = function(expression)\n\t\t\t\tlocal wikiText mw.ustring.gsub(expression, \"%%[rcexy]\", function(capture)\n\t\t\t\t\tif capture == \"%r\" then\n\t\t\t\t\t\treturn tostring(info.position.row)\n\t\t\t\t\telseif capture == \"%c\" then\n\t\t\t\t\t\treturn tostring(info.position.col)\n\t\t\t\t\telseif capture == \"%e\" then\n\t\t\t\t\t\treturn mw.text.decode(mw.text.unstripNoWiki(info.content))\n\t\t\t\t\telseif capture == \"%x\" then\n\t\t\t\t\t\treturn tostring(offsetC)\n\t\t\t\t\telseif capture == \"%y\" then\n\t\t\t\t\t\treturn tostring(offsetR)\n\t\t\t\t\tend\n\t\t\t\tend)\n\t\t\t\treturn frame:preprocess(wikiText)\n\t\t\tend\n\t\t\treturn luaq.iasQuery(array)\n\t\t\t\t:selectMany(function(cells, rIndex)\n\t\t\t\t\treturn luaq.iasQuery(cells)\n\t\t\t\t\t\t:select(function(cell, cIndex)\n\t\t\t\t\t\t\treturn { position = { row = rIndex, col = cIndex }, content = cell }\n\t\t\t\t\t\tend)\n\t\t\t\tend)\n\t\t\t\t:where(function(info)\n\t\t\t\t\tlocal patternResult = gsubFunc(pattern)\n\t\t\t\t\treturn calBoolean(patternResult)\n\t\t\t\tend)\n\t\t\t\t:select(function(info)\n\t\t\t\t\tlocal mappingResult = gsubFunc(mapping)\n\t\t\t\t\tlocal row, col = mw.ustring.match(mappingResult, \"^(%d*),?(%d*)$\")\n\t\t\t\t\tif #row == 0 then row = 0 else row = tonumber(row) end\n\t\t\t\t\tif #col == 0 then col = 0 else col = tonumber(col) end\n\t\t\t\t\treturn { mappedPosition = { row = row, col = col }, originalPosition = info.position, content = info.content }\n\t\t\t\tend)\n\t\t\t\t:selectMany(\n\t\t\t\t\tfunction(info)\n\t\t\t\t\t\tlocal t = { }\n\t\t\t\t\t\tlocal content = args[mw.ustring.format(\"c_%s\", patternName)]\n\t\t\t\t\t\tif content then table.insert(t, { \"pattern cell content\", mw.text.decode(mw.text.unstripNoWiki(content)) }) end\n\t\t\t\t\t\tlocal istitle = args[mw.ustring.format(\"ct_%s\", patternName)]\n\t\t\t\t\t\tif istitle then\n\t\t\t\t\t\t\tlocal istitleResult = frame:preprocess(mw.text.decode(mw.text.unstripNoWiki(istitle)))\n\t\t\t\t\t\t\ttable.insert(t, { \"pattern cell istitle\", calBoolean(istitleResult) })\n\t\t\t\t\t\tend\n\t\t\t\t\t\tlocal properties = calProperties(\n\t\t\t\t\t\t\tmw.ustring.format(\"c_%s\", patternName),\n\t\t\t\t\t\t\tgsubFunc\n\t\t\t\t\t\t)\n\t\t\t\t\t\ttable.insert(t, { \"pattern cell property\", properties })\n\t\t\t\t\t\treturn luaq.iasQuery(t)\n\t\t\t\t\tend,\n\t\t\t\t\tfunction(info, rslt)\n\t\t\t\t\t\treturn { position = info.mappedPosition, resultType = rslt[1], resultValue = rslt[2] }\n\t\t\t\t\tend\n\t\t\t\t)\n\t\t\t\t:groupBy(\n\t\t\t\t\tfunction(info) return info.resultType end,\n\t\t\t\t\tfunction(info) return { position = info.pos, resultValue = info.resultValue } end\n\t\t\t\t)\n\t\t\t\t:toDictionary(\n\t\t\t\t\tfunction(group) return group.key end,\n\t\t\t\t\tfunction(group) return group end\n\t\t\t\t)\n\t\tend)\n\t\t:query()\n\n\tlocal propertiesToString = function(properties)\n\t\treturn table.concat(\n\t\t\tluaq.select(properties, function(pair)\n\t\t\t\treturn mw.ustring.format(\"%s=\\\"%s\\\"\", pair.key, pair.value)\n\t\t\tend)\n\t\t\t:query(),\n\t\t\t\" \"\n\t\t)\n\tend\n\n\t--\u8f93\u51fa\u903b\u8f91\n\tlocal tOutput = { }\n\ttable.insert(tOutput, mw.ustring.format(\"{| %s\", propertiesToString(\n\t\tluaq.aggregate(\n\t\t\tluaq.iasQuery(patternDicsTable)\n\t\t\t\t:select(function(dic)\n\t\t\t\t\tif dic:hasKey(\"pattern cell property\") then\n\t\t\t\t\t\treturn dic:getValue(\"pattern cell property\")\n\t\t\t\t\telse return nil\n\t\t\t\t\tend\n\t\t\t\tend)\n\t\t\t\t:where(function(dic) return dic ~= nil end),\n\t\t\tfunction(ps1, ps2)\n\t\t\t\treturn luaq.union(ps1, ps2, function(p1, p2) return keyComparer(p1.key, p2.key) end)\n\t\t\tend,\n\t\t\tdictionary.create(nil, tablePropertiesDic)\n\t\t)\n\t)))\n\tlocal maxRow = luaq.asQueryFrom(\n\t\tluaq.select(rawCellContentDic, function(pair) return pair.key.row or 0 end)\n\t\t\t:defaultIfEmpty(0)\n\t\t\t:max(),\n\t\tluaq.select(arrayCellContentDic, function(pair) return pair.key.row or 0 end)\n\t\t\t:defaultIfEmpty(0)\n\t\t\t:max(),\n\t\tluaq.iasQuery(patternDicsTable)\n\t\t\t:select(function(dic)\n\t\t\t\treturn luaq.asQueryFrom(\n\t\t\t\t\t(dic:hasKey(\"pattern cell content\") and {dic:getValue(\"pattern cell content\")} or luaq.empty)\n\t\t\t\t\t\t:select(function(info) return info.position.row or 0 end)\n\t\t\t\t\t\t:defaultIfEmpty(0)\n\t\t\t\t\t\t:max(),\n\t\t\t\t\t(dic:hasKey(\"pattern cell istitle\") and {dic:getValue(\"pattern cell istitle\")} or luaq.empty)\n\t\t\t\t\t\t:select(function(info) return info.position.row or 0 end)\n\t\t\t\t\t\t:defaultIfEmpty(0)\n\t\t\t\t\t\t:max(),\n\t\t\t\t\t(dic:hasKey(\"pattern cell property\") and {dic:getValue(\"pattern cell property\")} or luaq.empty)\n\t\t\t\t\t\t:select(function(info) return info.position.row or 0 end)\n\t\t\t\t\t\t:defaultIfEmpty(0)\n\t\t\t\t\t\t:max()\n\t\t\t\t).max()\n\t\t\tend)\n\t\t\t:defaultIfEmpty(0)\n\t\t\t:max(),\n\t\tluaq.select(arrayCellContentDic, function(pair) return pair.key.row or 0 end)\n\t\t\t:defaultIfEmpty(0)\n\t\t\t:max()\n\t).max()\n\tfor row = 1, maxRow do\n\t\ttable.add(tOutput, \"|-\")\n\t\tlocal maxCol = luaq.asQueryFrom(\n\t\t\tluaq.select(colCellDic, function(pair) return pair.key.col or 0 end)\n\t\t\t\t:defaultIfEmpty(0)\n\t\t\t\t:max(),\n\t\t\tluaq.select(arrayCellContentDic, function(pair) return pair.key.col or 0 end)\n\t\t\t\t:defaultIfEmpty(0)\n\t\t\t\t:max(),\n\t\t\tluaq.iasQuery(patternDicsTable)\n\t\t\t\t:select(function(dic)\n\t\t\t\t\treturn luaq.asQueryFrom(\n\t\t\t\t\t\t(dic:hasKey(\"pattern cell content\") and {dic:getValue(\"pattern cell content\")} or luaq.empty)\n\t\t\t\t\t\t\t:select(function(info) return info.position.col or 0 end)\n\t\t\t\t\t\t\t:defaultIfEmpty(0)\n\t\t\t\t\t\t\t:max(),\n\t\t\t\t\t\t(dic:hasKey(\"pattern cell istitle\") and {dic:getValue(\"pattern cell istitle\")} or luaq.empty)\n\t\t\t\t\t\t\t:select(function(info) return info.position.col or 0 end)\n\t\t\t\t\t\t\t:defaultIfEmpty(0)\n\t\t\t\t\t\t\t:max(),\n\t\t\t\t\t\t(dic:hasKey(\"pattern cell property\") and {dic:getValue(\"pattern cell property\")} or luaq.empty)\n\t\t\t\t\t\t\t:select(function(info) return info.position.col or 0 end)\n\t\t\t\t\t\t\t:defaultIfEmpty(0)\n\t\t\t\t\t\t\t:max()\n\t\t\t\t\t).max()\n\t\t\t\tend)\n\t\t\t\t:defaultIfEmpty(0)\n\t\t\t\t:max(),\n\t\t\tluaq.select(arrayCellContentDic, function(pair) return pair.key.col or 0 end)\n\t\t\t\t:defaultIfEmpty(0)\n\t\t\t\t:max()\n\t\t).max()\n\t\tfor col = 1, maxCol do\n\t\t\tlocal istitle = (luaq.asQueryFrom(\n\t\t\t\t\tluaq.asQuery(specificCellIsTitleDic)\n\t\t\t\t\t\t:where(function(pair) return pair.key.row == row and pair.key.col == col end)\n\t\t\t\t\t\t:select(function(pair) return pair.value end)\n\t\t\t\t\t\t:first(nil),\n\t\t\t\t\tluaq.iasQuery(specificLineIsTitleTable)\n\t\t\t\t\t\t:where(function(info)\n\t\t\t\t\t\t\tif info.type == \"r\" then return info.index == row\n\t\t\t\t\t\t\telseif info.type == \"c\" then return info.index == col\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend)\n\t\t\t\t\t\t:select(function(info) return info.istitle end)\n\t\t\t\t\t\t:first(nil)\n\t\t\t\t)\n\t\t\t\t:concat(luaq.iasQuery(patternDicsTable)\n\t\t\t\t\t:where(function(dic) return dic:hasKey(\"pattern cell istitle\") end)\n\t\t\t\t\t:selectMany(function(dic) return dic:getValue(\"pattern cell istitle\") end)\n\t\t\t\t\t:where(function(info)\n\t\t\t\t\t\treturn (info.position.row == 0 or info.position.row == row) or (info.position.col == 0 or info.position.col == col)\n\t\t\t\t\tend)\n\t\t\t\t\t:select(function(info) return info.resultValue end)\n\t\t\t\t)\n\t\t\t\t:where(function(it) return it ~= nil end)\n\t\t\t\t:first(false)\n\t\t\t\t\tand {\"!\"} or {\"|\"})[1]\n\t\t\tlocal properties = luaq.asQuery(specificCellPropertiesDic)\n\t\t\t\t:where(function(pair) return pair.key.row == row and pair.key.col == col end)\n\t\t\t\t:select(function(pair) return pair.value end)\n\t\t\t\t:concat(luaq.iasQuery(specificLinePropertiesTable)\n\t\t\t\t\t:where(function(info)\n\t\t\t\t\t\tif info.type == \"r\" then return info.index == row\n\t\t\t\t\t\telseif info.type == \"c\" then return info.index == col\n\t\t\t\t\t\tend\n\t\t\t\t\tend)\n\t\t\t\t\t:select(function(info) return info.content end)\n\t\t\t\t)\n\t\t\t\t:concat(luaq.iasQuery(patternDicsTable)\n\t\t\t\t\t:where(function(dic) return dic:hasKey(\"pattern cell property\") end)\n\t\t\t\t\t:selectMany(function(dic) return dic:getValue(\"pattern cell property\") end)\n\t\t\t\t\t:where(function(info)\n\t\t\t\t\t\treturn (info.position.row == 0 or info.position.row == row) or (info.position.col == 0 or info.position.col == col)\n\t\t\t\t\tend)\n\t\t\t\t\t:select(function(info) return info.resultValue end)\n\t\t\t\t)\n\t\t\t\t:aggregate(\n\t\t\t\t\tfunction(ps1, ps2)\n\t\t\t\t\t\treturn luaq.union(ps1, ps2, function(p1, p2) return keyComparer(p1.key, p2.key) end)\n\t\t\t\t\tend,\n\t\t\t\t\tdictionary.create(keyComparer)\n\t\t\t\t)\n\t\t\tlocal content = luaq.asQueryFrom(\n\t\t\t\t\tluaq.asQuery(specificCellContentDic)\n\t\t\t\t\t\t:where(function(pair) return pair.key.row == row and pair.key.col == col end)\n\t\t\t\t\t\t:select(function(pair) return pair.value end)\n\t\t\t\t\t\t:first(nil),\n\t\t\t\t\tluaq.iasQuery(specificLineContentTable)\n\t\t\t\t\t\t:where(function(info)\n\t\t\t\t\t\t\tif info.type == \"r\" then return info.index == row\n\t\t\t\t\t\t\telseif info.type == \"c\" then return info.index == col\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend)\n\t\t\t\t\t\t:select(function(info) return info.content end)\n\t\t\t\t\t\t:first(nil)\n\t\t\t\t)\n\t\t\t\t:concat(luaq.iasQuery(patternDicsTable)\n\t\t\t\t\t:where(function(dic) return dic:hasKey(\"pattern cell content\") end)\n\t\t\t\t\t:selectMany(function(dic) return dic:getValue(\"pattern cell content\") end)\n\t\t\t\t\t:where(function(info)\n\t\t\t\t\t\treturn (info.position.row == 0 or info.position.row == row) or (info.position.col == 0 or info.position.col == col)\n\t\t\t\t\tend)\n\t\t\t\t\t:select(function(info) return info.resultValue end)\n\t\t\t\t)\n\t\t\t\t:concat(luaq.asQueryFrom(\n\t\t\t\t\tluaq.asQuery(arrayCellContentDic)\n\t\t\t\t\t\t:where(function(pair) return pair.key.row == row and pair.key.col == col end)\n\t\t\t\t\t\t:select(function(pair) return pair.value end)\n\t\t\t\t\t\t:first(nil),\n\t\t\t\t\tluaq.asQuery(rawCellContentDic)\n\t\t\t\t\t\t:where(function(pair) return pair.key.row == row and pair.key.col == col end)\n\t\t\t\t\t\t:select(function(pair) return pair.value end)\n\t\t\t\t\t\t:first(nil)\n\t\t\t\t))\n\t\t\t\t:where(function(it) return it ~= nil end)\n\t\t\t\t:first(\"\")\n\n\t\t\tif luaq.any(properties) then\n\t\t\t\ttable.insert(mw.ustring.format(\"%s %s | %s\", istitle, propertiesToString(properties), frame:preprocess(content)))\n\t\t\telse\n\t\t\t\ttable.insert(mw.ustring.format(\"%s %s\", istitle, frame:preprocess(content)))\n\t\t\tend\n\t\t\t--\u8f93\u51fa\u5355\u5143\u683c\n\t\t\t-- [raw cell content] => [array] => [named pattern cell content](<first> => <last>) =>[specific line content] =>[specific cell content]\n\t\t\t-- [named pattern cell istitle/properties](<first> => <last>) => [specific line istitle/properties] => [specific cell istitle/properties]\n\t\tend\n\tend\n\ttable.insert(\"|}\")\n\treturn table.concat(tOutput, \"\\r\\n\")\nend\n\nreturn module"}}}