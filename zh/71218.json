{"parse":{"title":"User:AnnAngela/SandBox.js","pageid":123601,"wikitext":{"*":"$(function() {\n    if ($('body.skin-vector')[0]) if (window.navigator.userAgent.toLowerCase().indexOf('mobile') == -1) $('body').addClass('cilent-pc');\n    else return false;\n    $('.Tabs').each(function() {\n    \tif ($(this).find('.TabLabel')[0]) return true;\n        var self = $(this),\n            data = $.extend({\n                labelPadding: null,\n                labelBorderColor: null,\n                labelColor: null,\n                textPadding: null,\n                textBorderColor: null,\n                defaultTab: 1,\n            }, this.dataset),\n            tabLabel = self.append('<div class=\"TabLabel\"></div>').find('.TabLabel'),\n            tabContent = self.append('<div class=\"TabContent\"></div>').find('.TabContent'),\n            labelPadding = data.labelPadding,\n            labelBorderColor = data.labelBorderColor,\n            labelColor = data.labelColor,\n            textPadding = data.textPadding,\n            textBorderColor = data.textBorderColor,\n            labelStyleSheet = {},\n            textStyleSheet = {},\n            tabContentText, tabLabelText, dafaultTab;\n        Object.prototype.length = function() {\n            return Object.getOwnPropertyNames(this).length;\n        }\n        self.find('.Tab').each(function() {\n            $(this).find('.TabLabelText').appendTo('.TabLabel');\n            $(this).find('.TabContentText').appendTo('.TabContent');\n            $(this).remove();\n        });\n        tabContentText = self.find('.TabContentText'),\n            tabLabelText = self.find('.TabLabelText');\n        defaultTab = Number(data.defaultTab);\n        if (isNaN(defaultTab) || defaultTab <= 0 || defaultTab > tabLabelText.length) defaultTab = 1;\n        tabLabelText.bind('click', function() {\n            var label = $(this);\n            label.addClass('selected').siblings().removeClass('selected').css('border-color', 'none');\n            tabContentText.eq(tabLabelText.index(label)).addClass('selected').siblings().removeClass('selected').removeAttr('style');\n            if (labelStyleSheet.length()) label.css(labelStyleSheet);\n        }).eq(defaultTab - 1).click();\n        if (/^\\d*(\\.\\d*)?(em|px)?( \\d*(\\.\\d*)?(em|px)?){0,3}$/.test(labelPadding)) tabLabelText.css('padding', labelPadding);\n        if (/(^\\#[a-z0-5]{3}$)|(^\\#[a-z0-5]{6}$)|(^[a-z]+$)/.test(labelBorderColor)) labelStyleSheet.borderColor = labelBorderColor;\n        if (/(^\\#[a-z0-5]{3}$)|(^\\#[a-z0-5]{6}$)|(^[a-z]+$)/.test(labelColor)) labelStyleSheet.borderTopColor = labelColor;\n        else {\n            if (labelStyleSheet['border-color']) labelStyleSheet.borderTopColor = 'green';\n        }\n        if (/^\\d*(\\.\\d*)?(em|px)?( \\d*(\\.\\d*)?(em|px)?){0,3}$/.test(textPadding)) textStyleSheet.padding = textPadding;\n        if (/(^\\#[a-z0-5]{3}$)|(^\\#[a-z0-5]{6}$)|(^[a-z]+$)/.test(textBorderColor)) textStyleSheet.borderColor = textBorderColor;\n        tabLabel.find('.selected').click();\n        if (textStyleSheet.length()) tabContent.css(textStyleSheet);\n    });\n});"}}}