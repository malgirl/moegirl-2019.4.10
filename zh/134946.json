{"parse":{"title":"\u6a21\u5757:Crc32lua","pageid":295644,"wikitext":{"*":"--[[\n\nLUA MODULE\n\n  digest.crc32 - CRC-32 checksum implemented entirely in Lua.\n\nSYNOPSIS\n\n  local CRC = require 'digest.crc32lua'\n  print(CRC.crc32 'test') --> 0xD87F7E0C or -662733300\n  \n  assert(CRC.crc32('st', CRC.crc32('te')) == CRC.crc32 'test')\n  \nDESCRIPTION\n\n  This can be used to compute CRC-32 checksums on strings.\n  This is similar to [1-2].\n\nAPI\n\n  Note: in the functions below, checksums are 32-bit integers stored in\n  numbers.  The number format currently depends on the bit\n  implementation--see DESIGN NOTES below.\n\n  CRC.crc32_byte(byte [, crc]) --> rcrc\n  \n    Returns CRC-32 checksum `rcrc` of byte `byte` (number 0..255) appended to\n    a string with CRC-32 checksum `crc`.  `crc` defaults to 0 (empty string)\n    if omitted.\n\n  CRC.crc32_string(s, crc) --> bcrc\n\n    Returns CRC-32 checksum `rcrc` of string `s` appended to\n    a string with CRC-32 checksum `crc`.  `crc` defaults to 0 (empty string)\n    if omitted.\n  \n  CRC.crc32(o, crc) --> bcrc\n\n    This invokes `crc32_byte` if `o` is a byte or `crc32_string` if `o`\n    is a string.\n  \n  CRC.bit\n\n    This contains the underlying bit library used by the module.  It\n    should be considered a read-only copy.\n\nDESIGN NOTES\n\n  Currently, this module exposes the underlying bit array implementation in CRC\n  checksums returned.  In BitOp, bit arrays are 32-bit signed integer numbers\n  (may be negative).  In Lua 5.2 'bit32' and 'bit.numberlua', bit arrays are\n  32-bit unsigned integer numbers (non-negative).  This is subject to change\n  in the future but is currently done due to (unconfirmed) performance\n  implications.\n  \n  On platforms with 64-bit numbers, one way to normalize CRC\n  checksums to be unsigned is to do `crcvalue % 2^32`,\n  \n  The name of this module is inspired by Perl `Digest::CRC*`.\n\nDEPENDENCIES\n \n  Requires one of the following bit libraries:\n\n    BitOp \"bit\" -- bitop.luajit.org -- This is included in LuaJIT and also available\n      for Lua 5.1/5.2.  This provides the fastest performance in LuaJIT.\n    Lua 5.2 \"bit32\" -- www.lua.org/manual/5.2 -- This is provided in Lua 5.2\n      and is preferred in 5.2 (unless \"bit\" also happens to be installed).\n    \"bit.numberlua\" (>=000.003) -- https://github.com/davidm/lua-bit-numberlua\n      This is slowest and used as a last resort.\n      It is only a few times slower than \"bit32\" though.\n\nDOWNLOAD/INSTALLATION\n\n  If using LuaRocks:\n    luarocks install lua-digest-crc32lua\n\n  Otherwise, download <https://github.com/davidm/lua-digest-crc32lua/zipball/master>.\n  Alternately, if using git:\n    git clone git://github.com/davidm/lua-digest-crc32lua.git\n    cd lua-digest-crc32lua\n  Optionally unpack:\n    ./util.mk\n  or unpack and install in LuaRocks:\n    ./util.mk install \n  \nREFERENCES\n\n  [1] http://www.axlradius.com/freestuff/CRC32.java\n  [2] http://www.gamedev.net/reference/articles/article1941.asp\n  [3] http://java.sun.com/j2se/1.5.0/docs/api/java/util/zip/CRC32.html\n  [4] http://www.dsource.org/projects/tango/docs/current/tango.io.digest.Crc32.html\n  [5] http://pydoc.org/1.5.2/zlib.html#-crc32\n  [6] http://www.python.org/doc/2.5.2/lib/module-binascii.html\n \nLICENSE\n\n  (c) 2008-2011 David Manura.  Licensed under the same terms as Lua (MIT).\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  (end license)\n \n--]]\n\n\nlocal M = {_TYPE='module', _NAME='digest.crc32', _VERSION='0.3.20111128'}\n\nlocal type = type\nlocal require = require\nlocal setmetatable = setmetatable\n\n--[[\n Requires the first module listed that exists, else raises like `require`.\n If a non-string is encountered, it is returned.\n Second return value is module name loaded (or '').\n --]]\nlocal function requireany(...)\n  local errs = {}\n  for _,name in ipairs{...} do\n    if type(name) ~= 'string' then return name, '' end\n    local ok, mod = pcall(require, name)\n    if ok then return mod, name end\n    errs[#errs+1] = mod\n  end\n  error(table.concat(errs, '\\n'), 2)\nend\n\nlocal bit, name_ = requireany('bit32', 'bit', 'bit.numberlua')\nlocal bxor = bit.bxor\nlocal bnot = bit.bnot\nlocal band = bit.band\nlocal rshift = bit.rshift\n\n-- CRC-32-IEEE 802.3 (V.42)\nlocal POLY = 0xEDB88320\n\n-- Memoize function pattern (like http://lua-users.org/wiki/FuncTables ).\nlocal function memoize(f)\n  local mt = {}\n  local t = setmetatable({}, mt)\n  function mt:__index(k)\n    local v = f(k); t[k] = v\n    return v\n  end\n  return t\nend\n\n-- CRC table.\nlocal crc_table = memoize(function(i)\n  local crc = i\n  for _=1,8 do\n    local b = band(crc, 1)\n    crc = rshift(crc, 1)\n    if b == 1 then crc = bxor(crc, POLY) end\n  end\n  return crc\nend)\n\n\nfunction M.crc32_byte(byte, crc)\n  crc = bnot(crc or 0)\n  local v1 = rshift(crc, 8)\n  local v2 = crc_table[bxor(crc % 256, byte)]\n  return bnot(bxor(v1, v2))\nend\nlocal M_crc32_byte = M.crc32_byte\n\n\nfunction M.crc32_string(s, crc)\n  crc = crc or 0\n  for i=1,#s do\n    crc = M_crc32_byte(s:byte(i), crc)\n  end\n  return crc\nend\nlocal M_crc32_string = M.crc32_string\n\n\nfunction M.crc32(s, crc)\n  if type(s) == 'string' then\n    return M_crc32_string(s, crc)\n  else\n    return M_crc32_byte(s, crc)\n  end\nend\n\n\nM.bit = bit  -- bit library used\n\n\nreturn M"}}}