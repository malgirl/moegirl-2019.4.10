{"parse":{"title":"MediaWiki:Gadget-HotCat.js","pageid":791,"wikitext":{"*":"/* https://commons.wikimedia.org/wiki/MediaWiki:Gadget-HotCat.js */\n// <nowiki>\n/**\nHotCat V2.41\n\nAjax-based simple Category manager. Allows adding/removing/changing categories on a page view.\nSupports multiple category changes, as well as redirect and disambiguation resolution. Also\nplugs into the upload form. Search engines to use for the suggestion list are configurable, and\ncan be selected interactively.\n\nDocumentation: https://commons.wikimedia.org/wiki/Help:Gadget-HotCat\nList of main authors: https://commons.wikimedia.org/wiki/Help:Gadget-HotCat/Version_history\n\nLicense: Quadruple licensed GFDL, GPL, LGPL and Creative Commons Attribution 3.0 (CC-BY-3.0)\n\nChoose whichever license of these you like best :-)\n\nThis code should run on any MediaWiki installation >= MW 1.27.\n\nFor use with older versions of MediaWiki, use the archived versions below:\n\n<=1.26: https://commons.wikimedia.org/w/index.php?title=MediaWiki:Gadget-HotCat.js&oldid=211134664\n*/\n/* jshint ignore:start */ //\u8fd9\u4e48\u591awarning\u6211\u53d7\u4e0d\u4e86\u4e8623333\nwindow.hotcat_translations_from_commons = false; // \u7981\u6b62\u4ece\u7ef4\u57fa\u5171\u4eab\u83b7\u53d6\u7ffb\u8bd1\n(function($, mw) {\n    var conf = mw.config.values;\n    if (window.HotCat && !window.HotCat.nodeName || conf.wgAction === \"edit\") return;\n    var HC = window.HotCat = {\n        messages: {\n            cat_removed: \"removed [[Category:$1]]\",\n            template_removed: \"removed {{[[Category:$1]]}}\",\n            cat_added: \"added [[Category:$1]]\",\n            cat_keychange: 'new key for [[Category:$1]]: \"$2\"',\n            cat_notFound: 'Category \"$1\" not found',\n            cat_exists: 'Category \"$1\" already exists; not added.',\n            cat_resolved: \" (redirect [[Category:$1]] resolved)\",\n            uncat_removed: \"removed {{uncategorized}}\",\n            separator: \"; \",\n            prefix: \"\",\n            using: \" using [[Help:Gadget-HotCat|HotCat]]\",\n            multi_change: \"$1 categories\",\n            commit: \"Save\",\n            ok: \"OK\",\n            cancel: \"Cancel\",\n            multi_error: \"Could not retrieve the page text from the server. Therefore, your category changes \" + \"cannot be saved. We apologize for the inconvenience.\",\n            short_catchange: null\n        },\n        categories: \"Categories\",\n        disambig_category: \"Disambiguation\",\n        redir_category: \"Category redirects\",\n        links: {\n            change: \"(\u00b1)\",\n            remove: \"(\u2212)\",\n            add: \"(+)\",\n            restore: \"(\u00d7)\",\n            undo: \"(\u00d7)\",\n            down: \"(\u2193)\",\n            up: \"(\u2191)\"\n        },\n        changeTag: conf.wgUserName ? \"HotCat\" : \"\",\n        tooltips: {\n            change: \"Modify\",\n            remove: \"Remove\",\n            add: \"Add a new category\",\n            restore: \"Undo changes\",\n            undo: \"Undo changes\",\n            down: \"Open for modifying and display subcategories\",\n            up: \"Open for modifying and display parent categories\"\n        },\n        addmulti: \"<span>+<sup>+</sup></span>\",\n        multi_tooltip: \"Modify several categories\",\n        disable: function() {\n            var ns = conf.wgNamespaceNumber;\n            var nsIds = conf.wgNamespaceIds;\n            return ns < 0 || ns === 10 || ns === 828 || ns === 8 || ns === 6 && !conf.wgArticleId || ns === 2 && /\\.(js|css)$/.test(conf.wgTitle) || nsIds && (ns === nsIds.creator || ns === nsIds.timedtext || ns === nsIds.institution);\n        },\n        uncat_regexp: /\\{\\{\\s*[Uu]ncategorized\\s*[^}]*\\}\\}\\s*(<!--.*?-->\\s*)?/g,\n        existsYes: \"//upload.wikimedia.org/wikipedia/commons/thumb/b/be/P_yes.svg/20px-P_yes.svg.png\",\n        existsNo: \"//upload.wikimedia.org/wikipedia/commons/thumb/4/42/P_no.svg/20px-P_no.svg.png\",\n        template_categories: {},\n        engine_names: {\n            searchindex: \"Search index\",\n            pagelist: \"Page list\",\n            combined: \"Combined search\",\n            subcat: \"Subcategories\",\n            parentcat: \"Parent categories\"\n        },\n        capitalizePageNames: true,\n        upload_disabled: false,\n        blacklist: null,\n        bg_changed: \"#FCA\",\n        no_autocommit: false,\n        del_needs_diff: false,\n        suggest_delay: 100,\n        editbox_width: 40,\n        suggestions: \"combined\",\n        fixed_search: false,\n        use_up_down: true,\n        listSize: 5,\n        single_minor: true,\n        dont_add_to_watchlist: false,\n        shortcuts: null,\n        addShortcuts: function(map) {\n            if (!map) return;\n            window.HotCat.shortcuts = window.HotCat.shortcuts || {};\n            for (var k in map) {\n                if (!map.hasOwnProperty(k) || typeof k !== \"string\") continue;\n                var v = map[k];\n                if (typeof v !== \"string\") continue;\n                k = k.replace(/^\\s+|\\s+$/g, \"\");\n                v = v.replace(/^\\s+|\\s+$/g, \"\");\n                if (!k.length || !v.length) continue;\n                window.HotCat.shortcuts[k] = v;\n            }\n        }\n    };\n    var ua = navigator.userAgent.toLowerCase();\n    var is_webkit = /applewebkit\\/\\d+/.test(ua) && ua.indexOf(\"spoofer\") < 0;\n    var cat_prefix = null;\n    var noSuggestions = false;\n\n    function LoadTrigger(needed) {\n        var self = this;\n        self.queue = [];\n        self.needed = needed;\n        self.register = function(callback) {\n            if (self.needed <= 0) callback();\n            else self.queue.push(callback);\n        };\n        self.loaded = function() {\n            self.needed--;\n            if (self.needed === 0) {\n                for (var i = 0; i < self.queue.length; i++) self.queue[i]();\n                self.queue = [];\n            }\n        };\n    }\n    var loadTrigger = new LoadTrigger(2);\n\n    function load(uri, callback) {\n        var s = document.createElement(\"script\");\n        s.src = uri;\n        var called = false;\n        s.onload = s.onerror = function() {\n            if (!called && callback) {\n                called = true;\n                callback();\n            }\n            if (s.parentNode) {\n                s.parentNode.removeChild(s);\n            }\n        };\n        document.head.appendChild(s);\n    }\n\n    function loadJS(page, callback) {\n        load(conf.wgServer + conf.wgScript + \"?title=\" + encodeURIComponent(page) + \"&action=raw&ctype=text/javascript\", callback);\n    }\n\n    function loadURI(href, callback) {\n        var url = href;\n        if (url.substring(0, 2) === \"//\") url = window.location.protocol + url;\n        else if (url.substring(0, 1) === \"/\") url = conf.wgServer + url;\n        load(url, callback);\n    }\n    loadJS(\"MediaWiki:Gadget-HotCat.js/local_defaults\", loadTrigger.loaded);\n    if (conf.wgUserLanguage !== \"en\") {\n        if (window.hotcat_translations_from_commons === undefined) window.hotcat_translations_from_commons = true;\n        if (window.hotcat_translations_from_commons && conf.wgServer.indexOf(\"//commons\") < 0) {\n            loadURI(\"//commons.wikimedia.org/w/index.php?title=\" + \"MediaWiki:Gadget-HotCat.js/\" + conf.wgUserLanguage + \"&action=raw&ctype=text/javascript\", loadTrigger.loaded);\n        } else {\n            loadJS(\"MediaWiki:Gadget-HotCat.js/\" + conf.wgUserLanguage, loadTrigger.loaded);\n        }\n    } else {\n        loadTrigger.loaded();\n    }\n    var wikiTextBlank = \"[\\\\t _\\\\xA0\\\\u1680\\\\u180E\\\\u2000-\\\\u200A\\\\u2028\\\\u2029\\\\u202F\\\\u205F\\\\u3000]+\";\n    var wikiTextBlankRE = new RegExp(wikiTextBlank, \"g\");\n    var wikiTextBlankOrBidi = \"[\\\\t _\\\\xA0\\\\u1680\\\\u180E\\\\u2000-\\\\u200B\\\\u200E\\\\u200F\\\\u2028-\\\\u202F\\\\u205F\\\\u3000]*\";\n    var formattedNamespaces = conf.wgFormattedNamespaces;\n    var namespaceIds = conf.wgNamespaceIds;\n\n    function autoLocalize(namespaceNumber, fallback) {\n        function createRegexpStr(name) {\n            if (!name || !name.length) return \"\";\n            var regex_name = \"\";\n            for (var i = 0; i < name.length; i++) {\n                var initial = name.charAt(i),\n                    ll = initial.toLowerCase(),\n                    ul = initial.toUpperCase();\n                if (ll === ul) regex_name += initial;\n                else regex_name += \"[\" + ll + ul + \"]\";\n            }\n            return regex_name.replace(/([\\\\^$.?*+()])/g, \"\\\\$1\").replace(wikiTextBlankRE, wikiTextBlank);\n        }\n        fallback = fallback.toLowerCase();\n        var canonical = formattedNamespaces[String(namespaceNumber)].toLowerCase();\n        var regexp = createRegexpStr(canonical);\n        if (fallback && canonical !== fallback) regexp += \"|\" + createRegexpStr(fallback);\n        if (namespaceIds) {\n            for (var cat_name in namespaceIds) {\n                if (typeof cat_name === \"string\" && cat_name.toLowerCase() !== canonical && cat_name.toLowerCase() !== fallback && namespaceIds[cat_name] === namespaceNumber) {\n                    regexp += \"|\" + createRegexpStr(cat_name);\n                }\n            }\n        }\n        return regexp;\n    }\n    HC.category_canonical = formattedNamespaces[\"14\"];\n    HC.category_regexp = autoLocalize(14, \"category\");\n    if (formattedNamespaces[\"10\"]) HC.template_regexp = autoLocalize(10, \"template\");\n\n    function make(arg, literal) {\n        if (!arg) return null;\n        return literal ? document.createTextNode(arg) : document.createElement(arg);\n    }\n\n    function param(name, uri) {\n        uri = uri || document.location.href;\n        var re = new RegExp(\"[&?]\" + name + \"=([^&#]*)\");\n        var m = re.exec(uri);\n        if (m && m.length > 1) return decodeURIComponent(m[1]);\n        return null;\n    }\n\n    function title(href) {\n        if (!href) return null;\n        var script = conf.wgScript + \"?\";\n        if (href.indexOf(script) === 0 || href.indexOf(conf.wgServer + script) === 0 || conf.wgServer.substring(0, 2) === \"//\" && href.indexOf(document.location.protocol + conf.wgServer + script) === 0) {\n            return param(\"title\", href);\n        } else {\n            var prefix = conf.wgArticlePath.replace(\"$1\", \"\");\n            if (href.indexOf(prefix)) prefix = conf.wgServer + prefix;\n            if (href.indexOf(prefix) && prefix.substring(0, 2) === \"//\") prefix = document.location.protocol + prefix;\n            if (href.indexOf(prefix) === 0) return decodeURIComponent(href.substring(prefix.length));\n        }\n        return null;\n    }\n\n    function hasClass(elem, name) {\n        return (\" \" + elem.className + \" \").indexOf(\" \" + name + \" \") >= 0;\n    }\n\n    function capitalize(str) {\n        if (!str || !str.length) return str;\n        return str.substr(0, 1).toUpperCase() + str.substr(1);\n    }\n\n    function wikiPagePath(pageName) {\n        return conf.wgArticlePath.replace(\"$1\", encodeURIComponent(pageName).replace(/%3A/g, \":\").replace(/%2F/g, \"/\"));\n    }\n\n    function escapeRE(str) {\n        return str.replace(/([\\\\^$.?*+()[\\]])/g, \"\\\\$1\");\n    }\n\n    function substituteFactory(options) {\n        options = options || {};\n        var lead = options.indicator || \"$\";\n        var indicator = escapeRE(lead);\n        var lbrace = escapeRE(options.lbrace || \"{\");\n        var rbrace = escapeRE(options.rbrace || \"}\");\n        var re;\n        re = new RegExp(\"(?:\" + indicator + \"(\" + indicator + \"))|\" + \"(?:\" + indicator + \"(\\\\d+))|\" + \"(?:\" + indicator + \"(?:\" + lbrace + \"([^\" + lbrace + rbrace + \"]+)\" + rbrace + \"))|\" + \"(?:\" + indicator + \"(?!(?:[\" + indicator + lbrace + \"]|\\\\d))(\\\\S+?)\\\\b)\", \"g\");\n        return function(str, map) {\n            if (!map) return str;\n            return str.replace(re, function(match, prefix, idx, key, alpha) {\n                if (prefix === lead) return lead;\n                var k = alpha || key || idx;\n                var replacement = typeof map[k] === \"function\" ? map[k](match, k) : map[k];\n                return typeof replacement === \"string\" ? replacement : replacement || match;\n            });\n        };\n    }\n    var substitute = substituteFactory();\n    var replaceShortcuts = function() {\n        var replaceHash = substituteFactory({\n            indicator: \"#\",\n            lbrace: \"[\",\n            rbrace: \"]\"\n        });\n        return function(str, map) {\n            var s = replaceHash(str, map);\n            return HC.capitalizePageNames ? capitalize(s) : s;\n        };\n    }();\n    var findCatsRE = new RegExp(\"\\\\[\\\\[\" + wikiTextBlankOrBidi + \"(?:\" + HC.category_regexp + \")\" + wikiTextBlankOrBidi + \":[^\\\\]]+\\\\]\\\\]\", \"g\");\n\n    function replaceByBlanks(match) {\n        return match.replace(/(\\s|\\S)/g, \" \");\n    }\n\n    function find_category(wikitext, category, once) {\n        var cat_regex = null;\n        if (HC.template_categories[category]) {\n            cat_regex = new RegExp(\"\\\\{\\\\{\" + wikiTextBlankOrBidi + \"(\" + HC.template_regexp + \"(?=\" + wikiTextBlankOrBidi + \":))?\" + wikiTextBlankOrBidi + \"(?:\" + HC.template_categories[category] + \")\" + wikiTextBlankOrBidi + \"(\\\\|.*?)?\\\\}\\\\}\", \"g\");\n        } else {\n            var cat_name = escapeRE(category);\n            var initial = cat_name.substr(0, 1);\n            cat_regex = new RegExp(\"\\\\[\\\\[\" + wikiTextBlankOrBidi + \"(\" + HC.category_regexp + \")\" + wikiTextBlankOrBidi + \":\" + wikiTextBlankOrBidi + (initial === \"\\\\\" || !HC.capitalizePageNames ? initial : \"[\" + initial.toUpperCase() + initial.toLowerCase() + \"]\") + cat_name.substring(1).replace(wikiTextBlankRE, wikiTextBlank) + wikiTextBlankOrBidi + \"(\\\\|.*?)?\\\\]\\\\]\", \"g\");\n        }\n        if (once) return cat_regex.exec(wikitext);\n        var copiedtext = wikitext.replace(/<!--(\\s|\\S)*?-->/g, replaceByBlanks).replace(/<nowiki>(\\s|\\S)*?<\\/nowiki>/g, replaceByBlanks);\n        var result = [];\n        var curr_match = null;\n        while ((curr_match = cat_regex.exec(copiedtext)) !== null) {\n            result.push({\n                match: curr_match\n            });\n        }\n        result.re = cat_regex;\n        return result;\n    }\n    var interlanguageRE = null;\n\n    function change_category(wikitext, toRemove, toAdd, key, is_hidden) {\n        function find_insertionpoint(wikitext) {\n            var copiedtext = wikitext.replace(/<!--(\\s|\\S)*?-->/g, replaceByBlanks).replace(/<nowiki>(\\s|\\S)*?<\\/nowiki>/g, replaceByBlanks);\n            var index = -1;\n            findCatsRE.lastIndex = 0;\n            while (findCatsRE.exec(copiedtext) !== null) index = findCatsRE.lastIndex;\n            if (index < 0) {\n                var match = null;\n                if (!interlanguageRE) {\n                    match = /((^|\\n\\r?)(\\[\\[\\s*(([a-z]{2,3}(-[a-z]+)*)|simple|tokipona)\\s*:[^\\]]+\\]\\]\\s*))+$/.exec(copiedtext);\n                } else {\n                    match = interlanguageRE.exec(copiedtext);\n                }\n                if (match) index = match.index;\n                return {\n                    idx: index,\n                    onCat: false\n                };\n            }\n            return {\n                idx: index,\n                onCat: index >= 0\n            };\n        }\n        var summary = [];\n        var nameSpace = HC.category_canonical;\n        var cat_point = -1;\n        if (key) key = \"|\" + key;\n        var keyChange = toRemove && toAdd && toRemove === toAdd && toAdd.length;\n        var matches;\n        if (toRemove && toRemove.length) {\n            matches = find_category(wikitext, toRemove);\n            if (!matches || !matches.length) {\n                return {\n                    text: wikitext,\n                    summary: summary,\n                    error: HC.messages.cat_notFound.replace(/\\$1/g, toRemove)\n                };\n            } else {\n                var before = wikitext.substring(0, matches[0].match.index);\n                var after = wikitext.substring(matches[0].match.index + matches[0].match[0].length);\n                if (matches.length > 1) {\n                    matches.re.lastIndex = 0;\n                    after = after.replace(matches.re, \"\");\n                }\n                if (toAdd) {\n                    nameSpace = matches[0].match[1] || nameSpace;\n                    if (key === null) key = matches[0].match[2];\n                }\n                var i = before.length - 1;\n                while (i >= 0 && before.charAt(i) !== \"\\n\" && before.substr(i, 1).search(/\\s/) >= 0) i--;\n                var j = 0;\n                while (j < after.length && after.charAt(j) !== \"\\n\" && after.substr(j, 1).search(/\\s/) >= 0) j++;\n                if (i >= 0 && before.charAt(i) === \"\\n\" && (!after.length || j < after.length && after.charAt(j) === \"\\n\")) i--;\n                if (i >= 0) before = before.substring(0, i + 1);\n                else before = \"\";\n                if (j < after.length) after = after.substring(j);\n                else after = \"\";\n                if (before.length && before.substring(before.length - 1).search(/\\S/) >= 0 && after.length && after.substr(0, 1).search(/\\S/) >= 0) {\n                    before += \" \";\n                }\n                cat_point = before.length;\n                if (cat_point === 0 && after.length && after.substr(0, 1) === \"\\n\") after = after.substr(1);\n                wikitext = before + after;\n                if (!keyChange) {\n                    if (HC.template_categories[toRemove]) {\n                        summary.push(HC.messages.template_removed.replace(/\\$1/g, toRemove));\n                    } else {\n                        summary.push(HC.messages.cat_removed.replace(/\\$1/g, toRemove));\n                    }\n                }\n            }\n        }\n        if (toAdd && toAdd.length) {\n            matches = find_category(wikitext, toAdd);\n            if (matches && matches.length) {\n                return {\n                    text: wikitext,\n                    summary: summary,\n                    error: HC.messages.cat_exists.replace(/\\$1/g, toAdd)\n                };\n            } else {\n                var onCat = false;\n                if (cat_point < 0) {\n                    var point = find_insertionpoint(wikitext);\n                    cat_point = point.idx;\n                    onCat = point.onCat;\n                } else {\n                    onCat = true;\n                }\n                var newcatstring = \"[[\" + nameSpace + \":\" + toAdd + (key || \"\") + \"]]\";\n                if (cat_point >= 0) {\n                    var suffix = wikitext.substring(cat_point);\n                    wikitext = wikitext.substring(0, cat_point) + (cat_point > 0 ? \"\\n\" : \"\") + newcatstring + (!onCat ? \"\\n\" : \"\");\n                    if (suffix.length && suffix.substr(0, 1) !== \"\\n\") wikitext += \"\\n\" + suffix;\n                    else wikitext += suffix;\n                } else {\n                    if (wikitext.length && wikitext.substr(wikitext.length - 1, 1) !== \"\\n\") wikitext += \"\\n\";\n                    wikitext += (wikitext.length ? \"\\n\" : \"\") + newcatstring;\n                }\n                if (keyChange) {\n                    var k = key || \"\";\n                    if (k.length) k = k.substr(1);\n                    summary.push(substitute(HC.messages.cat_keychange, [null, toAdd, k]));\n                } else {\n                    summary.push(HC.messages.cat_added.replace(/\\$1/g, toAdd));\n                }\n                if (HC.uncat_regexp && !is_hidden) {\n                    var txt = wikitext.replace(HC.uncat_regexp, \"\");\n                    if (txt.length !== wikitext.length) {\n                        wikitext = txt;\n                        summary.push(HC.messages.uncat_removed);\n                    }\n                }\n            }\n        }\n        return {\n            text: wikitext,\n            summary: summary,\n            error: null\n        };\n    }\n\n    function evtKeys(e) {\n        var code = 0;\n        if (e.ctrlKey) {\n            if (e.ctrlKey || e.metaKey) code |= 1;\n            if (e.shiftKey) code |= 2;\n        }\n        return code;\n    }\n\n    function evtKill(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n            e.stopPropagation();\n        } else {\n            e.cancelBubble = true;\n        }\n        return false;\n    }\n    var catLine = null,\n        onUpload = false,\n        editors = [],\n        commitButton = null,\n        commitForm = null,\n        multiSpan = null,\n        pageText = null,\n        pageTime = null,\n        pageWatched = false,\n        watchCreate = false,\n        watchEdit = false,\n        minorEdits = false,\n        editToken = null,\n        is_rtl = false,\n        serverTime = null,\n        lastRevId = null,\n        pageTextRevId = null,\n        conflictingUser = null,\n        newDOM = false;\n\n    function CategoryEditor() {\n        this.initialize.apply(this, arguments);\n    }\n\n    function setPage(json) {\n        var startTime = null;\n        if (json && json.query) {\n            if (json.query.pages) {\n                var page = json.query.pages[!conf.wgArticleId ? \"-1\" : String(conf.wgArticleId)];\n                if (page) {\n                    if (page.revisions && page.revisions.length) {\n                        pageText = page.revisions[0][\"*\"];\n                        if (page.revisions[0].timestamp) pageTime = page.revisions[0].timestamp.replace(/\\D/g, \"\");\n                        if (page.revisions[0].revid) pageTextRevId = page.revisions[0].revid;\n                        if (page.revisions.length > 1) conflictingUser = page.revisions[1].user;\n                    }\n                    if (page.lastrevid) lastRevId = page.lastrevid;\n                    if (page.starttimestamp) startTime = page.starttimestamp.replace(/\\D/g, \"\");\n                    pageWatched = typeof page.watched === \"string\";\n                    editToken = page.edittoken;\n                    if (page.langlinks && (!json[\"query-continue\"] || !json[\"query-continue\"].langlinks)) {\n                        var re = \"\";\n                        for (var i = 0; i < page.langlinks.length; i++) re += (i > 0 ? \"|\" : \"\") + page.langlinks[i].lang.replace(/([\\\\^$.?*+()])/g, \"\\\\$1\");\n                        if (re.length) interlanguageRE = new RegExp(\"((^|\\\\n\\\\r?)(\\\\[\\\\[\\\\s*(\" + re + \")\\\\s*:[^\\\\]]+\\\\]\\\\]\\\\s*))+$\");\n                    }\n                }\n            }\n            if (json.query.general) {\n                HC.capitalizePageNames = json.query.general[\"case\"] === \"first-letter\";\n                if (json.query.general.time && !startTime) startTime = json.query.general.time.replace(/\\D/g, \"\");\n            }\n            serverTime = startTime;\n            if (json.query.userinfo && json.query.userinfo.options) {\n                watchCreate = !HC.dont_add_to_watchlist && json.query.userinfo.options.watchcreations === \"1\";\n                watchEdit = !HC.dont_add_to_watchlist && json.query.userinfo.options.watchdefault === \"1\";\n                minorEdits = json.query.userinfo.options.minordefault === 1;\n                if (minorEdits) HC.single_minor = true;\n            }\n        }\n    }\n    var saveInProgress = false;\n\n    function initiateEdit(doEdit, failure) {\n        if (saveInProgress) return;\n        saveInProgress = true;\n        var oldButtonState;\n        if (commitButton) {\n            oldButtonState = commitButton.disabled;\n            commitButton.disabled = true;\n        }\n\n        function fail() {\n            saveInProgress = false;\n            if (commitButton) commitButton.disabled = oldButtonState;\n            failure.apply(this, arguments);\n        }\n        $.getJSON(conf.wgServer + conf.wgScriptPath + \"/api.php?\" + \"format=json&action=query&rawcontinue=&titles=\" + encodeURIComponent(conf.wgPageName) + \"&prop=info%7Crevisions%7Clanglinks&inprop=watched&intoken=edit&rvprop=content%7Ctimestamp%7Cids%7Cuser&lllimit=500\" + \"&rvlimit=2&rvdir=newer&rvstartid=\" + conf.wgCurRevisionId + \"&meta=siteinfo%7Cuserinfo&uiprop=options\", function(json) {\n            setPage(json);\n            doEdit(fail);\n        }).fail(function(req) {\n            fail(req.status + \" \" + req.statusText);\n        });\n    }\n\n    function multiChangeMsg(count) {\n        var msg = HC.messages.multi_change;\n        if (typeof msg !== \"string\" && msg.length)\n            if (mw.language && mw.language.convertPlural) {\n                msg = mw.language.convertPlural(count, msg);\n            } else {\n                msg = msg[msg.length - 1];\n            }\n        return substitute(msg, [null, String(count)]);\n    }\n\n    function currentTimestamp() {\n        var now = new Date();\n        var ts = String(now.getUTCFullYear());\n\n        function two(s) {\n            return s.substr(s.length - 2);\n        }\n        ts += two(\"0\" + (now.getUTCMonth() + 1)) + two(\"0\" + now.getUTCDate()) + two(\"00\" + now.getUTCHours()) + two(\"00\" + now.getUTCMinutes()) + two(\"00\" + now.getUTCSeconds());\n        return ts;\n    }\n\n    function performChanges(failure, singleEditor) {\n        if (pageText === null) {\n            failure(HC.messages.multi_error);\n            return;\n        }\n        if (HC.messages.cat_keychange.indexOf(\"$2\") < 0) HC.messages.cat_keychange += '\"$2\"';\n        if (!HC.messages.short_catchange) HC.messages.short_catchange = \"[[\" + HC.category_canonical + \":$1]]\";\n        var action;\n        var selfEditConflict = (lastRevId !== null && lastRevId !== conf.wgCurRevisionId || pageTextRevId !== null && pageTextRevId !== conf.wgCurRevisionId) && conflictingUser && conflictingUser === conf.wgUserName;\n        if (singleEditor && !singleEditor.noCommit && !HC.no_autocommit && editToken && !selfEditConflict) {\n            commitForm.wpEditToken.value = editToken;\n            action = commitForm.wpDiff;\n            if (action) action.name = action.value = \"wpSave\";\n        } else {\n            action = commitForm.wpSave;\n            if (action) action.name = action.value = \"wpDiff\";\n        }\n        var result = {\n                text: pageText\n            },\n            changed = [],\n            added = [],\n            deleted = [],\n            changes = 0,\n            toEdit = singleEditor ? [singleEditor] : editors,\n            error = null,\n            edit, i;\n        for (i = 0; i < toEdit.length; i++) {\n            edit = toEdit[i];\n            if (edit.state === CategoryEditor.CHANGED) {\n                result = change_category(result.text, edit.originalCategory, edit.currentCategory, edit.currentKey, edit.currentHidden);\n                if (!result.error) {\n                    changes++;\n                    if (!edit.originalCategory || !edit.originalCategory.length) {\n                        added.push(edit.currentCategory);\n                    } else {\n                        changed.push({\n                            from: edit.originalCategory,\n                            to: edit.currentCategory\n                        });\n                    }\n                } else if (error === null) {\n                    error = result.error;\n                }\n            } else if (edit.state === CategoryEditor.DELETED && edit.originalCategory && edit.originalCategory.length) {\n                result = change_category(result.text, edit.originalCategory, null, null, false);\n                if (!result.error) {\n                    changes++;\n                    deleted.push(edit.originalCategory);\n                } else if (error === null) {\n                    error = result.error;\n                }\n            }\n        }\n        if (error !== null) {\n            action = commitForm.wpSave;\n            if (action) action.name = action.value = \"wpDiff\";\n        }\n        commitForm.wpMinoredit.checked = minorEdits;\n        commitForm.wpWatchthis.checked = !conf.wgArticleId && watchCreate || watchEdit || pageWatched;\n        if (conf.wgArticleId || !!singleEditor) {\n            if (action && action.value === \"wpSave\") {\n                if (HC.changeTag) {\n                    commitForm.wpChangeTags.value = HC.changeTag;\n                    HC.messages.using = \"\";\n                    HC.messages.prefix = \"\";\n                }\n            } else {\n                commitForm.wpAutoSummary.value = HC.changeTag;\n            }\n            if (changes === 1) {\n                if (result.summary && result.summary.length) commitForm.wpSummary.value = HC.messages.prefix + result.summary.join(HC.messages.separator) + HC.messages.using;\n                commitForm.wpMinoredit.checked = HC.single_minor || minorEdits;\n            } else if (changes) {\n                var summary = [];\n                var shortSummary = [];\n                for (i = 0; i < deleted.length; i++) summary.push(\"-\" + substitute(HC.messages.short_catchange, [null, deleted[i]]));\n                if (deleted.length === 1) shortSummary.push(\"-\" + substitute(HC.messages.short_catchange, [null, deleted[0]]));\n                else if (deleted.length) shortSummary.push(\"- \" + multiChangeMsg(deleted.length));\n                for (i = 0; i < added.length; i++) summary.push(\"+\" + substitute(HC.messages.short_catchange, [null, added[i]]));\n                if (added.length === 1) shortSummary.push(\"+\" + substitute(HC.messages.short_catchange, [null, added[0]]));\n                else if (added.length) shortSummary.push(\"+ \" + multiChangeMsg(added.length));\n                var arrow = is_rtl ? \"\u2190\" : \"\u2192\";\n                for (i = 0; i < changed.length; i++) {\n                    if (changed[i].from !== changed[i].to) {\n                        summary.push(\"\u00b1\" + substitute(HC.messages.short_catchange, [null, changed[i].from]) + arrow + substitute(HC.messages.short_catchange, [null, changed[i].to]));\n                    } else {\n                        summary.push(\"\u00b1\" + substitute(HC.messages.short_catchange, [null, changed[i].from]));\n                    }\n                }\n                if (changed.length === 1) {\n                    if (changed[0].from !== changed[0].to) {\n                        shortSummary.push(\"\u00b1\" + substitute(HC.messages.short_catchange, [null, changed[0].from]) + arrow + substitute(HC.messages.short_catchange, [null, changed[0].to]));\n                    } else {\n                        shortSummary.push(\"\u00b1\" + substitute(HC.messages.short_catchange, [null, changed[0].from]));\n                    }\n                } else if (changed.length) {\n                    shortSummary.push(\"\u00b1 \" + multiChangeMsg(changed.length));\n                }\n                if (summary.length) {\n                    summary = summary.join(HC.messages.separator);\n                    if (summary.length > 200 - HC.messages.prefix.length - HC.messages.using.length) summary = shortSummary.join(HC.messages.separator);\n                    commitForm.wpSummary.value = HC.messages.prefix + summary + HC.messages.using;\n                }\n            }\n        }\n        commitForm.wpTextbox1.value = result.text;\n        commitForm.wpStarttime.value = serverTime || currentTimestamp();\n        commitForm.wpEdittime.value = pageTime || commitForm.wpStarttime.value;\n        if (selfEditConflict) commitForm.oldid.value = String(pageTextRevId || conf.wgCurRevisionId);\n        commitForm.hcCommit.click();\n    }\n\n    function resolveOne(page, toResolve) {\n        var cats = page.categories,\n            lks = page.links,\n            is_dab = false,\n            is_redir = typeof page.redirect === \"string\",\n            is_hidden = page.categoryinfo && typeof page.categoryinfo.hidden === \"string\",\n            is_missing = typeof page.missing === \"string\",\n            i;\n        for (i = 0; i < toResolve.length; i++) {\n            if (i && toResolve[i].dabInputCleaned !== page.title.substring(page.title.indexOf(\":\") + 1)) continue;\n            toResolve[i].currentHidden = is_hidden;\n            toResolve[i].inputExists = !is_missing;\n            toResolve[i].icon.src = is_missing ? HC.existsNo : HC.existsYes;\n        }\n        if (is_missing) return;\n        if (!is_redir && cats && (HC.disambig_category || HC.redir_category)) {\n            for (var c = 0; c < cats.length; c++) {\n                var cat = cats[c].title;\n                if (cat) {\n                    cat = cat.substring(cat.indexOf(\":\") + 1).replace(/_/g, \" \");\n                    if (cat === HC.disambig_category) {\n                        is_dab = true;\n                        break;\n                    } else if (cat === HC.redir_category) {\n                        is_redir = true;\n                        break;\n                    }\n                }\n            }\n        }\n        if (!is_redir && !is_dab) return;\n        if (!lks || !lks.length) return;\n        var titles = [];\n        for (i = 0; i < lks.length; i++) {\n            if (lks[i].ns === 14 && lks[i].title && lks[i].title.length) {\n                var match = lks[i].title;\n                match = match.substring(match.indexOf(\":\") + 1);\n                if (!HC.blacklist || !HC.blacklist.test(match)) titles.push(match);\n            }\n        }\n        if (!titles.length) return;\n        for (i = 0; i < toResolve.length; i++) {\n            if (i && toResolve[i].dabInputCleaned !== page.title.substring(page.title.indexOf(\":\") + 1)) continue;\n            toResolve[i].inputExists = true;\n            toResolve[i].icon.src = HC.existsYes;\n            if (titles.length > 1) {\n                toResolve[i].dab = titles;\n            } else {\n                toResolve[i].text.value = titles[0] + (toResolve[i].currentKey !== null ? \"|\" + toResolve[i].currentKey : \"\");\n            }\n        }\n    }\n\n    function resolveRedirects(toResolve, params) {\n        if (!params || !params.query || !params.query.pages) return;\n        for (var p in params.query.pages) resolveOne(params.query.pages[p], toResolve);\n    }\n\n    function resolveMulti(toResolve, callback) {\n        var i;\n        for (i = 0; i < toResolve.length; i++) {\n            toResolve[i].dab = null;\n            toResolve[i].dabInput = toResolve[i].lastInput;\n        }\n        if (noSuggestions) {\n            callback(toResolve);\n            return;\n        }\n        var args = \"action=query&prop=info%7Clinks%7Ccategories%7Ccategoryinfo&plnamespace=14\" + \"&pllimit=\" + toResolve.length * 10 + \"&cllimit=\" + toResolve.length * 10 + \"&format=json&titles=\";\n        for (i = 0; i < toResolve.length; i++) {\n            var v = toResolve[i].dabInput;\n            v = replaceShortcuts(v, HC.shortcuts);\n            toResolve[i].dabInputCleaned = v;\n            args += encodeURIComponent(\"Category:\" + v);\n            if (i + 1 < toResolve.length) args += \"%7C\";\n        }\n        $.getJSON(conf.wgServer + conf.wgScriptPath + \"/api.php?\" + args, function(json) {\n            resolveRedirects(toResolve, json);\n            callback(toResolve);\n        }).fail(function(req) {\n            if (!req) noSuggestions = true;\n            callback(toResolve);\n        });\n    }\n\n    function makeActive(which) {\n        if (which.is_active) return;\n        for (var i = 0; i < editors.length; i++)\n            if (editors[i] !== which) editors[i].inactivate();\n        which.is_active = true;\n        if (which.dab) {\n            showDab(which);\n        } else {\n            var expectedInput = which.lastRealInput || which.lastInput || \"\";\n            var actualValue = which.text.value || \"\";\n            if (!expectedInput.length && actualValue.length || expectedInput.length && actualValue.indexOf(expectedInput)) {\n                which.showsList = false;\n                var v = actualValue.split(\"|\");\n                which.lastRealInput = which.lastInput = v[0];\n                if (v.length > 1) which.currentKey = v[1];\n                if (which.lastSelection) {\n                    which.lastSelection = {\n                        start: v[0].length,\n                        end: v[0].length\n                    };\n                }\n            }\n            if (which.showsList) which.displayList();\n            if (which.lastSelection) {\n                if (is_webkit) {\n                    window.setTimeout(function() {\n                        which.setSelection(which.lastSelection.start, which.lastSelection.end);\n                    }, 1);\n                } else {\n                    which.setSelection(which.lastSelection.start, which.lastSelection.end);\n                }\n            }\n        }\n    }\n\n    function showDab(which) {\n        if (!which.is_active) {\n            makeActive(which);\n        } else {\n            which.showSuggestions(which.dab, false, null, null);\n            which.dab = null;\n        }\n    }\n\n    function multiSubmit() {\n        var toResolve = [];\n        for (var i = 0; i < editors.length; i++)\n            if (editors[i].state === CategoryEditor.CHANGE_PENDING || editors[i].state === CategoryEditor.OPEN) toResolve.push(editors[i]);\n        if (!toResolve.length) {\n            initiateEdit(function(failure) {\n                performChanges(failure);\n            }, function(msg) {\n                alert(msg);\n            });\n            return;\n        }\n        resolveMulti(toResolve, function(resolved) {\n            var firstDab = null;\n            var dontChange = false;\n            for (var i = 0; i < resolved.length; i++) {\n                if (resolved[i].lastInput !== resolved[i].dabInput) {\n                    dontChange = true;\n                } else {\n                    if (resolved[i].dab) {\n                        if (!firstDab) firstDab = resolved[i];\n                    } else {\n                        if (resolved[i].acceptCheck(true)) resolved[i].commit();\n                    }\n                }\n            }\n            if (firstDab) {\n                showDab(firstDab);\n            } else if (!dontChange) {\n                initiateEdit(function(failure) {\n                    performChanges(failure);\n                }, function(msg) {\n                    alert(msg);\n                });\n            }\n        });\n    }\n\n    function setMultiInput() {\n        if (commitButton || onUpload) return;\n        commitButton = make(\"input\");\n        commitButton.type = \"button\";\n        commitButton.value = HC.messages.commit;\n        commitButton.onclick = multiSubmit;\n        if (multiSpan) multiSpan.parentNode.replaceChild(commitButton, multiSpan);\n        else catLine.appendChild(commitButton);\n    }\n\n    function checkMultiInput() {\n        if (!commitButton) return;\n        var hasChanges = false;\n        for (var i = 0; i < editors.length; i++) {\n            if (editors[i].state !== CategoryEditor.UNCHANGED) {\n                hasChanges = true;\n                break;\n            }\n        }\n        commitButton.disabled = !hasChanges;\n    }\n    var suggestionEngines = {\n        opensearch: {\n            uri: \"/api.php?format=json&action=opensearch&namespace=14&limit=30&search=Category:$1\",\n            handler: function(queryResult, queryKey) {\n                if (queryResult && queryResult.length >= 2) {\n                    var key = queryResult[0].substring(queryResult[0].indexOf(\":\") + 1);\n                    var titles = queryResult[1];\n                    var exists = false;\n                    if (!cat_prefix) cat_prefix = new RegExp(\"^(\" + HC.category_regexp + \"):\");\n                    for (var i = 0; i < titles.length; i++) {\n                        cat_prefix.lastIndex = 0;\n                        var m = cat_prefix.exec(titles[i]);\n                        if (m && m.length > 1) {\n                            titles[i] = titles[i].substring(titles[i].indexOf(\":\") + 1);\n                            if (key === titles[i]) exists = true;\n                        } else {\n                            titles.splice(i, 1);\n                            i--;\n                        }\n                    }\n                    titles.exists = exists;\n                    if (queryKey !== key) titles.normalized = key;\n                    return titles;\n                }\n                return null;\n            }\n        },\n        internalsearch: {\n            uri: \"/api.php?format=json&action=query&list=allpages&apnamespace=14&aplimit=30&apfrom=$1&apprefix=$1\",\n            handler: function(queryResult) {\n                if (queryResult && queryResult.query && queryResult.query.allpages) {\n                    var titles = queryResult.query.allpages;\n                    for (var i = 0; i < titles.length; i++) titles[i] = titles[i].title.substring(titles[i].title.indexOf(\":\") + 1);\n                    return titles;\n                }\n                return null;\n            }\n        },\n        exists: {\n            uri: \"/api.php?format=json&action=query&prop=info&titles=Category:$1\",\n            handler: function(queryResult, queryKey) {\n                if (queryResult && queryResult.query && queryResult.query.pages && !queryResult.query.pages[-1]) {\n                    for (var p in queryResult.query.pages) {\n                        var title = queryResult.query.pages[p].title;\n                        title = title.substring(title.indexOf(\":\") + 1);\n                        var titles = [title];\n                        titles.exists = true;\n                        if (queryKey !== title) titles.normalized = title;\n                        return titles;\n                    }\n                }\n                return null;\n            }\n        },\n        subcategories: {\n            uri: \"/api.php?format=json&action=query&list=categorymembers&cmtype=subcat&cmlimit=max&cmtitle=Category:$1\",\n            handler: function(queryResult) {\n                if (queryResult && queryResult.query && queryResult.query.categorymembers) {\n                    var titles = queryResult.query.categorymembers;\n                    for (var i = 0; i < titles.length; i++) titles[i] = titles[i].title.substring(titles[i].title.indexOf(\":\") + 1);\n                    return titles;\n                }\n                return null;\n            }\n        },\n        parentcategories: {\n            uri: \"/api.php?format=json&action=query&prop=categories&titles=Category:$1&cllimit=max\",\n            handler: function(queryResult) {\n                if (queryResult && queryResult.query && queryResult.query.pages) {\n                    for (var p in queryResult.query.pages) {\n                        if (queryResult.query.pages[p].categories) {\n                            var titles = queryResult.query.pages[p].categories;\n                            for (var i = 0; i < titles.length; i++) titles[i] = titles[i].title.substring(titles[i].title.indexOf(\":\") + 1);\n                            return titles;\n                        }\n                    }\n                }\n                return null;\n            }\n        }\n    };\n    var suggestionConfigs = {\n        searchindex: {\n            name: \"Search index\",\n            engines: [\"opensearch\"],\n            cache: {},\n            show: true,\n            temp: false,\n            noCompletion: false\n        },\n        pagelist: {\n            name: \"Page list\",\n            engines: [\"internalsearch\", \"exists\"],\n            cache: {},\n            show: true,\n            temp: false,\n            noCompletion: false\n        },\n        combined: {\n            name: \"Combined search\",\n            engines: [\"opensearch\", \"internalsearch\"],\n            cache: {},\n            show: true,\n            temp: false,\n            noCompletion: false\n        },\n        subcat: {\n            name: \"Subcategories\",\n            engines: [\"subcategories\"],\n            cache: {},\n            show: true,\n            temp: true,\n            noCompletion: true\n        },\n        parentcat: {\n            name: \"Parent categories\",\n            engines: [\"parentcategories\"],\n            cache: {},\n            show: true,\n            temp: true,\n            noCompletion: true\n        }\n    };\n    CategoryEditor.UNCHANGED = 0;\n    CategoryEditor.OPEN = 1;\n    CategoryEditor.CHANGE_PENDING = 2;\n    CategoryEditor.CHANGED = 3;\n    CategoryEditor.DELETED = 4;\n    var dummyElement = make(\"\u00a0\", true);\n\n    function forceRedraw() {\n        if (dummyElement.parentNode) document.body.removeChild(dummyElement);\n        else document.body.appendChild(dummyElement);\n    }\n    var BS = 8,\n        TAB = 9,\n        RET = 13,\n        ESC = 27,\n        SPACE = 32,\n        PGUP = 33,\n        PGDOWN = 34,\n        UP = 38,\n        DOWN = 40,\n        DEL = 46,\n        IME = 229;\n    CategoryEditor.prototype = {\n        initialize: function(line, span, after, key, is_hidden) {\n            if (!span) {\n                this.isAddCategory = true;\n                this.originalCategory = \"\";\n                this.originalKey = null;\n                this.originalExists = false;\n                if (!newDOM) {\n                    span = make(\"span\");\n                    span.className = \"noprint\";\n                    if (key) {\n                        span.appendChild(make(\" | \", true));\n                        if (after) {\n                            after.parentNode.insertBefore(span, after.nextSibling);\n                            after = after.nextSibling;\n                        } else {\n                            line.appendChild(span);\n                        }\n                    } else if (line.firstChild) {\n                        span.appendChild(make(\" \", true));\n                        line.appendChild(span);\n                    }\n                }\n                this.linkSpan = make(\"span\");\n                this.linkSpan.className = \"noprint nopopups hotcatlink\";\n                var lk = make(\"a\");\n                lk.href = \"#catlinks\";\n                lk.onclick = this.open.bind(this);\n                lk.appendChild(make(HC.links.add, true));\n                lk.title = HC.tooltips.add;\n                this.linkSpan.appendChild(lk);\n                span = make(newDOM ? \"li\" : \"span\");\n                span.className = \"noprint\";\n                if (is_rtl) span.dir = \"rtl\";\n                span.appendChild(this.linkSpan);\n                if (after) after.parentNode.insertBefore(span, after.nextSibling);\n                else line.appendChild(span);\n                this.normalLinks = null;\n                this.undelLink = null;\n                this.catLink = null;\n            } else {\n                if (is_rtl) span.dir = \"rtl\";\n                this.isAddCategory = false;\n                this.catLink = span.firstChild;\n                this.originalCategory = after;\n                this.originalKey = key && key.length > 1 ? key.substr(1) : null;\n                this.originalExists = !hasClass(this.catLink, \"new\");\n                this.makeLinkSpan();\n                if (!this.originalExists && this.upDownLinks) this.upDownLinks.style.display = \"none\";\n                span.appendChild(this.linkSpan);\n            }\n            this.originalHidden = is_hidden;\n            this.line = line;\n            this.engine = HC.suggestions;\n            this.span = span;\n            this.currentCategory = this.originalCategory;\n            this.currentExists = this.originalExists;\n            this.currentHidden = this.originalHidden;\n            this.currentKey = this.originalKey;\n            this.state = CategoryEditor.UNCHANGED;\n            this.lastSavedState = CategoryEditor.UNCHANGED;\n            this.lastSavedCategory = this.originalCategory;\n            this.lastSavedKey = this.originalKey;\n            this.lastSavedExists = this.originalExists;\n            this.lastSavedHidden = this.originalHidden;\n            if (this.catLink && this.currentKey) this.catLink.title = this.currentKey;\n            editors[editors.length] = this;\n        },\n        makeLinkSpan: function() {\n            this.normalLinks = make(\"span\");\n            var lk = null;\n            if (this.originalCategory && this.originalCategory.length) {\n                lk = make(\"a\");\n                lk.href = \"#catlinks\";\n                lk.onclick = this.remove.bind(this);\n                lk.appendChild(make(HC.links.remove, true));\n                lk.title = HC.tooltips.remove;\n                this.normalLinks.appendChild(make(\" \", true));\n                this.normalLinks.appendChild(lk);\n            }\n            if (!HC.template_categories[this.originalCategory]) {\n                lk = make(\"a\");\n                lk.href = \"#catlinks\";\n                lk.onclick = this.open.bind(this);\n                lk.appendChild(make(HC.links.change, true));\n                lk.title = HC.tooltips.change;\n                this.normalLinks.appendChild(make(\" \", true));\n                this.normalLinks.appendChild(lk);\n                if (!noSuggestions && HC.use_up_down) {\n                    this.upDownLinks = make(\"span\");\n                    lk = make(\"a\");\n                    lk.href = \"#catlinks\";\n                    lk.onclick = this.down.bind(this);\n                    lk.appendChild(make(HC.links.down, true));\n                    lk.title = HC.tooltips.down;\n                    this.upDownLinks.appendChild(make(\" \", true));\n                    this.upDownLinks.appendChild(lk);\n                    lk = make(\"a\");\n                    lk.href = \"#catlinks\";\n                    lk.onclick = this.up.bind(this);\n                    lk.appendChild(make(HC.links.up, true));\n                    lk.title = HC.tooltips.up;\n                    this.upDownLinks.appendChild(make(\" \", true));\n                    this.upDownLinks.appendChild(lk);\n                    this.normalLinks.appendChild(this.upDownLinks);\n                }\n            }\n            this.linkSpan = make(\"span\");\n            this.linkSpan.className = \"noprint nopopups hotcatlink\";\n            this.linkSpan.appendChild(this.normalLinks);\n            this.undelLink = make(\"span\");\n            this.undelLink.className = \"nopopups hotcatlink\";\n            this.undelLink.style.display = \"none\";\n            lk = make(\"a\");\n            lk.href = \"#catlinks\";\n            lk.onclick = this.restore.bind(this);\n            lk.appendChild(make(HC.links.restore, true));\n            lk.title = HC.tooltips.restore;\n            this.undelLink.appendChild(make(\" \", true));\n            this.undelLink.appendChild(lk);\n            this.linkSpan.appendChild(this.undelLink);\n        },\n        invokeSuggestions: function(dont_autocomplete) {\n            if (this.engine && suggestionConfigs[this.engine] && suggestionConfigs[this.engine].temp && !dont_autocomplete) this.engine = HC.suggestions;\n            this.state = CategoryEditor.CHANGE_PENDING;\n            var self = this;\n            window.setTimeout(function() {\n                self.textchange(dont_autocomplete);\n            }, HC.suggest_delay);\n        },\n        makeForm: function() {\n            var form = make(\"form\");\n            form.method = \"POST\";\n            form.onsubmit = this.accept.bind(this);\n            this.form = form;\n            var self = this;\n            var text = make(\"input\");\n            text.type = \"text\";\n            text.size = HC.editbox_width;\n            if (!noSuggestions) {\n                text.onkeyup = function(evt) {\n                    var key = evt.keyCode || 0;\n                    if (self.ime && self.lastKey === IME && !self.usesComposition && (key === TAB || key === RET || key === ESC || key === SPACE)) self.ime = false;\n                    if (self.ime) return true;\n                    if (key === UP || key === DOWN || key === PGUP || key === PGDOWN) {\n                        if (self.keyCount === 0) return self.processKey(evt);\n                    } else {\n                        if (key === ESC && self.lastKey !== IME) {\n                            if (!self.resetKeySelection()) {\n                                self.cancel();\n                                return;\n                            }\n                        }\n                        self.invokeSuggestions(key === BS || key === DEL || key === ESC);\n                    }\n                    return true;\n                };\n                text.onkeydown = function(evt) {\n                    var key = evt.keyCode || 0;\n                    self.lastKey = key;\n                    self.keyCount = 0;\n                    if (!self.ime && key === IME && !self.usesComposition) {\n                        self.ime = true;\n                    } else if (self.ime && key !== IME && !(key >= 16 && key <= 20 || key >= 91 && key <= 93 || key === 144)) {\n                        self.ime = false;\n                    }\n                    if (self.ime) return true;\n                    if (key === RET) return self.accept(evt);\n                    return key === ESC ? evtKill(evt) : true;\n                };\n                text.onkeypress = function(evt) {\n                    self.keyCount++;\n                    return self.processKey(evt);\n                };\n                $(text).on(\"focus\", function() {\n                    makeActive(self);\n                });\n                $(text).on(text.onbeforedeactivate !== undefined && text.createTextRange ? \"beforedeactivate\" : \"blur\", this.saveView.bind(this));\n                try {\n                    $(text).on(\"compositionstart\", function() {\n                        self.lastKey = IME;\n                        self.usesComposition = true;\n                        self.ime = true;\n                    });\n                    $(text).on(\"compositionend\", function() {\n                        self.lastKey = IME;\n                        self.usesComposition = true;\n                        self.ime = false;\n                    });\n                    $(text).on(\"textInput\", function() {\n                        self.ime = false;\n                        self.invokeSuggestions(false);\n                    });\n                } catch (any) {}\n                $(text).on(\"blur\", function() {\n                    self.usesComposition = false;\n                    self.ime = false;\n                });\n            }\n            this.text = text;\n            this.icon = make(\"img\");\n            var list = null;\n            if (!noSuggestions) {\n                list = make(\"select\");\n                list.onclick = function() {\n                    if (self.highlightSuggestion(0)) self.textchange(false, true);\n                };\n                list.ondblclick = function(e) {\n                    if (self.highlightSuggestion(0)) self.accept(e);\n                };\n                list.onchange = function() {\n                    self.highlightSuggestion(0);\n                    self.text.focus();\n                };\n                list.onkeyup = function(evt) {\n                    if (evt.keyCode === ESC) {\n                        self.resetKeySelection();\n                        self.text.focus();\n                        window.setTimeout(function() {\n                            self.textchange(true);\n                        }, HC.suggest_delay);\n                    } else if (evt.keyCode === RET) {\n                        self.accept(evt);\n                    }\n                };\n                if (!HC.fixed_search) {\n                    var engineSelector = make(\"select\");\n                    for (var key in suggestionConfigs) {\n                        if (suggestionConfigs[key].show) {\n                            var opt = make(\"option\");\n                            opt.value = key;\n                            if (key === this.engine) opt.selected = true;\n                            opt.appendChild(make(suggestionConfigs[key].name, true));\n                            engineSelector.appendChild(opt);\n                        }\n                    }\n                    engineSelector.onchange = function() {\n                        self.engine = self.engineSelector.options[self.engineSelector.selectedIndex].value;\n                        self.text.focus();\n                        self.textchange(true, true);\n                    };\n                    this.engineSelector = engineSelector;\n                }\n            }\n            this.list = list;\n\n            function button_label(id, defaultText) {\n                var label = null;\n                if (onUpload && window.UFUI !== undefined && window.UIElements !== undefined && UFUI.getLabel instanceof Function) {\n                    try {\n                        label = UFUI.getLabel(id, true);\n                        while (label && label.nodeType !== 3) label = label.firstChild;\n                    } catch (ex) {\n                        label = null;\n                    }\n                }\n                if (!label || !label.data) return defaultText;\n                return label.data;\n            }\n            var OK = make(\"input\");\n            OK.type = \"button\";\n            OK.value = button_label(\"wpOkUploadLbl\", HC.messages.ok);\n            OK.onclick = this.accept.bind(this);\n            this.ok = OK;\n            var cancel = make(\"input\");\n            cancel.type = \"button\";\n            cancel.value = button_label(\"wpCancelUploadLbl\", HC.messages.cancel);\n            cancel.onclick = this.cancel.bind(this);\n            this.cancelButton = cancel;\n            var span = make(\"span\");\n            span.className = \"hotcatinput\";\n            span.style.position = \"relative\";\n            span.appendChild(text);\n            span.appendChild(make(\"\u00a0\", true));\n            span.style.whiteSpace = \"nowrap\";\n            if (list) span.appendChild(list);\n            if (this.engineSelector) span.appendChild(this.engineSelector);\n            if (!noSuggestions) span.appendChild(this.icon);\n            span.appendChild(OK);\n            span.appendChild(cancel);\n            form.appendChild(span);\n            form.style.display = \"none\";\n            this.span.appendChild(form);\n        },\n        display: function(evt) {\n            if (this.isAddCategory && !onUpload) {\n                new CategoryEditor(this.line, null, this.span, true);\n            }\n            if (!commitButton && !onUpload) {\n                for (var i = 0; i < editors.length; i++) {\n                    if (editors[i].state !== CategoryEditor.UNCHANGED) {\n                        setMultiInput();\n                        break;\n                    }\n                }\n            }\n            if (!this.form) this.makeForm();\n            if (this.list) this.list.style.display = \"none\";\n            if (this.engineSelector) this.engineSelector.style.display = \"none\";\n            this.currentCategory = this.lastSavedCategory;\n            this.currentExists = this.lastSavedExists;\n            this.currentHidden = this.lastSavedHidden;\n            this.currentKey = this.lastSavedKey;\n            this.icon.src = this.currentExists ? HC.existsYes : HC.existsNo;\n            this.text.value = this.currentCategory + (this.currentKey !== null ? \"|\" + this.currentKey : \"\");\n            this.originalState = this.state;\n            this.lastInput = this.currentCategory;\n            this.inputExists = this.currentExists;\n            this.state = this.state === CategoryEditor.UNCHANGED ? CategoryEditor.OPEN : CategoryEditor.CHANGE_PENDING;\n            this.lastSelection = {\n                start: this.currentCategory.length,\n                end: this.currentCategory.length\n            };\n            this.showsList = false;\n            if (this.catLink) this.catLink.style.display = \"none\";\n            this.linkSpan.style.display = \"none\";\n            this.form.style.display = \"inline\";\n            this.ok.disabled = false;\n            var result = evtKill(evt);\n            this.text.focus();\n            this.text.readOnly = false;\n            checkMultiInput();\n            return result;\n        },\n        show: function(evt, engine, readOnly) {\n            var result = this.display(evt);\n            var v = this.lastSavedCategory;\n            if (!v.length) return result;\n            this.text.readOnly = !!readOnly;\n            this.engine = engine;\n            this.textchange(false, true);\n            forceRedraw();\n            return result;\n        },\n        open: function(evt) {\n            return this.show(evt, this.engine && suggestionConfigs[this.engine].temp ? HC.suggestions : this.engine);\n        },\n        down: function(evt) {\n            return this.show(evt, \"subcat\", true);\n        },\n        up: function(evt) {\n            return this.show(evt, \"parentcat\");\n        },\n        cancel: function() {\n            if (this.isAddCategory && !onUpload) {\n                this.removeEditor();\n                return;\n            }\n            this.inactivate();\n            this.form.style.display = \"none\";\n            if (this.catLink) this.catLink.style.display = \"\";\n            this.linkSpan.style.display = \"\";\n            this.state = this.originalState;\n            this.currentCategory = this.lastSavedCategory;\n            this.currentKey = this.lastSavedKey;\n            this.currentExists = this.lastSavedExists;\n            this.currentHidden = this.lastSavedHidden;\n            if (this.catLink)\n                if (this.currentKey && this.currentKey.length) {\n                    this.catLink.title = this.currentKey;\n                } else {\n                    this.catLink.title = \"\";\n                }\n            if (this.state === CategoryEditor.UNCHANGED) {\n                if (this.catLink) this.catLink.style.backgroundColor = \"transparent\";\n            } else {\n                if (!onUpload) {\n                    try {\n                        this.catLink.style.backgroundColor = HC.bg_changed;\n                    } catch (ex) {}\n                }\n            }\n            checkMultiInput();\n            forceRedraw();\n        },\n        removeEditor: function() {\n            if (!newDOM) {\n                var next = this.span.nextSibling;\n                if (next) next.parentNode.removeChild(next);\n            }\n            this.span.parentNode.removeChild(this.span);\n            for (var i = 0; i < editors.length; i++) {\n                if (editors[i] === this) {\n                    editors.splice(i, 1);\n                    break;\n                }\n            }\n            checkMultiInput();\n        },\n        rollback: function(evt) {\n            this.undoLink.parentNode.removeChild(this.undoLink);\n            this.undoLink = null;\n            this.currentCategory = this.originalCategory;\n            this.currentKey = this.originalKey;\n            this.currentExists = this.originalExists;\n            this.currentHidden = this.originalHidden;\n            this.lastSavedCategory = this.originalCategory;\n            this.lastSavedKey = this.originalKey;\n            this.lastSavedExists = this.originalExists;\n            this.lastSavedHidden = this.originalHidden;\n            this.state = CategoryEditor.UNCHANGED;\n            if (!this.currentCategory || !this.currentCategory.length) {\n                this.removeEditor();\n            } else {\n                this.catLink.removeChild(this.catLink.firstChild);\n                this.catLink.appendChild(make(this.currentCategory, true));\n                this.catLink.href = wikiPagePath(HC.category_canonical + \":\" + this.currentCategory);\n                this.catLink.title = this.currentKey || \"\";\n                this.catLink.className = this.currentExists ? \"\" : \"new\";\n                this.catLink.style.backgroundColor = \"transparent\";\n                if (this.upDownLinks) this.upDownLinks.style.display = this.currentExists ? \"\" : \"none\";\n                checkMultiInput();\n            }\n            return evtKill(evt);\n        },\n        inactivate: function() {\n            if (this.list) this.list.style.display = \"none\";\n            if (this.engineSelector) this.engineSelector.style.display = \"none\";\n            this.is_active = false;\n        },\n        acceptCheck: function(dontCheck) {\n            this.sanitizeInput();\n            var value = this.text.value.split(\"|\");\n            var key = null;\n            if (value.length > 1) key = value[1];\n            var v = value[0].replace(/_/g, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            if (HC.capitalizePageNames) v = capitalize(v);\n            this.lastInput = v;\n            v = replaceShortcuts(v, HC.shortcuts);\n            if (!v.length) {\n                this.cancel();\n                return false;\n            }\n            if (!dontCheck && (conf.wgNamespaceNumber === 14 && v === conf.wgTitle || HC.blacklist && HC.blacklist.test(v))) {\n                this.cancel();\n                return false;\n            }\n            this.currentCategory = v;\n            this.currentKey = key;\n            this.currentExists = this.inputExists;\n            return true;\n        },\n        accept: function(evt) {\n            this.noCommit = (evtKeys(evt) & 1) !== 0;\n            var result = evtKill(evt);\n            if (this.acceptCheck()) {\n                var toResolve = [this];\n                var original = this.currentCategory;\n                resolveMulti(toResolve, function(resolved) {\n                    if (resolved[0].dab) {\n                        showDab(resolved[0]);\n                    } else {\n                        if (resolved[0].acceptCheck(true)) {\n                            resolved[0].commit(resolved[0].currentCategory !== original ? HC.messages.cat_resolved.replace(/\\$1/g, original) : null);\n                        }\n                    }\n                });\n            }\n            return result;\n        },\n        close: function() {\n            if (!this.catLink) {\n                this.catLink = make(\"a\");\n                this.catLink.appendChild(make(\"foo\", true));\n                this.catLink.style.display = \"none\";\n                this.span.insertBefore(this.catLink, this.span.firstChild.nextSibling);\n            }\n            this.catLink.removeChild(this.catLink.firstChild);\n            this.catLink.appendChild(make(this.currentCategory, true));\n            this.catLink.href = wikiPagePath(HC.category_canonical + \":\" + this.currentCategory);\n            this.catLink.className = this.currentExists ? \"\" : \"new\";\n            this.lastSavedCategory = this.currentCategory;\n            this.lastSavedKey = this.currentKey;\n            this.lastSavedExists = this.currentExists;\n            this.lastSavedHidden = this.currentHidden;\n            this.inactivate();\n            this.form.style.display = \"none\";\n            this.catLink.title = this.currentKey || \"\";\n            this.catLink.style.display = \"\";\n            if (this.isAddCategory) {\n                if (onUpload) {\n                    new CategoryEditor(this.line, null, this.span, true);\n                }\n                this.isAddCategory = false;\n                this.linkSpan.parentNode.removeChild(this.linkSpan);\n                this.makeLinkSpan();\n                this.span.appendChild(this.linkSpan);\n            }\n            if (!this.undoLink) {\n                var span = make(\"span\");\n                var lk = make(\"a\");\n                lk.href = \"#catlinks\";\n                lk.onclick = this.rollback.bind(this);\n                lk.appendChild(make(HC.links.undo, true));\n                lk.title = HC.tooltips.undo;\n                span.appendChild(make(\" \", true));\n                span.appendChild(lk);\n                this.normalLinks.appendChild(span);\n                this.undoLink = span;\n                if (!onUpload) {\n                    try {\n                        this.catLink.style.backgroundColor = HC.bg_changed;\n                    } catch (ex) {}\n                }\n            }\n            if (this.upDownLinks) this.upDownLinks.style.display = this.lastSavedExists ? \"\" : \"none\";\n            this.linkSpan.style.display = \"\";\n            this.state = CategoryEditor.CHANGED;\n            checkMultiInput();\n            forceRedraw();\n        },\n        commit: function() {\n            if (this.currentCategory === this.originalCategory && (this.currentKey === this.originalKey || this.currentKey === null && !this.originalKey.length) || conf.wgNamespaceNumber === 14 && this.currentCategory === conf.wgTitle || HC.blacklist && HC.blacklist.test(this.currentCategory)) {\n                this.cancel();\n                return;\n            }\n            if (commitButton || onUpload) {\n                this.close();\n            } else {\n                this.close();\n                var self = this;\n                initiateEdit(function(failure) {\n                    performChanges(failure, self);\n                }, function(msg) {\n                    alert(msg);\n                });\n            }\n        },\n        remove: function(evt) {\n            this.doRemove(evtKeys(evt) & 1);\n            return evtKill(evt);\n        },\n        doRemove: function(noCommit) {\n            if (this.isAddCategory) {\n                this.cancel();\n                return;\n            }\n            if (!commitButton && !onUpload) {\n                for (var i = 0; i < editors.length; i++) {\n                    if (editors[i].state !== CategoryEditor.UNCHANGED) {\n                        setMultiInput();\n                        break;\n                    }\n                }\n            }\n            if (commitButton) {\n                this.catLink.title = \"\";\n                this.catLink.style.cssText += \"; text-decoration : line-through !important;\";\n                try {\n                    this.catLink.style.backgroundColor = HC.bg_changed;\n                } catch (ex) {}\n                this.originalState = this.state;\n                this.state = CategoryEditor.DELETED;\n                this.normalLinks.style.display = \"none\";\n                this.undelLink.style.display = \"\";\n                checkMultiInput();\n            } else {\n                if (onUpload) {\n                    this.removeEditor();\n                } else {\n                    this.originalState = this.state;\n                    this.state = CategoryEditor.DELETED;\n                    this.noCommit = noCommit || HC.del_needs_diff;\n                    var self = this;\n                    initiateEdit(function(failure) {\n                        performChanges(failure, self);\n                    }, function(msg) {\n                        self.state = self.originalState;\n                        alert(msg);\n                    });\n                }\n            }\n        },\n        restore: function(evt) {\n            this.catLink.title = this.currentKey || \"\";\n            this.catLink.style.textDecoration = \"\";\n            this.state = this.originalState;\n            if (this.state === CategoryEditor.UNCHANGED) {\n                this.catLink.style.backgroundColor = \"transparent\";\n            } else {\n                try {\n                    this.catLink.style.backgroundColor = HC.bg_changed;\n                } catch (ex) {}\n            }\n            this.normalLinks.style.display = \"\";\n            this.undelLink.style.display = \"none\";\n            checkMultiInput();\n            return evtKill(evt);\n        },\n        selectEngine: function(engineName) {\n            if (!this.engineSelector) return;\n            for (var i = 0; i < this.engineSelector.options.length; i++) this.engineSelector.options[i].selected = this.engineSelector.options[i].value === engineName;\n        },\n        sanitizeInput: function() {\n            var v = this.text.value || \"\";\n            v = v.replace(/^(\\s|_)+/, \"\");\n            var re = new RegExp(\"^(\" + HC.category_regexp + \"):\");\n            if (re.test(v)) v = v.substring(v.indexOf(\":\") + 1).replace(/^(\\s|_)+/, \"\");\n            if (HC.capitalizePageNames) v = capitalize(v);\n            if (this.text.value !== null && this.text.value !== v) this.text.value = v;\n        },\n        makeCall: function(url, callbackObj, engine, queryKey, cleanKey) {\n            var cb = callbackObj,\n                e = engine,\n                v = queryKey,\n                z = cleanKey,\n                thisObj = this;\n\n            function done() {\n                cb.callsMade++;\n                if (cb.callsMade === cb.nofCalls) {\n                    if (cb.exists) cb.allTitles.exists = true;\n                    if (cb.normalized) cb.allTitles.normalized = cb.normalized;\n                    if (!cb.dontCache && !suggestionConfigs[cb.engineName].cache[z]) suggestionConfigs[cb.engineName].cache[z] = cb.allTitles;\n                    thisObj.text.readOnly = false;\n                    if (!cb.cancelled) thisObj.showSuggestions(cb.allTitles, cb.noCompletion, v, cb.engineName);\n                    if (cb === thisObj.callbackObj) thisObj.callbackObj = null;\n                    cb = undefined;\n                }\n            }\n            $.getJSON(url, function(json) {\n                var titles = e.handler(json, z);\n                if (titles && titles.length) {\n                    if (cb.allTitles === null) cb.allTitles = titles;\n                    else cb.allTitles = cb.allTitles.concat(titles);\n                    if (titles.exists) cb.exists = true;\n                    if (titles.normalized) cb.normalized = titles.normalized;\n                }\n                done();\n            }).fail(function(req) {\n                if (!req) noSuggestions = true;\n                cb.dontCache = true;\n                done();\n            });\n        },\n        callbackObj: null,\n        textchange: function(dont_autocomplete, force) {\n            makeActive(this);\n            this.sanitizeInput();\n            var v = this.text.value;\n            var pipe = v.indexOf(\"|\");\n            if (pipe >= 0) {\n                this.currentKey = v.substring(pipe + 1);\n                v = v.substring(0, pipe);\n            } else {\n                this.currentKey = null;\n            }\n            if (this.lastInput === v && !force) return;\n            if (this.lastInput !== v) checkMultiInput();\n            this.lastInput = v;\n            this.lastRealInput = v;\n            this.ok.disabled = v.length && HC.blacklist && HC.blacklist.test(v);\n            if (noSuggestions) {\n                if (this.list) this.list.style.display = \"none\";\n                if (this.engineSelector) this.engineSelector.style.display = \"none\";\n                if (this.icon) this.icon.style.display = \"none\";\n                return;\n            }\n            if (!v.length) {\n                this.showSuggestions([]);\n                return;\n            }\n            var cleanKey = v.replace(/[\\u200E\\u200F\\u202A-\\u202E]/g, \"\").replace(wikiTextBlankRE, \" \");\n            cleanKey = replaceShortcuts(cleanKey, HC.shortcuts);\n            cleanKey = cleanKey.replace(/^\\s+|\\s+$/g, \"\");\n            if (!cleanKey.length) {\n                this.showSuggestions([]);\n                return;\n            }\n            if (this.callbackObj) this.callbackObj.cancelled = true;\n            var engineName = suggestionConfigs[this.engine] ? this.engine : \"combined\";\n            dont_autocomplete = dont_autocomplete || suggestionConfigs[engineName].noCompletion;\n            if (suggestionConfigs[engineName].cache[cleanKey]) {\n                this.showSuggestions(suggestionConfigs[engineName].cache[cleanKey], dont_autocomplete, v, engineName);\n                return;\n            }\n            var engines = suggestionConfigs[engineName].engines;\n            this.callbackObj = {\n                allTitles: null,\n                callsMade: 0,\n                nofCalls: engines.length,\n                noCompletion: dont_autocomplete,\n                engineName: engineName\n            };\n            this.makeCalls(engines, this.callbackObj, v, cleanKey);\n        },\n        makeCalls: function(engines, cb, v, cleanKey) {\n            for (var j = 0; j < engines.length; j++) {\n                var engine = suggestionEngines[engines[j]];\n                var url = conf.wgServer + conf.wgScriptPath + engine.uri.replace(/\\$1/g, encodeURIComponent(cleanKey));\n                this.makeCall(url, cb, engine, v, cleanKey);\n            }\n        },\n        showSuggestions: function(titles, dontAutocomplete, queryKey, engineName) {\n            this.text.readOnly = false;\n            this.dab = null;\n            this.showsList = false;\n            if (!this.list) return;\n            if (noSuggestions) {\n                if (this.list) this.list.style.display = \"none\";\n                if (this.engineSelector) this.engineSelector.style.display = \"none\";\n                if (this.icon) this.icon.style.display = \"none\";\n                this.inputExists = true;\n                return;\n            }\n            this.engineName = engineName;\n            if (engineName) {\n                if (!this.engineSelector) this.engineName = null;\n            } else {\n                if (this.engineSelector) this.engineSelector.style.display = \"none\";\n            }\n            if (queryKey) {\n                if (this.lastInput.indexOf(queryKey)) return;\n                if (this.lastQuery && this.lastInput.indexOf(this.lastQuery) === 0 && this.lastQuery.length > queryKey.length) return;\n            }\n            this.lastQuery = queryKey;\n            var v = this.text.value.split(\"|\");\n            var key = v.length > 1 ? \"|\" + v[1] : \"\";\n            v = HC.capitalizePageNames ? capitalize(v[0]) : v[0];\n            var vNormalized = v;\n            var knownToExist = titles && titles.exists;\n            var i;\n            if (titles) {\n                if (titles.normalized && v.indexOf(queryKey) === 0) {\n                    vNormalized = titles.normalized + v.substring(queryKey.length);\n                }\n                var vLow = vNormalized.toLowerCase();\n                if (HC.blacklist) {\n                    for (i = 0; i < titles.length; i++) {\n                        if (HC.blacklist.test(titles[i])) {\n                            titles.splice(i, 1);\n                            i--;\n                        }\n                    }\n                }\n                titles.sort(function(a, b) {\n                    if (a === b) return 0;\n                    if (a.indexOf(b) === 0) return 1;\n                    if (b.indexOf(a) === 0) return -1;\n                    var prefixMatchA = a.indexOf(vNormalized) === 0 ? 1 : 0;\n                    var prefixMatchB = b.indexOf(vNormalized) === 0 ? 1 : 0;\n                    if (prefixMatchA !== prefixMatchB) return prefixMatchB - prefixMatchA;\n                    var aLow = a.toLowerCase(),\n                        bLow = b.toLowerCase();\n                    prefixMatchA = aLow.indexOf(vLow) === 0 ? 1 : 0;\n                    prefixMatchB = bLow.indexOf(vLow) === 0 ? 1 : 0;\n                    if (prefixMatchA !== prefixMatchB) return prefixMatchB - prefixMatchA;\n                    if (a < b) return -1;\n                    if (b < a) return 1;\n                    return 0;\n                });\n                for (i = 0; i < titles.length; i++) {\n                    if (i + 1 < titles.length && titles[i] === titles[i + 1] || conf.wgNamespaceNumber === 14 && titles[i] === conf.wgTitle) {\n                        titles.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n            if (!titles || !titles.length) {\n                if (this.list) this.list.style.display = \"none\";\n                if (this.engineSelector) this.engineSelector.style.display = \"none\";\n                if (engineName && suggestionConfigs[engineName] && !suggestionConfigs[engineName].temp) {\n                    if (this.icon) this.icon.src = HC.existsNo;\n                    this.inputExists = false;\n                }\n                return;\n            }\n            var firstTitle = titles[0];\n            var completed = this.autoComplete(firstTitle, v, vNormalized, key, dontAutocomplete);\n            var existing = completed || knownToExist || firstTitle === replaceShortcuts(v, HC.shortcuts);\n            if (engineName && suggestionConfigs[engineName] && !suggestionConfigs[engineName].temp) {\n                this.icon.src = existing ? HC.existsYes : HC.existsNo;\n                this.inputExists = existing;\n            }\n            if (completed) {\n                this.lastInput = firstTitle;\n                if (titles.length === 1) {\n                    this.list.style.display = \"none\";\n                    if (this.engineSelector) this.engineSelector.style.display = \"none\";\n                    return;\n                }\n            }\n            while (this.list.firstChild) this.list.removeChild(this.list.firstChild);\n            for (i = 0; i < titles.length; i++) {\n                var opt = make(\"option\");\n                opt.appendChild(make(titles[i], true));\n                opt.selected = completed && i === 0;\n                this.list.appendChild(opt);\n            }\n            this.displayList();\n        },\n        displayList: function() {\n            this.showsList = true;\n            if (!this.is_active) {\n                this.list.style.display = \"none\";\n                if (this.engineSelector) this.engineSelector.style.display = \"none\";\n                return;\n            }\n            var nofItems = this.list.options.length > HC.listSize ? HC.listSize : this.list.options.length;\n            if (nofItems <= 1) nofItems = 2;\n            this.list.size = nofItems;\n            this.list.style.align = is_rtl ? \"right\" : \"left\";\n            this.list.style.zIndex = 5;\n            this.list.style.position = \"absolute\";\n            var anchor = is_rtl ? \"right\" : \"left\";\n            var listh = 0;\n            if (this.list.style.display === \"none\") {\n                this.list.style.top = this.text.offsetTop + \"px\";\n                this.list.style[anchor] = \"-10000px\";\n                this.list.style.display = \"\";\n                listh = this.list.offsetHeight;\n                this.list.style.display = \"none\";\n            } else {\n                listh = this.list.offsetHeight;\n            }\n            var maxListHeight = listh;\n            if (nofItems < HC.listSize) maxListHeight = listh / nofItems * HC.listSize;\n\n            function viewport(what) {\n                if (is_webkit && !document.evaluate) {\n                    return window[\"inner\" + what];\n                }\n                var s = \"client\" + what;\n                if (window.opera) return document.body[s];\n                return (document.documentElement ? document.documentElement[s] : 0) || document.body[s] || 0;\n            }\n\n            function scroll_offset(what) {\n                var s = \"scroll\" + what;\n                var result = (document.documentElement ? document.documentElement[s] : 0) || document.body[s] || 0;\n                if (is_rtl && what === \"Left\") {\n                    if (result < 0) result = -result;\n                    if (!is_webkit) result = scroll_offset(\"Width\") - viewport(\"Width\") - result;\n                }\n                return result;\n            }\n\n            function position(node) {\n                if (node.getBoundingClientRect) {\n                    var box = node.getBoundingClientRect();\n                    return {\n                        x: Math.round(box.left + scroll_offset(\"Left\")),\n                        y: Math.round(box.top + scroll_offset(\"Top\"))\n                    };\n                }\n                var t = 0,\n                    l = 0;\n                do {\n                    t += node.offsetTop || 0;\n                    l += node.offsetLeft || 0;\n                    node = node.offsetParent;\n                } while (node);\n                return {\n                    x: l,\n                    y: t\n                };\n            }\n            var textPos = position(this.text),\n                nl = 0,\n                nt = 0,\n                offset = 0,\n                textBoxWidth = this.text.offsetWidth || this.text.clientWidth;\n            if (this.engineName) {\n                this.engineSelector.style.zIndex = 5;\n                this.engineSelector.style.position = \"absolute\";\n                this.engineSelector.style.width = textBoxWidth + \"px\";\n                if (this.engineSelector.style.display === \"none\") {\n                    this.engineSelector.style[anchor] = \"-10000px\";\n                    this.engineSelector.style.top = \"0\";\n                    this.engineSelector.style.display = \"\";\n                    offset = this.engineSelector.offsetHeight;\n                    this.engineSelector.style.display = \"none\";\n                } else {\n                    offset = this.engineSelector.offsetHeight;\n                }\n                this.engineSelector.style[anchor] = nl + \"px\";\n            }\n            if (textPos.y < maxListHeight + offset + 1) {\n                nt = this.text.offsetHeight + offset + 1;\n                if (this.engineName) this.engineSelector.style.top = this.text.offsetHeight + \"px\";\n            } else {\n                nt = -listh - offset - 1;\n                if (this.engineName) this.engineSelector.style.top = -(offset + 1) + \"px\";\n            }\n            this.list.style.top = nt + \"px\";\n            this.list.style.width = \"\";\n            this.list.style[anchor] = nl + \"px\";\n            if (this.engineName) {\n                this.selectEngine(this.engineName);\n                this.engineSelector.style.display = \"\";\n            }\n            this.list.style.display = \"block\";\n            if (this.list.offsetWidth < textBoxWidth) {\n                this.list.style.width = textBoxWidth + \"px\";\n                return;\n            }\n            var scroll = scroll_offset(\"Left\");\n            var view_w = viewport(\"Width\");\n            var w = this.list.offsetWidth;\n            var l_pos = position(this.list);\n            var left = l_pos.x;\n            var right = left + w;\n            if (left < scroll || right > scroll + view_w) {\n                if (w > view_w) {\n                    w = view_w;\n                    this.list.style.width = w + \"px\";\n                    if (is_rtl) left = right - w;\n                    else right = left + w;\n                }\n                var relative_offset = 0;\n                if (left < scroll) relative_offset = scroll - left;\n                else if (right > scroll + view_w) relative_offset = -(right - scroll - view_w);\n                if (is_rtl) relative_offset = -relative_offset;\n                if (relative_offset) this.list.style[anchor] = nl + relative_offset + \"px\";\n            }\n        },\n        autoComplete: function(newVal, actVal, normalizedActVal, key, dontModify) {\n            if (newVal === actVal) return true;\n            if (dontModify || this.ime || !this.canSelect()) return false;\n            if (newVal.indexOf(actVal)) {\n                if (normalizedActVal && newVal.indexOf(normalizedActVal) === 0) {\n                    if (this.lastRealInput === actVal) this.lastRealInput = normalizedActVal;\n                    actVal = normalizedActVal;\n                } else {\n                    return false;\n                }\n            }\n            this.text.focus();\n            this.text.value = newVal + key;\n            this.setSelection(actVal.length, newVal.length);\n            return true;\n        },\n        canSelect: function() {\n            return this.text.setSelectionRange || this.text.createTextRange || this.text.selectionStart !== undefined && this.text.selectionEnd !== undefined;\n        },\n        setSelection: function(from, to) {\n            if (!this.text.value) return;\n            if (this.text.setSelectionRange) {\n                this.text.setSelectionRange(from, to);\n            } else if (this.text.selectionStart !== undefined) {\n                if (from > this.text.selectionStart) {\n                    this.text.selectionEnd = to;\n                    this.text.selectionStart = from;\n                } else {\n                    this.text.selectionStart = from;\n                    this.text.selectionEnd = to;\n                }\n            } else if (this.text.createTextRange) {\n                var new_selection = this.text.createTextRange();\n                new_selection.move(\"character\", from);\n                new_selection.moveEnd(\"character\", to - from);\n                new_selection.select();\n            }\n        },\n        getSelection: function() {\n            var from = 0,\n                to = 0;\n            if (!this.text.value) {} else if (this.text.selectionStart !== undefined) {\n                from = this.text.selectionStart;\n                to = this.text.selectionEnd;\n            } else if (document.selection && document.selection.createRange) {\n                var rng = document.selection.createRange().duplicate();\n                if (rng.parentElement() === this.text) {\n                    try {\n                        var textRng = this.text.createTextRange();\n                        textRng.move(\"character\", 0);\n                        textRng.setEndPoint(\"EndToEnd\", rng);\n                        to = textRng.text.length;\n                        textRng.setEndPoint(\"EndToStart\", rng);\n                        from = textRng.text.length;\n                    } catch (notFocused) {\n                        from = this.text.value.length;\n                        to = from;\n                    }\n                }\n            }\n            return {\n                start: from,\n                end: to\n            };\n        },\n        saveView: function() {\n            this.lastSelection = this.getSelection();\n        },\n        processKey: function(evt) {\n            var dir = 0;\n            switch (this.lastKey) {\n                case UP:\n                    dir = -1;\n                    break;\n\n                case DOWN:\n                    dir = 1;\n                    break;\n\n                case PGUP:\n                    dir = -HC.listSize;\n                    break;\n\n                case PGDOWN:\n                    dir = HC.listSize;\n                    break;\n\n                case ESC:\n                    return evtKill(evt);\n            }\n            if (dir) {\n                if (this.list.style.display !== \"none\") {\n                    this.highlightSuggestion(dir);\n                    return evtKill(evt);\n                } else if (this.keyCount <= 1 && (!this.callbackObj || this.callbackObj.callsMade === this.callbackObj.nofCalls)) {\n                    this.textchange();\n                }\n            }\n            return true;\n        },\n        highlightSuggestion: function(dir) {\n            if (noSuggestions || !this.list || this.list.style.display === \"none\") return false;\n            var curr = this.list.selectedIndex;\n            var tgt = -1;\n            if (dir === 0) {\n                if (curr < 0 || curr >= this.list.options.length) return false;\n                tgt = curr;\n            } else {\n                tgt = curr < 0 ? 0 : curr + dir;\n                tgt = tgt < 0 ? 0 : tgt;\n                if (tgt >= this.list.options.length) tgt = this.list.options.length - 1;\n            }\n            if (tgt !== curr || dir === 0) {\n                if (curr >= 0 && curr < this.list.options.length && dir !== 0) this.list.options[curr].selected = false;\n                this.list.options[tgt].selected = true;\n                var v = this.text.value.split(\"|\");\n                var key = v.length > 1 ? \"|\" + v[1] : \"\";\n                var completed = this.autoComplete(this.list.options[tgt].text, this.lastRealInput, null, key, false);\n                if (!completed || this.list.options[tgt].text === this.lastRealInput) {\n                    this.text.value = this.list.options[tgt].text + key;\n                    if (this.canSelect()) this.setSelection(this.list.options[tgt].text.length, this.list.options[tgt].text.length);\n                }\n                this.lastInput = this.list.options[tgt].text;\n                this.inputExists = true;\n                if (this.icon) this.icon.src = HC.existsYes;\n                this.state = CategoryEditor.CHANGE_PENDING;\n            }\n            return true;\n        },\n        resetKeySelection: function() {\n            if (noSuggestions || !this.list || this.list.style.display === \"none\") return false;\n            var curr = this.list.selectedIndex;\n            if (curr >= 0 && curr < this.list.options.length) {\n                this.list.options[curr].selected = false;\n                var v = this.text.value.split(\"|\");\n                var key = v.length > 1 ? \"|\" + v[1] : \"\";\n                var result = v[0] !== this.lastInput;\n                if (v[0] !== this.lastRealInput) {\n                    this.text.value = this.lastRealInput + key;\n                    result = true;\n                }\n                this.lastInput = this.lastRealInput;\n                return result;\n            }\n            return false;\n        }\n    };\n\n    function initialize() {\n        var config = window.JSconfig !== undefined && JSconfig.keys ? JSconfig.keys : {};\n        HC.dont_add_to_watchlist = window.hotcat_dont_add_to_watchlist !== undefined ? !!window.hotcat_dont_add_to_watchlist : config.HotCatDontAddToWatchlist !== undefined ? config.HotCatDontAddToWatchlist : HC.dont_add_to_watchlist;\n        HC.no_autocommit = window.hotcat_no_autocommit !== undefined ? !!window.hotcat_no_autocommit : config.HotCatNoAutoCommit !== undefined ? config.HotCatNoAutoCommit : HC.no_autocommit;\n        HC.del_needs_diff = window.hotcat_del_needs_diff !== undefined ? !!window.hotcat_del_needs_diff : config.HotCatDelNeedsDiff !== undefined ? config.HotCatDelNeedsDiff : HC.del_needs_diff;\n        HC.suggest_delay = window.hotcat_suggestion_delay || config.HotCatSuggestionDelay || HC.suggest_delay;\n        HC.editbox_width = window.hotcat_editbox_width || config.HotCatEditBoxWidth || HC.editbox_width;\n        HC.suggestions = window.hotcat_suggestions || config.HotCatSuggestions || HC.suggestions;\n        if (typeof HC.suggestions !== \"string\" || !suggestionConfigs[HC.suggestions]) HC.suggestions = \"combined\";\n        HC.fixed_search = window.hotcat_suggestions_fixed !== undefined ? !!window.hotcat_suggestions_fixed : config.HotCatFixedSuggestions !== undefined ? config.HotCatFixedSuggestions : HC.fixed_search;\n        HC.single_minor = window.hotcat_single_changes_are_minor !== undefined ? !!window.hotcat_single_changes_are_minor : config.HotCatMinorSingleChanges !== undefined ? config.HotCatMinorSingleChanges : HC.single_minor;\n        HC.bg_changed = window.hotcat_changed_background || config.HotCatChangedBackground || HC.bg_changed;\n        HC.use_up_down = window.hotcat_use_category_links !== undefined ? !!window.hotcat_use_category_links : config.HotCatUseCategoryLinks !== undefined ? config.HotCatUseCategoryLinks : HC.use_up_down;\n        HC.listSize = window.hotcat_listSize || config.HotCatListSize || HC.listSize;\n        if (conf.wgDBname !== \"commonswiki\") HC.changeTag = config.HotCatChangeTag || \"\";\n        if (HC.changeTag) {\n            var eForm = document.editform,\n                catRegExp = new RegExp(\"^\\\\[\\\\[(\" + HC.category_regexp + \"):\"),\n                oldTxt;\n            var isMinorChange = function() {\n                var newTxt = eForm.wpTextbox1;\n                if (!newTxt) return;\n                newTxt = newTxt.value;\n                var oldLines = oldTxt.match(/^.*$/gm),\n                    newLines = newTxt.match(/^.*$/gm),\n                    cArr;\n                var except = function(aArr, bArr) {\n                    var result = [],\n                        lArr, sArr;\n                    if (aArr.length < bArr.length) {\n                        lArr = bArr;\n                        sArr = aArr;\n                    } else {\n                        lArr = aArr;\n                        sArr = bArr;\n                    }\n                    for (var i = 0; i < lArr.length; i++) {\n                        var item = lArr[i];\n                        var ind = $.inArray(item, sArr);\n                        if (ind === -1) result.push(item);\n                        else sArr.splice(ind, 1);\n                    }\n                    return result.concat(sArr);\n                };\n                cArr = except(oldLines, newLines);\n                if (cArr.length) {\n                    cArr = $.grep(cArr, function(c) {\n                        c = $.trim(c);\n                        return c && !catRegExp.test(c);\n                    });\n                }\n                if (!cArr.length) {\n                    oldTxt = newTxt;\n                    return true;\n                }\n            };\n            if (conf.wgAction === \"submit\" && conf.wgArticleId && eForm && eForm.wpSummary && document.getElementById(\"wikiDiff\")) {\n                var sum = eForm.wpSummary,\n                    sumA = eForm.wpAutoSummary;\n                if (sum.value && sumA.value === HC.changeTag) {\n                    sumA.value = sumA.value.replace(HC.changeTag, \"d41d8cd98f00b204e9800998ecf8427e\");\n                    var $ct = $('<input type=\"hidden\" name=\"wpChangeTags\">').val(HC.changeTag);\n                    $(eForm).append($ct);\n                    oldTxt = eForm.wpTextbox1.value;\n                    $(\"#wpSave\").one(\"click\", function() {\n                        if ($ct.val()) sum.value = sum.value.replace(HC.messages.using || HC.messages.prefix, \"\");\n                    });\n                    var removeChangeTag = function() {\n                        $(eForm.wpTextbox1).add(sum).one(\"input\", function() {\n                            window.setTimeout(function() {\n                                if (!isMinorChange()) $ct.val(\"\");\n                                else removeChangeTag();\n                            }, 500);\n                        });\n                    };\n                    removeChangeTag();\n                }\n            }\n        }\n        HC.listSize = parseInt(HC.listSize, 10);\n        if (isNaN(HC.listSize) || HC.listSize < 5) HC.listSize = 5;\n        HC.listSize = Math.min(HC.listSize, 15);\n        if (HC.engine_names) {\n            for (var key in HC.engine_names)\n                if (suggestionConfigs[key] && HC.engine_names[key]) suggestionConfigs[key].name = HC.engine_names[key];\n        }\n        is_rtl = hasClass(document.body, \"rtl\");\n        if (!is_rtl) {\n            if (document.defaultView && document.defaultView.getComputedStyle) {\n                is_rtl = document.defaultView.getComputedStyle(document.body, null).getPropertyValue(\"direction\");\n            } else if (document.body.currentStyle) {\n                is_rtl = document.body.currentStyle.direction;\n            } else {\n                is_rtl = document.body.style.direction;\n            }\n            is_rtl = is_rtl === \"rtl\";\n        }\n    }\n\n    function can_edit() {\n        var container = null;\n        switch (mw.config.get(\"skin\")) {\n            case \"cologneblue\":\n                container = document.getElementById(\"quickbar\");\n\n            case \"standard\":\n            case \"nostalgia\":\n                if (!container) container = document.getElementById(\"topbar\");\n                var lks = container.getElementsByTagName(\"a\");\n                for (var i = 0; i < lks.length; i++) {\n                    if (param(\"title\", lks[i].href) === conf.wgPageName && param(\"action\", lks[i].href) === \"edit\") {\n                        return true;\n                    }\n                }\n                return false;\n\n            default:\n                return document.getElementById(\"ca-edit\") !== null;\n        }\n    }\n\n    function closeForm() {\n        for (var i = 0; i < editors.length; i++) {\n            var edit = editors[i];\n            if (edit.state === CategoryEditor.OPEN) {\n                edit.cancel();\n            } else if (edit.state === CategoryEditor.CHANGE_PENDING) {\n                edit.sanitizeInput();\n                var value = edit.text.value.split(\"|\");\n                var key = null;\n                if (value.length > 1) key = value[1];\n                var v = value[0].replace(/_/g, \" \").replace(/^\\s+|\\s+$/g, \"\");\n                if (!v.length) {\n                    edit.cancel();\n                } else {\n                    edit.currentCategory = v;\n                    edit.currentKey = key;\n                    edit.currentExists = this.inputExists;\n                    edit.close();\n                }\n            }\n        }\n    }\n\n    function setup_upload() {\n        onUpload = true;\n        var ip = document.getElementById(\"mw-htmlform-description\") || document.getElementById(\"wpDestFile\");\n        if (!ip) {\n            ip = document.getElementById(\"wpDestFile\");\n            while (ip && ip.nodeName.toLowerCase() !== \"table\") ip = ip.parentNode;\n        }\n        if (!ip) return;\n        var reupload = document.getElementById(\"wpForReUpload\");\n        var destFile = document.getElementById(\"wpDestFile\");\n        if (reupload && !!reupload.value || destFile && (destFile.disabled || destFile.readOnly)) {\n            return;\n        }\n        var labelCell = make(\"td\");\n        var lineCell = make(\"td\");\n        catLine = make(\"div\");\n        catLine.className = \"catlinks\";\n        catLine.id = \"catlinks\";\n        catLine.style.textAlign = is_rtl ? \"right\" : \"left\";\n        catLine.style.margin = \"0\";\n        catLine.style.border = \"none\";\n        lineCell.appendChild(catLine);\n        var label = null;\n        if (window.UFUI && window.UIElements && UFUI.getLabel instanceof Function) {\n            try {\n                label = UFUI.getLabel(\"wpCategoriesUploadLbl\");\n            } catch (ex) {\n                label = null;\n            }\n        }\n        if (!label) {\n            labelCell.id = \"hotcatLabel\";\n            labelCell.appendChild(make(HC.categories, true));\n        } else {\n            labelCell.id = \"hotcatLabelTranslated\";\n            labelCell.appendChild(label);\n        }\n        labelCell.className = \"mw-label\";\n        labelCell.style.textAlign = \"right\";\n        labelCell.style.verticalAlign = \"middle\";\n        var form = document.getElementById(\"upload\") || document.getElementById(\"mw-upload-form\");\n        if (form) {\n            var newRow = ip.insertRow(-1);\n            newRow.appendChild(labelCell);\n            newRow.appendChild(lineCell);\n            form.onsubmit = function(oldSubmit) {\n                return function() {\n                    var do_submit = true;\n                    if (oldSubmit) {\n                        if (typeof oldSubmit === \"string\") {\n                            do_submit = eval(oldSubmit);\n                        } else if (oldSubmit instanceof Function) {\n                            do_submit = oldSubmit.apply(form, arguments);\n                        }\n                    }\n                    if (!do_submit) return false;\n                    closeForm();\n                    var eb = document.getElementById(\"wpUploadDescription\") || document.getElementById(\"wpDesc\");\n                    var addedOne = false;\n                    for (var i = 0; i < editors.length; i++) {\n                        var t = editors[i].currentCategory;\n                        if (!t) continue;\n                        var key = editors[i].currentKey;\n                        var new_cat = \"[[\" + HC.category_canonical + \":\" + t + (key ? \"|\" + key : \"\") + \"]]\";\n                        var cleanedText = eb.value.replace(/<!--(\\s|\\S)*?-->/g, \"\").replace(/<nowiki>(\\s|\\S)*?<\\/nowiki>/g, \"\");\n                        if (!find_category(cleanedText, t, true)) {\n                            eb.value += \"\\n\" + new_cat;\n                            addedOne = true;\n                        }\n                    }\n                    if (addedOne) {\n                        eb.value = eb.value.replace(/\\{\\{subst:unc\\}\\}/g, \"\");\n                    }\n                    return true;\n                };\n            }(form.onsubmit);\n        }\n    }\n    var cleanedText = null;\n\n    function isOnPage(span) {\n        if (span.firstChild.nodeType !== Node.ELEMENT_NODE) return null;\n        var catTitle = title(span.firstChild.getAttribute(\"href\"));\n        if (!catTitle) return null;\n        catTitle = catTitle.substr(catTitle.indexOf(\":\") + 1).replace(/_/g, \" \");\n        if (HC.blacklist && HC.blacklist.test(catTitle)) return null;\n        var result = {\n            title: catTitle,\n            match: [\"\", \"\", \"\"]\n        };\n        if (pageText === null) return result;\n        if (cleanedText === null) {\n            cleanedText = pageText.replace(/<!--(\\s|\\S)*?-->/g, \"\").replace(/<nowiki>(\\s|\\S)*?<\\/nowiki>/g, \"\");\n        }\n        result.match = find_category(cleanedText, catTitle, true);\n        return result;\n    }\n    var initialized = false;\n    var setupTimeout = null;\n\n    function findByClass(scope, tag, className) {\n        var result = $(scope).find(tag + \".\" + className);\n        return result && result.length ? result[0] : null;\n    }\n\n    function setup(additionalWork) {\n        if (initialized) return;\n        initialized = true;\n        if (setupTimeout) {\n            window.clearTimeout(setupTimeout);\n            setupTimeout = null;\n        }\n        catLine = catLine || document.getElementById(\"mw-normal-catlinks\");\n        var hiddenCats = document.getElementById(\"mw-hidden-catlinks\");\n        if (!catLine) {\n            var footer = null;\n            if (!hiddenCats) {\n                footer = findByClass(document, \"div\", \"printfooter\");\n                if (!footer) return;\n            }\n            catLine = make(\"div\");\n            catLine.id = \"mw-normal-catlinks\";\n            catLine.style.textAlign = is_rtl ? \"right\" : \"left\";\n            var label = make(\"a\");\n            label.href = conf.wgArticlePath.replace(\"$1\", \"Special:Categories\");\n            label.title = HC.categories;\n            label.appendChild(make(HC.categories, true));\n            catLine.appendChild(label);\n            catLine.appendChild(make(\":\", true));\n            var container = hiddenCats ? hiddenCats.parentNode : document.getElementById(\"catlinks\");\n            if (!container) {\n                container = make(\"div\");\n                container.id = \"catlinks\";\n                footer.parentNode.insertBefore(container, footer.nextSibling);\n            }\n            container.className = \"catlinks noprint\";\n            container.style.display = \"\";\n            if (!hiddenCats) container.appendChild(catLine);\n            else container.insertBefore(catLine, hiddenCats);\n        }\n        if (is_rtl) catLine.dir = \"rtl\";\n\n        function createEditors(line, is_hidden) {\n            var i;\n            var cats = line.getElementsByTagName(\"li\");\n            if (cats.length) {\n                newDOM = true;\n                line = cats[0].parentNode;\n            } else {\n                cats = line.getElementsByTagName(\"span\");\n            }\n            var copyCats = new Array(cats.length);\n            for (i = 0; i < cats.length; i++) copyCats[i] = cats[i];\n            for (i = 0; i < copyCats.length; i++) {\n                var test = isOnPage(copyCats[i]);\n                if (test !== null && test.match !== null) {\n                    new CategoryEditor(line, copyCats[i], test.title, test.match[2], is_hidden);\n                }\n            }\n            return copyCats.length ? copyCats[copyCats.length - 1] : null;\n        }\n        var lastSpan = createEditors(catLine, false);\n        new CategoryEditor(newDOM ? catLine.getElementsByTagName(\"ul\")[0] : catLine, null, null, lastSpan !== null, false);\n        if (!onUpload) {\n            if (pageText !== null && hiddenCats) {\n                if (is_rtl) hiddenCats.dir = \"rtl\";\n                createEditors(hiddenCats, true);\n            }\n            var enableMulti = make(\"span\");\n            enableMulti.className = \"noprint\";\n            if (is_rtl) enableMulti.dir = \"rtl\";\n            catLine.insertBefore(enableMulti, catLine.firstChild.nextSibling);\n            enableMulti.appendChild(make(\"\u00a0\", true));\n            multiSpan = make(\"span\");\n            enableMulti.appendChild(multiSpan);\n            multiSpan.innerHTML = \"(<a>\" + HC.addmulti + \"</a>)\";\n            var lk = multiSpan.getElementsByTagName(\"a\")[0];\n            lk.onclick = function(evt) {\n                setMultiInput();\n                checkMultiInput();\n                return evtKill(evt);\n            };\n            lk.title = HC.multi_tooltip;\n            lk.style.cursor = \"pointer\";\n        }\n        cleanedText = null;\n        if (additionalWork instanceof Function) additionalWork();\n        mw.hook(\"hotcat.ready\").fire();\n        $(\"body\").trigger(\"hotcatSetupCompleted\");\n    }\n\n    function createCommitForm() {\n        if (commitForm) return;\n        var formContainer = make(\"div\");\n        formContainer.style.display = \"none\";\n        document.body.appendChild(formContainer);\n        formContainer.innerHTML = '<form id=\"hotcatCommitForm\" method=\"post\" enctype=\"multipart/form-data\" action=\"' + conf.wgScript + \"?title=\" + encodeURIComponent(conf.wgPageName) + '&action=submit\">' + '<input type=\"hidden\" name=\"wpTextbox1\">' + '<input type=\"hidden\" name=\"model\" value=\"wikitext\">' + '<input type=\"hidden\" name=\"format\" value=\"text/x-wiki\">' + '<input type=\"hidden\" name=\"wpSummary\" value=\"\">' + '<input type=\"checkbox\" name=\"wpMinoredit\" value=\"1\">' + '<input type=\"checkbox\" name=\"wpWatchthis\" value=\"1\">' + '<input type=\"hidden\" name=\"wpAutoSummary\" value=\"d41d8cd98f00b204e9800998ecf8427e\">' + '<input type=\"hidden\" name=\"wpEdittime\">' + '<input type=\"hidden\" name=\"wpStarttime\">' + '<input type=\"hidden\" name=\"wpDiff\" value=\"wpDiff\">' + '<input type=\"hidden\" name=\"oldid\" value=\"0\">' + '<input type=\"submit\" name=\"hcCommit\" value=\"hcCommit\">' + '<input type=\"hidden\" name=\"wpEditToken\">' + '<input type=\"hidden\" name=\"wpUltimateParam\" value=\"1\">' + '<input type=\"hidden\" name=\"wpChangeTags\">' + '<input type=\"hidden\" value=\"\u2133\ud835\udcb2\u2665\ud835\udcca\ud835\udcc3\ud835\udcbe\ud835\udcb8\u2134\ud835\udcb9\u212f\" name=\"wpUnicodeCheck\">' + \"</form>\";\n        commitForm = document.getElementById(\"hotcatCommitForm\");\n    }\n\n    function getPage() {\n        if (!conf.wgArticleId) {\n            if (conf.wgNamespaceNumber === 2) return;\n            pageText = \"\";\n            pageTime = null;\n            setup(createCommitForm);\n        } else {\n            var url = conf.wgServer + conf.wgScriptPath + \"/api.php?format=json&callback=HotCat.start&action=query&rawcontinue=&titles=\" + encodeURIComponent(conf.wgPageName) + \"&prop=info%7Crevisions&rvprop=content%7Ctimestamp%7Cids&meta=siteinfo&rvlimit=1&rvstartid=\" + conf.wgCurRevisionId;\n            var s = make(\"script\");\n            s.src = url;\n            HC.start = function(json) {\n                setPage(json);\n                setup(createCommitForm);\n            };\n            document.getElementsByTagName(\"head\")[0].appendChild(s);\n            setupTimeout = window.setTimeout(function() {\n                setup(createCommitForm);\n            }, 4e3);\n        }\n    }\n\n    function setState(state) {\n        var cats = state.split(\"\\n\");\n        if (!cats.length) return null;\n        if (initialized && editors.length === 1 && editors[0].isAddCategory) {\n            var newSpans = [];\n            var before = editors.length === 1 ? editors[0].span : null;\n            var i;\n            for (i = 0; i < cats.length; i++) {\n                if (!cats[i].length) continue;\n                var cat = cats[i].split(\"|\");\n                var key = cat.length > 1 ? cat[1] : null;\n                cat = cat[0];\n                var lk = make(\"a\");\n                lk.href = wikiPagePath(HC.category_canonical + \":\" + cat);\n                lk.appendChild(make(cat, true));\n                lk.title = cat;\n                var span = make(\"span\");\n                span.appendChild(lk);\n                if (!i) catLine.insertBefore(make(\" \", true), before);\n                catLine.insertBefore(span, before);\n                if (before && i + 1 < cats.length) parent.insertBefore(make(\" | \", true), before);\n                newSpans.push({\n                    element: span,\n                    title: cat,\n                    key: key\n                });\n            }\n            if (before) before.parentNode.insertBefore(make(\" | \", true), before);\n            for (i = 0; i < newSpans.length; i++) {\n                new CategoryEditor(catLine, newSpans[i].element, newSpans[i].title, newSpans[i].key);\n            }\n        }\n        return null;\n    }\n\n    function getState() {\n        var result = null;\n        for (var i = 0; i < editors.length; i++) {\n            var text = editors[i].currentCategory;\n            var key = editors[i].currentKey;\n            if (text && text.length) {\n                if (key !== null) text += \"|\" + key;\n                if (result === null) result = text;\n                else result += \"\\n\" + text;\n            }\n        }\n        return result;\n    }\n\n    function really_run() {\n        initialize();\n        if (!HC.upload_disabled && conf.wgNamespaceNumber === -1 && conf.wgCanonicalSpecialPageName === \"Upload\" && conf.wgUserName) {\n            setup_upload();\n            setup(function() {\n                if (window.UploadForm && UploadForm.previous_hotcat_state) UploadForm.previous_hotcat_state = setState(UploadForm.previous_hotcat_state);\n            });\n        } else {\n            if (!conf.wgIsArticle || conf.wgAction !== \"view\" || param(\"diff\") !== null || param(\"oldid\") !== null || !can_edit() || HC.disable()) return;\n            getPage();\n        }\n    }\n\n    function run() {\n        if (HC.started) return;\n        HC.started = true;\n        loadTrigger.register(really_run);\n    }\n    window.hotcat_get_state = function() {\n        return getState();\n    };\n    window.hotcat_set_state = function(state) {\n        return setState(state);\n    };\n    window.hotcat_close_form = function() {\n        closeForm();\n    };\n    HC.runWhenReady = function(callback) {\n        mw.hook(\"hotcat.ready\").add(callback);\n    };\n    mw.config.set(\"disableAJAXCategories\", true);\n    if (conf.wgCanonicalSpecialPageName !== \"Upload\") {\n        mw.hook(\"postEdit\").add(function() {\n            catLine = null;\n            editors = [];\n            initialized = false;\n            HC.started = false;\n            run();\n        });\n    }\n    $.when(mw.loader.using(\"user\"), $.ready).always(run);\n})(jQuery, mediaWiki);"}}}