{"parse":{"title":"User:Imbushuo/MonacoEditor/mediawiki.d.ts","pageid":221873,"wikitext":{"*":"// <pre>\n/**\n * MediaWiki.d.ts: TypeScript definition for MediaWiki\n */\n\ndeclare module mediawiki {\n    function UriRelative(documentLocation: string): Uri;\n    function confirmCloseWindow(options?: ConfirmCloseWindowOptions): any;\n    function format(formatString: string, parameters, ...args: string[]): string;\n    function hook(name: string): MwHook;\n    function log(msg: string): void;\n    function message(key: string, parameters, ...args: any[]): MwMessage;\n    function msg(key: string, parameters, ...args: any[]): string;\n    function notify(message: any, options: any): JQueryPromise<any>;\n    function now(): number;\n    function requestIdleCallback(callback: () => any, options?: RequestIdleCallbackOptions): void;\n    function track(topic: string, data?: any): void;\n    function trackSubscribe(topic: string, callback: (topic: string, data?: any) => any): void;\n    function trackUnsubscribe(callback: () => any): void;\n\n    export class Uri {\n        constructor(uri?: string, options?: IUriConstructorOptions);\n    }\n\n    interface IUriConstructorOptions {\n        strictMode?: boolean;\n        overrideKeys?: boolean;\n    }\n\n    interface ConfirmCloseWindowOptions {\n        namespace?: string;\n        message?: string;\n        test?: () => boolean;\n    }\n\n    interface RequestIdleCallbackOptions {\n        timeout?: number;\n    }\n\n    interface MwHook {\n\n    }\n\n    interface MwMessage {\n        escaped(): string;\n        exists(): boolean;\n        params(parameters: any[]): MwMessage;\n        parse(): string;\n        parseDom(): JQueryStatic;\n        plain(): string;\n        text(): string;\n        toString(): string;\n    }\n}\n\ndeclare module mw {\n\n\n    /**\n     * Represents the API of a particular MediaWiki server.\n     */\n    export class Api {\n\n        /**\n         * Initializes new instance of Api.\n         * @param options See defaultOptions documentation above. Can also be overridden for each individual request by passing them to get or post (or directly ajax) later on.\n         */\n        constructor(options?: IApiConstructorOptions);\n\n        /**\n         * Abort all unfinished requests issued by this Api object.\n         */\n        abort(): void;\n\n        /**\n         * Perform the API call.\n         * @param parameters\n         * @param ajaxOptions\n         */\n        ajax(parameters: any, ajaxOptions?: JQueryAjaxSettings): JQueryPromise<any>;\n\n        /**\n         * Indicate that the cached token for a certain action of the API is bad.\n         *\n         * Call this if you get a 'badtoken' error when using the token returned by getToken. You may also want to use postWithToken instead, which invalidates bad cached tokens automatically.\n         *\n         * Available since: 1.26\n         * @param type Token type.\n         */\n        badToken(type: string): void;\n\n        /**\n         * Create a new page.\n         * @param title Page title.\n         * @param params Edit API parameters.\n         * @param content Page content.\n         */\n        create(title: string | Title, params: IApiCreatePageParams, content: string): JQueryPromise<any>;\n\n        /**\n         * Edit an existing page.\n         *\n         * To create a new page, use {@link create} instead.\n         * @param title Page title.\n         * @param transform Callback that prepares the edit.\n         */\n        edit(title: string | Title, transform: (revision: any) => string | any | JQueryPromise<string | any | JQueryPromise<any>>): JQueryPromise<any>;\n\n        /**\n         * Perform API get request.\n         * @param parameters API parameters.\n         * @param ajaxOptions \n         */\n        get(parameters: any, ajaxOptions?: JQueryAjaxSettings): JQueryPromise<any>;\n\n        /**\n         * Get the categories that a particular page on the wiki belongs to.\n         * @param title Page title.\n         */\n        getCategories(title: string | Title): JQueryPromise<boolean | Title[]>;\n\n        /**\n         * Get a list of categories that match a certain prefix.\n         * @param prefix Prefix to match.\n         */\n        getCategoriesByPrefix(prefix: string): JQueryPromise<string[]>;\n\n        /**\n         * API helper to grab a csrf token.\n         */\n        getEditToken(): JQueryPromise<string>;\n\n        /**\n         * Get a set of messages.\n         * @param messages Messages to retrieve.\n         * @param options Additional parameters for the API call.\n         */\n        getMessages(messages: any[], options?: any): JQueryPromise<any>;\n\n        /**\n         * Get a token for a certain action from the API.\n         * The assert parameter is only for internal use by {@link postWithToken}.\n         * Available since: 1.22\n         * @param type Token type\n         * @param assert\n         */\n        getToken(type: string, assert?: string): JQueryPromise<string>;\n\n        /**\n         * Get the current user's groups and rights.\n         */\n        getUserInfo(): JQueryPromise<IApiUserInfo>;\n\n        /**\n         * Determine if a category exists.\n         * @param title Category title.\n         */\n        isCategory(title: string | Title): JQueryPromise<boolean>;\n\n        /**\n         * Loads a set of messages and add them to mw.messages.\n         * @param messages Messages to retrieve.\n         * @param options Additional parameters for the API call.\n         */\n        loadMessages(messages: string[], options?: any): JQueryPromise<any>;\n\n        /**\n         * Loads a set of messages and add them to mw.messages. Only messages that are not already known are loaded. If all messages are known, the returned promise is resolved immediately.\n         * @param messages Messages to retrieve.\n         * @param options Additional parameters for the API call.\n         */\n        loadMessagesIfMissing(messages: string[], options?: any): JQueryPromise<any>;\n\n        /**\n         * Login to MediaWiki.\n         * @param username Username.\n         * @param password Password.\n         */\n        login(username: string, password: string): JQueryPromise<any>;\n\n        /**\n         * Post a new section to the page.\n         * @see postWithEditToken\n         * @param title Target page.\n         * @param header \n         * @param message Wikitext message.\n         * @param additionalParams Additional API parameters, e.g. { redirect: true }\n         */\n        newSection(title: string | Title, header: string, message: string, additionalParams?: any): JQueryPromise<any>;\n\n        /**\n         * Convenience method for 'action=parse'.\n         * @param content Content to parse, either as a wikitext string or a {@link Title}.\n         * @param additionalParams Parameters object to set custom settings, e.g. redirects, sectionpreview. prop should not be overridden.\n         */\n        parse(content: string | Title, additionalParams: any): JQueryPromise<string>;\n\n        /**\n         * Perform API post request.\n         * @param parameters\n         * @param ajaxOptions\n         */\n        post(parameters: any, ajaxOptions?: JQueryAjaxSettings): JQueryPromise<any>;\n\n        /**\n         * Post to API with csrf token. If we have no token, get one and try to post. If we have a cached token try using that, and if it fails, blank out the cached token and start over.\n         * @param params API parameters.\n         * @param ajaxOptions\n         */\n        postWithEditToken(params: any, ajaxOptions?: JQueryAjaxSettings): JQueryPromise<any>;\n\n        /**\n         * Post to API with specified type of token. If we have no token, get one and try to post. If we have a cached token try using that, and if it fails, blank out the cached token and start over.\n         * @param tokenType The name of the token, like options or edit.\n         * @param params API parameters\n         * @param ajaxOptions\n         */\n        postWithToken(tokenType: string, params: any, ajaxOptions?: JQueryAjaxSettings): JQueryPromise<any>;\n\n        /**\n         * Process the result of the form submission, returned to an iframe. This is the iframe's onload event.\n         * @param iframe Iframe to extract result from.\n         */\n        processIframeResult(iframe: HTMLIFrameElement): any;\n\n        /**\n         * Convenience method for action=rollback.\n         * @param page\n         * @param user\n         * @param params Additional parameters\n         */\n        rollback(page: string | Title, user: string, params?: any): JQueryPromise<any>;\n\n        /**\n         * Asynchronously save the value of a single user option using the API. See {@link saveOptions}.\n         * @param name\n         * @param value\n         */\n        saveOption(name: string, value: string | null): JQueryPromise<any>;\n\n        /**\n         * Asynchronously save the values of user options using the API.\n         * If a value of null is provided, the given option will be reset to the default value.\n         * Any warnings returned by the API, including warnings about invalid option names or values, are ignored. However, do not rely on this behavior.\n         * If necessary, the options will be saved using several sequential API requests. Only one promise is always returned that will be resolved when all requests complete.\n         * @param options Options as a { name: value, \u2026 } object\n         */\n        saveOptions(options: any): JQueryPromise<any>;\n\n        /**\n         * Convenience method for action=watch&unwatch=1.\n         * @param pages Full page name or instance of mw.Title, or an array thereof. If an array is passed, the return value passed to the promise will also be an array of appropriate objects.\n         * @param addParams\n         */\n        unwatch(pages: string | Title | string[] | Title[], addParams?: any): JQueryPromise<IApiWatchResponse | IApiWatchResponse[]>;\n\n        /**\n         * Upload a file to MediaWiki.\n         * The file will be uploaded using AJAX and FormData, if the browser supports it, or via an iframe if it doesn't.\n         * Caveats of iframe upload: - The returned jQuery.Promise will not receive progress notifications during the upload - It is incompatible with uploads to a foreign wiki using mw.ForeignApi - You must pass a HTMLInputElement and not a File for it to be possible.\n         * @param file HTML input type=file element with a file already inside of it, or a File object.\n         * @param data Other upload options, see action=upload API docs for more.\n         */\n        upload(file: HTMLInputElement | File | Blob, data: any): JQueryPromise<any>;\n\n        /**\n         * Finish an upload in the stash.\n         * @param file\n         * @param data\n         */\n        uploadFromStash(fileKey: string, data: any): JQueryPromise<any>;\n\n        /**\n         * Upload a file to the stash.\n         * This function will return a promise, which when resolved, will pass back a function to finish the stash upload. You can call that function with an argument containing more, or conflicting, data to pass to the server.\n         * @param file\n         * @param data\n         */\n        uploadToStash(file: HTMLInputElement | File | Blob, data?: any): JQueryPromise<(data: any) => JQueryPromise<any>>;\n\n        /**\n         * Convenience method for action=watch.\n         * @param pages Full page name or instance of mw.Title, or an array thereof. If an array is passed, the return value passed to the promise will also be an array of appropriate objects.\n         * @param addParams\n         */\n        watch(pages: string | Title | string[] | Title[], addParams?: any): JQueryPromise<IApiWatchResponse | IApiWatchResponse[]>;\n    }\n\n    /**\n     * Create an object that can be read from or written to via methods that allow interaction both with single and multiple properties at once.\n     */\n    export class Map {\n\n        /**\n         * Initializes new instance of Map.\n         * @param global Whether to synchronise =values to the global window object (for backwards-compatibility with mw.config; T72470). Values are copied in one direction only. Changes to globals do not reflect in the map. Defaults to: false.\n         */\n        constructor(global?: boolean);\n\n        /**\n         * Check if one or more keys exist.\n         * @param selection Key or array of keys to check\n         */\n        exists(selection: string | string[]): boolean;\n\n        /**\n         * Get the value of one or more keys.\n         * If called with no arguments, all values are returned.\n         * @param selection Key or array of keys to retrieve values for.\n         * @param fallback Value for keys that don't exist. Defaults to: null\n         */\n        get(selection?: string | string[], fallback?: any): string | any[] | null | any;\n\n        /**\n         * Set one or more key/value pairs.\n         * @param selection Key to set value for, or object mapping keys to values.\n         * @param value Value to set (optional, only in use when key is a string).\n         */\n        set(selection: string | any, value?: any): boolean;\n    }\n\n    /**\n     * Parse titles into an object structure. Note that when using the constructor directly, passing invalid titles will result in an exception. Use newFromText to use the logic directly and get null for invalid titles which is easier to work with.\n     *\n     * Note that in the constructor and newFromText method, namespace is the default namespace only, and can be overridden by a namespace prefix in title. If you do not want this behavior, use makeTitle.\n     */\n    export class Title {\n        static exist: ITitleExistenceStorage;\n\n        /**\n         * Initializes new instance of Title.\n         * @param title Title of the page. If no second argument given, this will be searched for a namespace.\n         * @param namespace If given, will used as default namespace for the given title.\n         */\n        constructor(title: string, namespace?: number);\n\n        /**\n         * Whether this title exists on the wiki.\n         */\n        exists(): boolean | null;\n\n        /**\n         * Shortcut for appendable string to form the main page name.\n         * Returns a string like \".json\", or \"\" if no extension.\n         */\n        getDotExtension(): string;\n\n        /**\n         * Get the extension of the page name (if any).\n         */\n        getExtension(): string | null;\n\n        /**\n         * Get the fragment (if any).\n         * Note that this method (by design) does not include the hash character and the value is not url encoded.\n         */\n        getFragment(): string | null;\n\n        /**\n         * Get the main page name.\n         * @example \"Example_image.svg\" for \"File:Example_image.svg\".\n         */\n        getMain(): string;\n\n        /**\n         * Get the main page name (transformed by text)\n         * @example \"Example image.svg\" for \"File:Example_image.svg\".\n         */\n        getMainText(): string;\n\n        /**\n         * Get the page name without extension or namespace prefix.\n         * For the page title (full page name without namespace prefix), see {@link getMain}.\n         * @example \"Example_image\" for \"File:Example_image.svg\".\n         */\n        getName(): string;\n\n        /**\n         * Get the page name (transformed by text)\n         * For the page title (full page name without namespace prefix), see {@link getMainText}.\n         * @example \"Example_image\" for \"File:Example_image.svg\".\n         */\n        getNameText(): string;\n\n        /**\n         * Get the namespace number\n         * @example 6 for \"File:Example_image.svg\".\n         */\n        getNamespaceId(): number;\n\n        /**\n         * Get the namespace prefix (in the content language).\n         * @example \"File:\" for \"File:Example_image.svg\". In NS_MAIN this is '', otherwise namespace name plus ':'\n         */\n        getNamespacePrefix(): string;\n\n        /**\n         * Get the full page name.\n         * @example \"File:Example_image.svg\". Most useful for API calls, anything that must identify the \"title\".\n         */\n        getPrefixedDb(): string;\n\n        /**\n         * Get the full page name (transformed by text).\n         * @example \"File:Example image.svg\" for \"File:Example_image.svg\".\n         */\n        getPrefixedText(): string;\n\n        /**\n         * Get the page name relative to a namespace.\n         * @param namespace The namespace to be relative to.\n         * @example \"Foo:Bar\" relative to the Foo namespace becomes \"Bar\".\n         * @example \"Bar\" relative to any non-main namespace becomes \":Bar\".\n         * @example \"Foo:Bar\" relative to any namespace other than Foo stays \"Foo:Bar\".\n         */\n        getRelativeText(namespace: number): string;\n\n        /**\n         * Get the URL to this title.\n         * @param params A mapping of query parameter names to values, e.g. { action: 'edit' }.\n         */\n        getUrl(params?: any): string;\n\n        /**\n         * Normalize a file extension to the common form, making it lowercase and checking some synonyms, and ensure it's clean. Extensions with non-alphanumeric characters will be discarded. Keep in sync with File::normalizeExtension() in PHP.\n         * @param extension File extension (without the leading dot).\n         */\n        normalizeExtension(extension: string): string;\n\n        /**\n         * Get the full page name\n         * @example \"File:Example_image.svg\". Most useful for API calls, anything that must identify the \"title\".\n         */\n        toString(): string;\n\n        /**\n         * Get the full page name (transformed by text).\n         * @example \"File:Example image.svg\" for \"File:Example_image.svg\".\n         */\n        toText(): string;\n\n        /**\n         * Whether this title exists on the wiki.\n         * @param title Prefixed db-key name (string) or instance of Title.\n         */\n        static exists(title: string | Title): boolean | null;\n\n        /**\n         * Constructor for Title objects with predefined namespace.\n         * Unlike newFromText or constructor, this function doesn't allow the given namespace to be overridden by a namespace prefix in title. See constructor for details about this behavior.\n         * The single exception to this is when namespace is 0, indicating the main namespace. The function behaves like newFromText in that case.\n         * @param namespace Namespace to use for the title.\n         * @param title\n         */\n        static makeTitle(namespace: number, title: string): Title | null;\n\n        /**\n         * Sanitizes a file name as supplied by the user, originating in the user's file system so it is most likely a valid MediaWiki title and file name after processing. Returns null on fatal errors.\n         * @param uncleanName The unclean file name including file extension but without namespace.\n         */\n        static newFromFileName(uncleanName: string): Title | null;\n\n        /**\n         * Get the file title from an image element. \n         * @param img The image to use as a base.\n         * @example var title = mw.Title.newFromImg( $( 'img:first' ) );\n         */\n        static newFromImg(img: HTMLElement | JQuery): Title | null;\n\n        /**\n         * Constructor for Title objects with a null return instead of an exception for invalid titles.\n         * Note that namespace is the default namespace only, and can be overridden by a namespace prefix in title. If you do not want this behavior, use makeTitle. See constructor for details.\n         * @param title\n         * @param namespace Default namespace. Defaults to: NS_MAIN\n         */\n        static newFromText(title: string, namespace?: number): Title | null;\n\n        /**\n         * Constructor for Title objects from user input altering that input to produce a title that MediaWiki will accept as legal.\n         * @param title \n         * @param defaultNamespace If given, will used as default namespace for the given title. Defaults to: NS_MAIN\n         * @param options Additional options.\n         */\n        static newFromUserInput(title: string, defaultNamespace?: number, options?: ITitleNewFromUserInputOptions): Title | null;\n    }\n\n    /**\n     * Utility library.\n     */\n    export class Utility {\n\n        $content: JQuery;\n\n        /**\n         * Append a new style block to the head and return the CSSStyleSheet object. Use .ownerNode to access the <style> element, or use mw.loader.addStyleTag. This function returns the styleSheet object for convience (due to cross-browsers difference as to where it is located).\n         * @param text CSS to be appended.\n         * @returns CSSStyleSheet\n         */\n        addCSS(text: string): CSSStyleSheet;\n\n        /**\n         * Add a link to a portlet menu on the page, such as:\n         *\n         * p-cactions (Content actions), p-personal (Personal tools), p-navigation (Navigation), p-tb (Toolbox)\n         *\n         * The first three parameters are required, the others are optional and may be null. Though providing an id and tooltip is recommended.\n         *\n         * By default the new link will be added to the end of the list. To add the link before a given existing item, pass the DOM node (e.g. document.getElementById( 'foobar' )) or a jQuery-selector (e.g. '#foobar') for that item.\n         *\n         * @param portlet ID of the target portlet ( 'p-cactions' or 'p-personal' etc.)\n         * @param href Link URL\n         * @param text Link text\n         * @param id ID of the new item, should be unique and preferably have the appropriate prefix ( 'ca-', 'pt-', 'n-' or 't-' )\n         * @param tooltip Text to show when hovering over the link, without accesskey suffix.\n         * @param accesskey Access key to activate this link (one character, try to avoid conflicts. Use $( '[accesskey=x]' ).get() in the console to see if 'x' is already used.\n         * @param nextnode Element or jQuery-selector string to the item that the new item should be added before, should be another item in the same list, it will be ignored otherwise.\n         * @returns The added element (a ListItem or Anchor element, depending on the skin) or null if no element was added to the document.\n         */\n        addPortletLink(portlet: string, href: string, text: string, id?: string, tooltip?: string, accesskey?: string, nextnode?: HTMLElement | JQuery | string): HTMLElement | null;\n\n        /**\n         * Encode the string like Sanitizer::escapeId in PHP\n         * @param str String to be encoded.\n         * @returns Encoded string.\n         */\n        escapeId(str: string): string;\n\n        /**\n         * Grab the URL parameter value for the given parameter. Returns null if not found.\n         * @param param The parameter name.\n         * @param url URL to search through, defaulting to the current browsing location. Defaults to: location.href\n         * @returns Parameter value or null.\n         */\n        getParamValue(param: string, url?: string): any | null;\n\n        /**\n         * Get the link to a page name (relative to wgServer).\n         * @param pageName Page name\n         * @param params A mapping of query parameter names to values, e.g. { action: 'edit' }\n         * @returns Url of the page with name of pageName.\n         */\n        getUrl(pageName?: string | null, params?: any): string;\n\n        /**\n         * Initialisation (don't call before document ready)\n         */\n        init(): void;\n\n        /**\n         * Check whether a string is an IP address.\n         * @param address String to check.\n         * @param allowBlock True if a block of IPs should be allowed.\n         */\n        isIPAddress(address: string, allowBlock: boolean): boolean;\n\n        /**\n         * Check whether a string is an IPv4 address.\n         * Note: borrows from IP::isIPv4\n         * @param address String to check.\n         * @param allowBlock True if a block of IPs should be allowed.\n         */\n        isIPv4Address(address: string, allowBlock: boolean): boolean;\n\n        /**\n         * Check whether a string is an IPv6 address.\n         * Note: borrows from IP::isIPv6\n         * @param address String to check.\n         * @param allowBlock True if a block of IPs should be allowed.\n         */\n        isIPv6Address(address: string, allowBlock: boolean): boolean;\n\n        /**\n         * Encode the string like PHP's rawurlencode.\n         * @param str String to be encoded.\n         * @returns Encoded string.\n         */\n        rawurlencode(str: string): string;\n\n        /**\n         * Validate a string as representing a valid e-mail address according to HTML5 specification. Please note the specification does not validate a domain with one character.\n         * FIXME: should be moved to or replaced by a validation module.\n         * @param mailtxt E-mail address to be validated.\n         * @returns Null if mailtxt was an empty string, otherwise true/false as determined by validation.\n         */\n        validateEmail(mailtxt: string): boolean | null;\n\n        /**\n         * Get address to a script in the wiki root. For index.php use mw.config.get( 'wgScript' ).\n         * @param str Name of script (e.g. 'api'), defaults to 'index'\n         * @returns Address to script (e.g. '/w/api.php' ).\n         */\n        wikiScript(str: string): string;\n\n        /**\n         * Encode page titles for use in a URL\n         * We want / and : to be included as literal characters in our title URLs as they otherwise fatally break the title.\n         * The others are decoded because we can, it's prettier and matches behaviour of wfUrlencode in PHP.\n         * @param str String to be encoded.\n         * @returns Encoded string.\n         */\n        wikiUrlencode(str: string): string;\n    }\n\n    export class Uri {\n\n        constructor(uri?: string, options?: IUriConstructorOptions);\n        fragment?: string;\n        host: string;\n        password?: string;\n        path: string;\n        port: string;\n        protocol: string;\n        query: any;\n        user?: string;\n\n        clone(): Uri;\n        extend(parameters: any): Uri;\n        getAuthority(): string;\n        getHostPort(): string;\n        getQueryString(): string;\n        getRelativePath(): string;\n        getUserInfo(): string;\n        toString(): string;\n    }\n\n    /**\n     * Map of configuration values.\n     * Check out the complete list of configuration values on mediawiki.org.\n     */\n    export var config: Map;\n\n    /**\n     * Utility library.\n     */\n    export var util: Utility;\n\n    /**\n     * A factory method to create a Uri class with a default location to resolve relative URLs against (including protocol-relative URLs).\n     * @param documentLocation A full url, or function returning one. If passed a function, the return value may change over time and this will be honoured. (T74334)\n     * @returns Uri class.\n     */\n    export function UriRelative(documentLocation: string | Function): Function;\n\n    /**\n     * Prevent the closing of a window with a confirm message (the onbeforeunload event seems to work in most browsers.)\n     *\n     * This supersedes any previous onbeforeunload handler. If there was a handler before, it is restored when you execute the returned release() function.\n     * @param options Options.\n     * @returns An object of functions to work with this module.\n     */\n    export function confirmCloseWindow(options?: IApiConfirmCloseWindowOptions): Object;\n\n    /**\n     * Format a string. Replace $1, $2 ... $N with positional arguments.\n     * @param formatString Format string.\n     * @param parameters Values for $N replacements.\n     * @returns Formatted string.\n     */\n    export function format(formatString: string, ...parameters: any[]): string;\n\n    /**\n     * Write a verbose message to the browser's console in debug mode.\n     *\n     * This method is mainly intended for verbose logging. It is a no-op in production mode. In ResourceLoader debug mode, it will use the browser's console if available, with fallback to creating a console interface in the DOM and logging messages there.\n     *\n     * See mw.log for other logging methods\n     * @param msg Messages to output to console.\n     */\n    export function log(...msg: string[]): void;\n\n    /**\n     * Get a message string using the (default) 'text' format.\n     * Shortcut for mw.message( key, parameters... ).text().\n     * @param key Key of message to get.\n     * @param parameters Values for $N replacements.\n     */\n    export function msg(key: string, ...parameters: any[]): string;\n\n    /**\n      * Options for @see mw.confirmCloseWindow\n      */\n    interface IApiConfirmCloseWindowOptions {\n        namespace?: string;\n        message?: string;\n        test?: Function;\n    }\n\n    /**\n     * Interface for constructor options of {@link mw.Api}.\n     */\n    interface IApiConstructorOptions {\n        parameters: any;\n        ajax: any;\n        useUS: boolean;\n    }\n\n    /**\n     * Param interface for {@link mw.Api.create}.\n     */\n    interface IApiCreatePageParams {\n        summary: string;\n    }\n\n    /**\n     * Interface for constructor options of {@link mw.Uri}.\n     */\n    interface IUriConstructorOptions {\n        strictMode?: boolean;\n        overrideKeys?: boolean;\n    }\n\n    /**\n     * Interface of user information query response.\n     */\n    interface IApiUserInfo {\n        /**\n         * User groups that the current user belongs to.\n         */\n        groups: string[];\n\n        /**\n         * Current user's rights.\n         */\n        rights: string[];\n    }\n\n    /**\n     * Response entity interface for {@link mw.Api.watch}.\n     */\n    interface IApiWatchResponse {\n        /**\n         * Full pagename.\n         */\n        title: string;\n\n        /**\n         * Whether the page is now watched or unwatched.\n         */\n        watched: boolean;\n    }\n\n    /**\n     * Store page existence.\n     */\n    interface ITitleExistenceStorage {\n        /**\n         * Keyed by title. Boolean true value indicates page does exist.\n         */\n        pages: any;\n\n        /**\n         * The setter function.\n         * @param titles Title(s) in strict prefixedDb title form.\n         * @param state State of the given titles. Defaults to: true\n         */\n        set(titles: string | string[], state?: boolean): boolean;\n    }\n\n    /**\n     * Options interface for {@link Title.newFromUserInput}.\n     */\n    interface ITitleNewFromUserInputOptions {\n        /**\n         * Makes sure that a file is uploadable under the title returned. There are pages in the file namespace under which file upload is impossible. Automatically assumed if the title is created in the Media namespace\n         * Defaults to: true.\n         */\n        forUploading?: boolean;\n    }\n}\n\n/**\n * Client for ResourceLoader server end point.\n *\n * This client is in charge of maintaining the module registry and state machine, initiating network (batch) requests for loading modules, as well as dependency resolution and execution of source code.\n *\n * For more information, refer to https://www.mediawiki.org/wiki/ResourceLoader/Features\n */\ndeclare module mw.loader {\n\n    /**\n     * Register a source.\n     * @param id Source ID, or object mapping ids to load urls.\n     * @param loadUrl Url to a load.php end point.\n     */\n    function addSource(id: string | any, loadUrl: string): void;\n\n    /**\n     * Create a new style element and add it to the DOM.\n     * @param text CSS text.\n     * @param nextNode The element where the style tag should be inserted before.\n     * @returns Reference to the created style element.\n     */\n    function addStyleTag(text: string, nextNode?: Node): HTMLElement;\n\n    /**\n     * Get the names of all registered modules.\n     */\n    function getModuleNames(): string[];\n\n    /**\n     * Get the state of a module.\n     * @param module Name of module.\n     * @returns The state, or null if the module (or its state) is not in the registry.\n     */\n    function getState(module: string): string | null;\n\n    /**\n     * Get the version of a module.\n     * @param module Name of module.\n     * @returns The version, or null if the module (or its version) is not in the registry.\n     */\n    function getVersion(module: string): string | null;\n\n    /**\n     * Generate and print one more reports. When invoked with no arguments, print all reports.\n     * @param reports Report names to run, or unset to print all available reports.\n     */\n    function inspect(reports, ...args: string[]);\n\n    /**\n     * Load an external script or one or more modules.\n     * @param module Either the name of a module, array of modules, or a URL of an external script or style.\n     * @param contentType MIME type to use if calling with a URL of an external script or style; acceptable values are \"text/css\" and \"text/javascript\"; if no type is provided, text/javascript is assumed. Defaults to: 'text/javascript'.\n     */\n    function load(module: string | string[], contentType?: string): void;\n\n    /**\n     * Register a module, letting the system know about it and its properties.\n     *\n     * The startup modules contain calls to this method.\n     * When using multiple module registration by passing an array,\n     * dependencies that are specified as references to modules within the array\n     * will be resolved before the modules are registered.\n     *\n     * @param module Module name or array of arrays, each containing a list of arguments compatible with this method.\n     * @param version Module version hash (falls backs to empty string) Can also be a number (timestamp) for compatibility with MediaWiki 1.25 and earlier.\n     * @param dependencies One string or array of strings of module names on which this module depends, or a function that returns that array.\n     * @param group Group which the module is in. Defaults to: null\n     * @param source Name of the source. Defaults to: 'local'\n     * @param skip Script body of the skip function. Defaults to: null\n     */\n    function register(module: string | string[], version: string | number,\n        dependencies: string | string[] | Function, group?: string, source?: string, skip?: string);\n\n    /**\n     * Change the state of one or more modules.\n     * @param module Module name or object of module name/state pairs.\n     * @param state State name.\n     */\n    function state(module: string | any, state: string): void;\n\n    /**\n     * Execute a function as soon as one or more required modules are ready.\n     * @param dependencies Module name or array of modules names the callback depends on to be ready before executing.\n     * @param ready Callback to execute when all dependencies are ready.\n     * @param error Callback to execute if one or more dependencies failed.\n     */\n    function using(dependencies: string | string[], ready?: () => any, error?: () => any): JQueryPromise<void>;\n}\n\n// </pre>"}}}