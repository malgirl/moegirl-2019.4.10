{"parse":{"title":"\u6a21\u5757:Wikitext","pageid":264594,"wikitext":{"*":"--require \"mw.text\"\n--require \"string\"\n--require \"table\"\n\nlocal z = {\n    mw = require \"Module:mw\"\n}\n\n-- This splits a string of name=\"value\" pairs into a table.\n-- The common use of this is to parse a single template argument that specifies HTML element attributes all in one lump.\nfunction z.SplitHTMLElementParams(s)\n    local params = {}\n    for name,value in string.gmatch(s, \"([%w_]+)=\\\"([^\\\"]*)\\\"%s*\") do\n        params[name] = value\n    end\n    return params\nend\n\n-- This returns a string quoted using quotation marks, using HTML character entities for embedded quotation marks and ampersands.\nfunction z.quote(t)\n    local chars = {}\n    for i=1,#t do\n        local char = t:sub(i,i)\n        local byte = char:byte()\n        if ( byte == 34 or byte == 38 ) then\n            table.insert(chars, \"&#\" .. tostring(byte) .. \";\")\n        else\n            table.insert(chars, char)\n        end\n    end\n    return \"\\\"\" .. table.concat(chars) .. \"\\\"\"\nend\n\nfunction z.CombineHTMLElementParams(params)\n    local attrs = {}\n    for n,v in pairs(params) do\n        table.insert(attrs, n .. \"=\" .. z.quote(v))\n    end\n    return table.concat(attrs, \" \")\nend\n\nfunction RawOpenHTMLTag(name,params)\n    local attr = z.CombineHTMLElementParams(params)\n    return \"<\" .. name .. \" \" .. attr .. \">\"\nend\n\nfunction z.OpenHTMLTag(t)\n    local name = t.name or \"!-- --\"\n    if ( \"nowiki\" == name or \"ref\" == name or \"pre\" == name or \"gallery\" == name or \"poem\" == name or \"references\" == name ) then\n        error(name .. \"\uff1aOpenHTMLTag\u4ec5\u9002\u7528\u4e8e\u975e\u6269\u5c55\u6807\u7b7e\u3002\")\n    end\n    return RawOpenHTMLTag(name,t.params)\nend\n\n-- This returns the canonical form of an editor-supplied time, for use in cleanup category names.\nfunction z.canonicalcleanuptime(t)\n    return t -- FIXME: This isn't right.\nend\n\n-- This returns a list formatted into a (intended to be human-readable) comma-separated form.\nfunction z.oxfordlist(args,separator,ampersand)\n    local text = \"\"\n    separator = separator or \",\"\n    ampersand = ampersand or \"and\"\n    for index,arg in ipairs(args) do\n        if (index < 2) then \n            -- Add nothing before the first item.\n        elseif (args[index + 1] ~= nil) then\n            text = text .. separator .. \" \" \n        elseif (index > 2) then \n            text = text .. separator .. \" \" .. ampersand .. \" \"\n        else\n            text = text .. \" \" .. ampersand .. \" \"\n        end\n        text = text .. arg\n    end\n    return text\nend\n\n-- These return various CSS strings.\nfunction z.columncountstyle(n)\n    return \"-moz-column-count:\" .. n .. \"; -webkit-column-count:\" .. n .. \"; column-count:\" .. n .. \";\"\nend\nfunction z.columnwidthstyle(n)\n    return \"-moz-column-width:\" .. n .. \"; -webkit-column-width:\" .. n .. \"; column-width:\" .. n .. \";\"\nend\nfunction z.liststyle(n)\n    return \"list-style-type:\" .. n .. \";\"\nend\n\nreturn z"}}}