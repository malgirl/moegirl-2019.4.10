{"parse":{"title":"\u6a21\u5757:TeamBracket","pageid":255463,"wikitext":{"*":"--\n-- This module will implement {{TeamBracket}}\n--\n\nlocal p = {}\nlocal args\nlocal rounds\nlocal padding\nlocal hideSeeds\nlocal showSeeds\n\nlocal function getArgs(frame)\n\tlocal parent = frame:getParent();\n\tlocal args = parent.args;\n\tfor k,v in pairs(frame.args) do\n\t\targs[k] = v\n\tend\n\treturn args;\nend\n\nfunction getSeeds()\n\tlocal seeds = {1, 2}\n\tlocal count = 2\n\tlocal before = false\n\tfor r = 2, rounds do\n\t\tlocal max = math.pow(2, r)\n\t\tfor i = 1, count do\n\t\t\tlocal pos = i * 2\n\t\t\tif before then pos = pos - 1 end\n\t\t\ttable.insert(seeds, pos, max - seeds[i * 2 - 1] + 1)\n\t\t\tbefore = not before\n\t\tend\n\t\tcount = count * 2\n\tend\n\treturn seeds\nend\n\nfunction addTableRow(tbl)\n\treturn tbl:tag('tr')\nend\n\nfunction addBlank(row, width)\n\tlocal cell = row:tag('td')\n\tif width then\n\t\tcell:css('width', width)\n\tend\n\treturn cell\nend\n\nfunction addPath(rows, index, round, top, left)\n\tlocal prop = top and 'border-bottom-width' or 'border-top-width'\n\tif left and round == 1 then\n\t\taddBlank(rows[index]):css('height', '7px')\n\t\taddBlank(rows[index + 1]):css('height', '7px')\n\t\treturn nil\n\telse\n\t\tlocal cell = addBlank(rows[index])\n\t\t\t:attr('rowspan', '2')\n\t\t\t:css('border-width', '0')\n\t\t\t:css('border-style', 'solid')\n\t\t\t:css('border-color', 'black')\n\t\tif left or round < rounds and not left then\n\t\t\tcell:css(prop, '2px')\n\t\tend\n\t\treturn cell\n\tend\nend\n\nfunction addCompactPath(rows, index, round, top, left)\n\tlocal prop = top and 'border-bottom-width' or 'border-top-width'\n\tif left and round == 1 then\n\t\taddBlank(rows[index])\n\t\treturn nil\n\telse\n\t\tlocal cell = addBlank(rows[index])\n\t\t\t:css('border-width', '0')\n\t\t\t:css('border-style', 'solid')\n\t\t\t:css('border-color', 'black')\n\t\tif left or round < rounds and not left then\n\t\t\tcell:css(prop, '2px')\n\t\tend\n\t\treturn cell\n\tend\nend\n\nfunction getWidth(param, default)\n\tlocal arg = args[param .. '-width']\n\tif not arg or string.len(arg) == 0 then\n\t\targ = default\n\tend\n\tif tonumber(arg) ~= nil then\n\t\targ = arg .. 'px'\n\tend\n\treturn arg\nend\n\nfunction getTeamArg(round, type, team)\n\treturn args[getTeamArgName(round, type, team)]\nend\n\nfunction getTeamArgName(round, type, team)\n\treturn string.format('RD%d-%s' .. padding, round, type, team)\nend\n\nfunction getRoundName(round)\n\tlocal name = args['RD' .. round]\n\tif name and string.len(name) > 0 then\n\t\treturn name\n\tend\n\tlocal roundFromLast = rounds - round + 1\n\tif roundFromLast == 1 then\n\t\treturn \"\u51b3\u8d5b\"\n\telseif roundFromLast == 2 then\n\t\treturn \"\u534a\u51b3\u8d5b\"\n\telseif roundFromLast == 3 then\n\t\treturn \"\u56db\u5206\u4e4b\u4e00\u51b3\u8d5b\"\n\telse\n\t\treturn math.pow(2, roundFromLast)..\"\u5f3a\u8d5b\"\n\tend\nend\n\nfunction renderTeam(row, round, team, top, compact)\n\tlocal seedCell\n\tlocal seedArg = getTeamArg(round, 'seed', team)\n\t-- seed value for the paired team\n\tlocal pairSeedArg = getTeamArg(round, 'seed',\n\t\tteam % 2 == 0 and team - 1 or team + 1)\n\t-- show seed if seed is defined for either or both\n\tlocal showSeed = showSeeds \n\t\tor (seedArg and string.len(seedArg) > 0)\n\t\tor (pairSeedArg and string.len(pairSeedArg) > 0)\n\tif showSeed and (not hideSeeds) then\n\t\tseedCell = row:tag('td')\n\t\t\t:css('text-align', 'center')\n\t\t\t:css('background-color', '#f2f2f2')\n\t\t\t:css('border-color', '#aaa')\n\t\t\t:css('border-style', 'solid')\n\t\t\t:css('border-top-width', '1px')\n\t\t\t:css('border-left-width', '1px')\n\t\t\t:css('border-right-width', '1px')\n\t\t\t:css('border-bottom-width', '0')\n\t\t\t:wikitext(seedArg)\n\t\t\t:newline()\n\tend\n\n\tlocal teamArg = getTeamArg(round, 'team', team)\n\tif not teamArg or string.len(teamArg) == 0 then\n\t\tteamArg = '&nbsp;'\n\tend\n\tlocal teamCell = row:tag('td')\n\t\t:css('background-color', '#f9f9f9')\n\t\t:css('border-color', '#aaa')\n\t\t:css('border-style', 'solid')\n\t\t:css('border-top-width', '1px')\n\t\t:css('border-left-width', '1px')\n\t\t:css('border-right-width', '0')\n\t\t:css('border-bottom-width', '0')\n\t\t:css('padding', '0 2px')\n\t\t:wikitext(teamArg)\n\t\t:newline()\n\tif not showSeed and (not hideSeeds) then\n\t\tteamCell:attr('colspan', '2')\n\tend\n\n\tlocal scoreCell = row:tag('td')\n\t\t:css('text-align', 'center')\n\t\t:css('border-color', '#aaa')\n\t\t:css('border-style', 'solid')\n\t\t:css('border-top-width', '1px')\n\t\t:css('border-left-width', '1px')\n\t\t:css('border-right-width', '1px')\n\t\t:css('border-bottom-width', '0')\n\t\t:css('background-color', '#f9f9f9')\n\t\t:wikitext(getTeamArg(round, 'score', team))\n\t\t:newline()\n\n\tif not compact then\n\t\tif seedCell then\n\t\t\tseedCell:attr('rowspan', '2')\n\t\t\t\t:css('border-bottom-width', '1px')\n\t\tend\n\t\tscoreCell:attr('rowspan', '2')\n\t\t\t:css('border-bottom-width', '1px')\n\t\tteamCell:attr('rowspan', '2')\n\t\t\t:css('border-right-width', '1px')\n\t\t\t:css('border-bottom-width', '1px')\n\telse\n\t\tif not top then\n\t\t\tif seedCell then\n\t\t\t\tseedCell:css('border-bottom-width', '1px')\n\t\t\tend\n\t\t\tteamCell:css('border-bottom-width', '1px')\n\t\t\tscoreCell:css('border-bottom-width', '1px')\n\t\tend\n\tend\nend\n\nfunction renderRound(rows, count, r)\n\tlocal teams = math.pow(2, rounds - r + 1)\n\tlocal step = count / teams\n\tlocal topTeam = true -- is top row in match-up\n\tlocal topPair = true -- is top match-up in pair of match-ups\n\tlocal team = 1\n\tfor i = 1, count, step do\n\t\tlocal offset, height, blank\n\t\t-- leave room for groups for teams other than first and last\n\t\tif team == 1 or team == teams then\n\t\t\toffset = topTeam and i or i + 2\n\t\t\theight = step - 2\n\t\telse\n\t\t\toffset = topTeam and i + 1 or i + 2\n\t\t\theight = step - 3\n\t\tend\n\t\tif height > 0 then\n\t\t\tblank = addBlank(rows[offset])\n\t\t\t\t:attr('colspan', hideSeeds and '4' or '5')\n\t\t\t\t:attr('rowspan', height)\n\t\t\t\t:css('border-color', 'black')\n\t\t\t\t:css('border-style', 'solid')\n\t\t\t\t:css('border-width', '0')\n\t\tend\n\t\t-- add bracket\n\t\tlocal j = topTeam and i + step - 2 or i\n\t\t-- add left path\n\t\taddPath(rows, j, r, topTeam, true)\n\t\trenderTeam(rows[j], r, team, topTeam, false)\n\t\tlocal rightPath = addPath(rows, j, r, topTeam, false)\n\t\tif not topTeam then topPair = not topPair end\n\t\tif not topPair and r < rounds then\n\t\t\tif blank then blank:css('border-right-width', '2px') end\n\t\t\trightPath:css('border-right-width', '2px')\n\t\tend\n\t\tteam = team + 1\n\t\ttopTeam = not topTeam\n\tend\nend\n\nfunction renderCompactRound(rows, count, r)\n\tlocal teams = math.pow(2, rounds - r + 1)\n\tlocal step = count / teams\n\tlocal topTeam = true -- is top row in match-up\n\tlocal topPair = true -- is top match-up in pair of match-ups\n\tlocal team = 1\n\n\tfor i = 1, count, step do\n\t\tlocal offset, height, blank\n\t\t-- empty space above or below\n\t\tlocal offset = topTeam and i or i + 1\n\t\tlocal height = step - 1\n\n\t\tif height > 0 then\n\t\t\tblank = addBlank(rows[offset])\n\t\t\t\t:attr('colspan', hideSeeds and '4' or '5')\n\t\t\t\t:css('border-color', 'black')\n\t\t\t\t:css('border-style', 'solid')\n\t\t\t\t:css('border-width', '0')\n\t\t\t\t:attr('rowspan', height)\n\t\tend\n\t\t-- add bracket\n\t\tlocal j = topTeam and i + step - 1 or i\n\t\t-- add left path\n\t\taddCompactPath(rows, j, r, topTeam, true)\n\t\trenderTeam(rows[j], r, team, topTeam, true)\n\t\tlocal rightPath = addCompactPath(rows, j, r, topTeam, false)\n\t\tif not topTeam then topPair = not topPair end\n\t\tif not topPair and r < rounds then\n\t\t\tif blank then blank:css('border-right-width', '2px') end\n\t\t\trightPath:css('border-right-width', '2px')\n\t\tend\n\t\tteam = team + 1\n\t\ttopTeam = not topTeam\n\tend\nend\n\nfunction renderGroups(rows, count, round)\n\tlocal roundFromLast = rounds - round + 1\n\tlocal groups = math.pow(2, roundFromLast - 2)\n\tlocal step = count / groups\n\tlocal group = 1\n\tfor i = step / 2, count, step do\n\t\tlocal name = 'RD' .. round .. '-group' .. group\n\t\taddBlank(rows[i]):css('height', '7px')\n\t\taddBlank(rows[i + 1]):css('height', '7px')\n\t\taddBlank(rows[i])\n\t\t\t:attr('rowspan', '2')\n\t\t\t:attr('colspan', (hideSeeds and 4 or 5) * round - 1)\n\t\t\t:css('text-align', 'center')\n\t\t\t:css('border-color', 'black')\n\t\t\t:css('border-style', 'solid')\n\t\t\t:css('border-width', '0 2px 0 0')\n\t\t\t:wikitext(args[name])\n\t\t\t:newline()\n\t\tgroup = group + 1\n\tend\nend\n\nfunction renderTree(tbl, compact)\n\t-- create 3 or 1 rows for every team\n\tlocal count = math.pow(2, rounds) * (compact and 1 or 3)\n\tlocal rows = {}\n\tfor i = 1, count do\n\t\trows[i] = addTableRow(tbl)\n\tend\n\tif not compact then\n\t\t-- fill rows with groups\n\t\tfor r = 1, rounds - 1 do\n\t\t\trenderGroups(rows, count, r)\n\t\tend\n\tend\n\t-- fill rows with bracket\n\tfor r = 1, rounds do\n\t\tif compact then\n\t\t\trenderCompactRound(rows, count, r)\n\t\telse\n\t\t\trenderRound(rows, count, r)\n\t\tend\n\tend\nend\n\nfunction renderHeading(tbl, compact)\n\tlocal titleRow = addTableRow(tbl)\n\tlocal widthRow = addTableRow(tbl)\n\tfor r = 1, rounds do\n\t\taddBlank(titleRow)\n\t\taddBlank(widthRow, r > 1 and '5px' or nil)\n\t\ttitleRow:tag('td')\n\t\t\t:attr('colspan', hideSeeds and '2' or '3')\n\t\t\t:css('text-align', 'center')\n\t\t\t:css('border', '1px solid #aaa')\n\t\t\t:css('background-color', '#f2f2f2')\n\t\t\t:wikitext(getRoundName(r))\n\t\t\t:newline()\n\t\tlocal seedCell\n\t\tif not hideSeeds then\n\t\t\tseedCell = addBlank(widthRow, getWidth('seed', '25px'))\n\t\tend\n\t\tlocal teamCell = addBlank(widthRow, getWidth('team', '150px'))\n\t\tlocal scoreCell = addBlank(widthRow, getWidth('score', '25px'))\n\t\taddBlank(titleRow)\n\t\taddBlank(widthRow, r < rounds and '5px' or nil)\n\n\t\tif compact then\n\t\t\tteamCell:css('height', '7px')\n\t\telse\n\t\t\tif seedCell then\n\t\t\t\tseedCell:wikitext('&nbsp;')\n\t\t\tend\n\t\t\tteamCell:wikitext('&nbsp;')\n\t\t\tscoreCell:wikitext('&nbsp;')\n\t\tend\n\tend\nend\n\nfunction p.teamBracket(frame)\n\targs = getArgs(frame)\n\trounds = tonumber(args.rounds) or 2\n\tlocal teams = math.pow(2, rounds)\n\tpadding = '%0' .. (teams < 10 and 1 or 2) .. 'd'\n\tlocal compact = (args['compact'] and (args['compact'] == 'yes' or args['compact'] == 'y'))\n\thideSeeds = (args['seeds'] and (args['seeds'] == 'no' or args['seeds'] == 'n'))\n\tshowSeeds = (args['seeds'] and (args['seeds'] == 'yes' or args['seeds'] == 'y'))\n\n\t-- set default seeds for round 1\n\tlocal seeds = getSeeds()\n\tlocal argname\n\tfor i = 1, table.getn(seeds) do\n\t\targname = getTeamArgName(1, 'seed', i)\n\t\tif not args[argname] then\n\t\t\targs[argname] = seeds[i]\n\t\tend\n\tend\n\n\tlocal tbl = mw.html.create('table')\n\t\t:css('border-style', 'none')\n\t\t:css('font-size', '90%')\n\t\t:css('margin', '1em 2em 1em 1em')\n\t\t:css('border-collapse', 'separate')\n\t\t:css('border-spacing', '0')\n\n\tif (args['nowrap'] and (args['nowrap'] == 'yes' or args['nowrap'] == 'y')) then\n\t\ttbl:css('white-space', 'nowrap')\n\tend\n\n\tif compact then\n\t\ttbl:css('font-size', '90%'):attr('cellpadding', '0')\n\tend\n\n\trenderHeading(tbl, compact)\n\trenderTree(tbl, compact)\n\treturn tostring(tbl)\nend\n\nreturn p"}}}